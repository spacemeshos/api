// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: spacemesh/v2beta1/tx.proto

package spacemeshv2beta1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TransactionStreamService_Stream_FullMethodName = "/spacemesh.v2beta1.TransactionStreamService/Stream"
)

// TransactionStreamServiceClient is the client API for TransactionStreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransactionStreamServiceClient interface {
	Stream(ctx context.Context, in *TransactionStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TransactionResponse], error)
}

type transactionStreamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionStreamServiceClient(cc grpc.ClientConnInterface) TransactionStreamServiceClient {
	return &transactionStreamServiceClient{cc}
}

func (c *transactionStreamServiceClient) Stream(ctx context.Context, in *TransactionStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TransactionResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TransactionStreamService_ServiceDesc.Streams[0], TransactionStreamService_Stream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TransactionStreamRequest, TransactionResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TransactionStreamService_StreamClient = grpc.ServerStreamingClient[TransactionResponse]

// TransactionStreamServiceServer is the server API for TransactionStreamService service.
// All implementations should embed UnimplementedTransactionStreamServiceServer
// for forward compatibility.
type TransactionStreamServiceServer interface {
	Stream(*TransactionStreamRequest, grpc.ServerStreamingServer[TransactionResponse]) error
}

// UnimplementedTransactionStreamServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTransactionStreamServiceServer struct{}

func (UnimplementedTransactionStreamServiceServer) Stream(*TransactionStreamRequest, grpc.ServerStreamingServer[TransactionResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}
func (UnimplementedTransactionStreamServiceServer) testEmbeddedByValue() {}

// UnsafeTransactionStreamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionStreamServiceServer will
// result in compilation errors.
type UnsafeTransactionStreamServiceServer interface {
	mustEmbedUnimplementedTransactionStreamServiceServer()
}

func RegisterTransactionStreamServiceServer(s grpc.ServiceRegistrar, srv TransactionStreamServiceServer) {
	// If the following call pancis, it indicates UnimplementedTransactionStreamServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TransactionStreamService_ServiceDesc, srv)
}

func _TransactionStreamService_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TransactionStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TransactionStreamServiceServer).Stream(m, &grpc.GenericServerStream[TransactionStreamRequest, TransactionResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TransactionStreamService_StreamServer = grpc.ServerStreamingServer[TransactionResponse]

// TransactionStreamService_ServiceDesc is the grpc.ServiceDesc for TransactionStreamService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransactionStreamService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spacemesh.v2beta1.TransactionStreamService",
	HandlerType: (*TransactionStreamServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _TransactionStreamService_Stream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "spacemesh/v2beta1/tx.proto",
}

const (
	TransactionService_List_FullMethodName              = "/spacemesh.v2beta1.TransactionService/List"
	TransactionService_ParseTransaction_FullMethodName  = "/spacemesh.v2beta1.TransactionService/ParseTransaction"
	TransactionService_SubmitTransaction_FullMethodName = "/spacemesh.v2beta1.TransactionService/SubmitTransaction"
	TransactionService_EstimateGas_FullMethodName       = "/spacemesh.v2beta1.TransactionService/EstimateGas"
)

// TransactionServiceClient is the client API for TransactionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransactionServiceClient interface {
	// List of transactions
	//
	// List is a method that takes a "{{.RequestType.Name}}" body and returns an "{{.ResponseType.Name}}".
	// This method is used to retrieve a list of transactions based on the provided request parameters.
	List(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionList, error)
	// Parse transaction
	//
	// ParseTransaction is a method that takes a "{{.RequestType.Name}}" body and returns an "{{.ResponseType.Name}}".
	// This method is used to parse a signed binary transaction and optionally verify its signature.
	ParseTransaction(ctx context.Context, in *ParseTransactionRequest, opts ...grpc.CallOption) (*ParseTransactionResponse, error)
	// Submit transaction
	//
	// SubmitTransaction is a method that takes a "{{.RequestType.Name}}" body and returns an "{{.ResponseType.Name}}".
	// This method is used to submit a signed binary transaction to the network.
	SubmitTransaction(ctx context.Context, in *SubmitTransactionRequest, opts ...grpc.CallOption) (*SubmitTransactionResponse, error)
	// Estimate gas for transaction
	//
	// EstimateGas is a method that takes a "{{.RequestType.Name}}" body and returns an "{{.ResponseType.Name}}".
	// This method is used to estimate the recommended maximum gas for a signed binary transaction.
	EstimateGas(ctx context.Context, in *EstimateGasRequest, opts ...grpc.CallOption) (*EstimateGasResponse, error)
}

type transactionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionServiceClient(cc grpc.ClientConnInterface) TransactionServiceClient {
	return &transactionServiceClient{cc}
}

func (c *transactionServiceClient) List(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionList)
	err := c.cc.Invoke(ctx, TransactionService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) ParseTransaction(ctx context.Context, in *ParseTransactionRequest, opts ...grpc.CallOption) (*ParseTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ParseTransactionResponse)
	err := c.cc.Invoke(ctx, TransactionService_ParseTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) SubmitTransaction(ctx context.Context, in *SubmitTransactionRequest, opts ...grpc.CallOption) (*SubmitTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitTransactionResponse)
	err := c.cc.Invoke(ctx, TransactionService_SubmitTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) EstimateGas(ctx context.Context, in *EstimateGasRequest, opts ...grpc.CallOption) (*EstimateGasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EstimateGasResponse)
	err := c.cc.Invoke(ctx, TransactionService_EstimateGas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionServiceServer is the server API for TransactionService service.
// All implementations should embed UnimplementedTransactionServiceServer
// for forward compatibility.
type TransactionServiceServer interface {
	// List of transactions
	//
	// List is a method that takes a "{{.RequestType.Name}}" body and returns an "{{.ResponseType.Name}}".
	// This method is used to retrieve a list of transactions based on the provided request parameters.
	List(context.Context, *TransactionRequest) (*TransactionList, error)
	// Parse transaction
	//
	// ParseTransaction is a method that takes a "{{.RequestType.Name}}" body and returns an "{{.ResponseType.Name}}".
	// This method is used to parse a signed binary transaction and optionally verify its signature.
	ParseTransaction(context.Context, *ParseTransactionRequest) (*ParseTransactionResponse, error)
	// Submit transaction
	//
	// SubmitTransaction is a method that takes a "{{.RequestType.Name}}" body and returns an "{{.ResponseType.Name}}".
	// This method is used to submit a signed binary transaction to the network.
	SubmitTransaction(context.Context, *SubmitTransactionRequest) (*SubmitTransactionResponse, error)
	// Estimate gas for transaction
	//
	// EstimateGas is a method that takes a "{{.RequestType.Name}}" body and returns an "{{.ResponseType.Name}}".
	// This method is used to estimate the recommended maximum gas for a signed binary transaction.
	EstimateGas(context.Context, *EstimateGasRequest) (*EstimateGasResponse, error)
}

// UnimplementedTransactionServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTransactionServiceServer struct{}

func (UnimplementedTransactionServiceServer) List(context.Context, *TransactionRequest) (*TransactionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedTransactionServiceServer) ParseTransaction(context.Context, *ParseTransactionRequest) (*ParseTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseTransaction not implemented")
}
func (UnimplementedTransactionServiceServer) SubmitTransaction(context.Context, *SubmitTransactionRequest) (*SubmitTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitTransaction not implemented")
}
func (UnimplementedTransactionServiceServer) EstimateGas(context.Context, *EstimateGasRequest) (*EstimateGasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateGas not implemented")
}
func (UnimplementedTransactionServiceServer) testEmbeddedByValue() {}

// UnsafeTransactionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionServiceServer will
// result in compilation errors.
type UnsafeTransactionServiceServer interface {
	mustEmbedUnimplementedTransactionServiceServer()
}

func RegisterTransactionServiceServer(s grpc.ServiceRegistrar, srv TransactionServiceServer) {
	// If the following call pancis, it indicates UnimplementedTransactionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TransactionService_ServiceDesc, srv)
}

func _TransactionService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).List(ctx, req.(*TransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_ParseTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).ParseTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_ParseTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).ParseTransaction(ctx, req.(*ParseTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_SubmitTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).SubmitTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_SubmitTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).SubmitTransaction(ctx, req.(*SubmitTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_EstimateGas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstimateGasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).EstimateGas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_EstimateGas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).EstimateGas(ctx, req.(*EstimateGasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TransactionService_ServiceDesc is the grpc.ServiceDesc for TransactionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransactionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spacemesh.v2beta1.TransactionService",
	HandlerType: (*TransactionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _TransactionService_List_Handler,
		},
		{
			MethodName: "ParseTransaction",
			Handler:    _TransactionService_ParseTransaction_Handler,
		},
		{
			MethodName: "SubmitTransaction",
			Handler:    _TransactionService_SubmitTransaction_Handler,
		},
		{
			MethodName: "EstimateGas",
			Handler:    _TransactionService_EstimateGas_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spacemesh/v2beta1/tx.proto",
}
