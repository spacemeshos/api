syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "spacemesh/v1/types.proto";

package spacemesh.v1;

message CheckpointStreamRequest {
  uint32 snapshot_layer = 1;
  uint32 num_atxs = 2;
}

message CheckpointStreamResponse {
  bytes data = 1;
}

message RecoverRequest {
  string uri = 1;
  uint32 restore_layer = 2;
}

message Event {
  // time when event occured.
  google.protobuf.Timestamp timestamp = 1;
  // the reason of the failure may be complex to pinpoint.
  // for the first version we want to highlight that failure occured and defer user to logs.
  bool failure = 2;
  string help = 3;
  oneof details {
    EventBeacon beacon = 4;
    EventInitStart init_start = 5;
    EventInitComplete init_complete = 6;
    EventPostStart post_start = 7;
    EventPostComplete post_complete = 8;
    EventPoetWaitRound poet_wait_round = 9;
    EventPoetWaitProof poet_wait_proof = 10;
    EventAtxPubished atx_published = 11;
    EventEligibilities eligibilities = 12;
    EventProposal proposal = 13;
    EventInitFailed init_failed = 14;
    EventMalfeasance malfeasance = 15;
    EventPostServiceStarted post_service_started = 16;
    EventPostServiceStopped post_service_stopped = 17;
    EventWaitingForPoETRegistrationWindow waiting_for_poet_registration_window = 18;
    EventProofDownloadedFromPoet proof_downloaded_from_poet = 19;
    EventRegisteredInPoet registered_in_poet = 20;
    EventBestProofSelected best_proof_selected = 21;
    EventWaitingForPoETRoundEnd waiting_for_poet_round_end = 22;
  }
}

message EventBeacon {
  uint32 epoch = 1;
  bytes beacon = 2;
}

message EventInitStart {
  bytes smesher = 1;
  bytes commitment = 2;
}

message EventInitFailed {
  bytes smesher = 1;
  bytes commitment = 2;
  string error = 3;
}

message EventInitComplete {
  bytes smesher = 1;
}

message EventPostServiceStarted {}

message EventPostServiceStopped {}

message EventPostStart {
  bytes challenge = 1;
  bytes smesher = 2;
}

message EventPostComplete {
  bytes challenge = 1;
  bytes smesher = 2;
}

// Deprecated. Will be removed soon. Use WaitingForPoETRegistrationWindow instead.
message EventPoetWaitRound {
  option deprecated = true;
  uint32 current = 1;
  uint32 publish = 2;
  google.protobuf.Duration wait = 3;
  google.protobuf.Timestamp until = 4;
  bytes smesher = 5;
}

message EventWaitingForPoETRegistrationWindow {
  uint32 current = 1;
  uint32 publish = 2;
  google.protobuf.Timestamp round_end = 3;
  bytes smesher = 4;
}

// Deprecated. Will be removed soon. Use EventWaitingForPoETRoundEnd instead.
message EventPoetWaitProof {
  option deprecated = true;
  uint32 publish = 1;
  uint32 target = 2;
  google.protobuf.Duration wait = 3;
  google.protobuf.Timestamp until = 4;
  bytes smesher = 5;
}

message EventWaitingForPoETRoundEnd {
  uint32 publish = 1;
  uint32 target = 2;
  google.protobuf.Timestamp round_end = 3;
  bytes smesher = 4;
}

message EventAtxPubished {
  uint32 current = 1;
  uint32 target = 2;
  bytes id = 3;
  google.protobuf.Duration wait = 4;
  google.protobuf.Timestamp until = 5;
  bytes smesher = 6;
}

message EventEligibilities {
  uint32 epoch = 1;
  bytes beacon = 2;
  bytes atx = 3;
  uint32 active_set_size = 4;
  repeated ProposalEligibility eligibilities = 5;
  bytes smesher = 6;
}

message ProposalEligibility {
  uint32 layer = 1;
  uint32 count = 2;
}

// Published proposal. Rewards will be received, once proposal is included into the block.
message EventProposal {
  uint32 layer = 1;
  bytes proposal = 2;
  bytes smesher = 3;
}

message EventMalfeasance {
  MalfeasanceProof proof = 1;
}

message EventStreamRequest {}

message EventRegisteredInPoet {
  string url = 1;
  bytes smesher = 2;
  string round_id = 3;
}

// ticks is proof leaves / tickSize
message EventProofDownloadedFromPoet {
  string url = 1;
  string round_id = 2;
  uint64 ticks = 3;
}

message EventBestProofSelected {
  string url = 1;
  string round_id = 2;
  uint64 ticks = 3;
  bytes smesher = 4;
}

message ConnectionInfo {
  string address = 1;
  google.protobuf.Duration uptime = 2;
  bool outbound = 3;
  // buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE
  enum Kind {
    Unknown = 0;
    Inbound = 1;
    Outbound = 2;
    HPInbound = 3;
    HPOutbound = 4;
    RelayInbound = 5;
    RelayOutbound = 6;
  }
  Kind kind = 4;
}

message PeerRequestStats {
  uint64 success_count = 1;
  uint64 failure_count = 2;
  optional google.protobuf.Duration latency = 3;
}

message PeerInfo {
  string id = 1;
  repeated ConnectionInfo connections = 2;
  repeated string tags = 4;
  optional PeerRequestStats client_stats = 5;
  optional PeerRequestStats server_stats = 6;
  uint64 bytes_sent = 7;
  uint64 bytes_received = 8;
  repeated uint64 send_rate = 9;
  repeated uint64 recv_rate = 10;
}
