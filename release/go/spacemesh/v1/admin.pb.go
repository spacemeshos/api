// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.21.5
// source: spacemesh/v1/admin.proto

package v1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_spacemesh_v1_admin_proto protoreflect.FileDescriptor

var file_spacemesh_v1_admin_proto_rawDesc = []byte{
	0x0a, 0x18, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x73, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0xfd, 0x01, 0x0a, 0x0c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x63, 0x0a, 0x10, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x25, 0x2e, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x3f, 0x0a, 0x07, 0x52,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65,
	0x73, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x47, 0x0a, 0x0c,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x20, 0x2e, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13,
	0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x30, 0x01, 0x42, 0x34, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x73, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2f, 0x67, 0x6f, 0x2f, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var file_spacemesh_v1_admin_proto_goTypes = []interface{}{
	(*CheckpointStreamRequest)(nil),  // 0: spacemesh.v1.CheckpointStreamRequest
	(*RecoverRequest)(nil),           // 1: spacemesh.v1.RecoverRequest
	(*EventStreamRequest)(nil),       // 2: spacemesh.v1.EventStreamRequest
	(*CheckpointStreamResponse)(nil), // 3: spacemesh.v1.CheckpointStreamResponse
	(*empty.Empty)(nil),              // 4: google.protobuf.Empty
	(*Event)(nil),                    // 5: spacemesh.v1.Event
}
var file_spacemesh_v1_admin_proto_depIdxs = []int32{
	0, // 0: spacemesh.v1.AdminService.CheckpointStream:input_type -> spacemesh.v1.CheckpointStreamRequest
	1, // 1: spacemesh.v1.AdminService.Recover:input_type -> spacemesh.v1.RecoverRequest
	2, // 2: spacemesh.v1.AdminService.EventsStream:input_type -> spacemesh.v1.EventStreamRequest
	3, // 3: spacemesh.v1.AdminService.CheckpointStream:output_type -> spacemesh.v1.CheckpointStreamResponse
	4, // 4: spacemesh.v1.AdminService.Recover:output_type -> google.protobuf.Empty
	5, // 5: spacemesh.v1.AdminService.EventsStream:output_type -> spacemesh.v1.Event
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_spacemesh_v1_admin_proto_init() }
func file_spacemesh_v1_admin_proto_init() {
	if File_spacemesh_v1_admin_proto != nil {
		return
	}
	file_spacemesh_v1_admin_types_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_spacemesh_v1_admin_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_spacemesh_v1_admin_proto_goTypes,
		DependencyIndexes: file_spacemesh_v1_admin_proto_depIdxs,
	}.Build()
	File_spacemesh_v1_admin_proto = out.File
	file_spacemesh_v1_admin_proto_rawDesc = nil
	file_spacemesh_v1_admin_proto_goTypes = nil
	file_spacemesh_v1_admin_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AdminServiceClient is the client API for AdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AdminServiceClient interface {
	// Returns the checkpoint data.
	CheckpointStream(ctx context.Context, in *CheckpointStreamRequest, opts ...grpc.CallOption) (AdminService_CheckpointStreamClient, error)
	// Recovers from the provided checkpoint data.
	Recover(ctx context.Context, in *RecoverRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Events that are relevant for node operator
	EventsStream(ctx context.Context, in *EventStreamRequest, opts ...grpc.CallOption) (AdminService_EventsStreamClient, error)
}

type adminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminServiceClient(cc grpc.ClientConnInterface) AdminServiceClient {
	return &adminServiceClient{cc}
}

func (c *adminServiceClient) CheckpointStream(ctx context.Context, in *CheckpointStreamRequest, opts ...grpc.CallOption) (AdminService_CheckpointStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AdminService_serviceDesc.Streams[0], "/spacemesh.v1.AdminService/CheckpointStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &adminServiceCheckpointStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AdminService_CheckpointStreamClient interface {
	Recv() (*CheckpointStreamResponse, error)
	grpc.ClientStream
}

type adminServiceCheckpointStreamClient struct {
	grpc.ClientStream
}

func (x *adminServiceCheckpointStreamClient) Recv() (*CheckpointStreamResponse, error) {
	m := new(CheckpointStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *adminServiceClient) Recover(ctx context.Context, in *RecoverRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/spacemesh.v1.AdminService/Recover", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) EventsStream(ctx context.Context, in *EventStreamRequest, opts ...grpc.CallOption) (AdminService_EventsStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AdminService_serviceDesc.Streams[1], "/spacemesh.v1.AdminService/EventsStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &adminServiceEventsStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AdminService_EventsStreamClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type adminServiceEventsStreamClient struct {
	grpc.ClientStream
}

func (x *adminServiceEventsStreamClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AdminServiceServer is the server API for AdminService service.
type AdminServiceServer interface {
	// Returns the checkpoint data.
	CheckpointStream(*CheckpointStreamRequest, AdminService_CheckpointStreamServer) error
	// Recovers from the provided checkpoint data.
	Recover(context.Context, *RecoverRequest) (*empty.Empty, error)
	// Events that are relevant for node operator
	EventsStream(*EventStreamRequest, AdminService_EventsStreamServer) error
}

// UnimplementedAdminServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAdminServiceServer struct {
}

func (*UnimplementedAdminServiceServer) CheckpointStream(*CheckpointStreamRequest, AdminService_CheckpointStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method CheckpointStream not implemented")
}
func (*UnimplementedAdminServiceServer) Recover(context.Context, *RecoverRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Recover not implemented")
}
func (*UnimplementedAdminServiceServer) EventsStream(*EventStreamRequest, AdminService_EventsStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method EventsStream not implemented")
}

func RegisterAdminServiceServer(s *grpc.Server, srv AdminServiceServer) {
	s.RegisterService(&_AdminService_serviceDesc, srv)
}

func _AdminService_CheckpointStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CheckpointStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AdminServiceServer).CheckpointStream(m, &adminServiceCheckpointStreamServer{stream})
}

type AdminService_CheckpointStreamServer interface {
	Send(*CheckpointStreamResponse) error
	grpc.ServerStream
}

type adminServiceCheckpointStreamServer struct {
	grpc.ServerStream
}

func (x *adminServiceCheckpointStreamServer) Send(m *CheckpointStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AdminService_Recover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecoverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).Recover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemesh.v1.AdminService/Recover",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).Recover(ctx, req.(*RecoverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_EventsStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AdminServiceServer).EventsStream(m, &adminServiceEventsStreamServer{stream})
}

type AdminService_EventsStreamServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type adminServiceEventsStreamServer struct {
	grpc.ServerStream
}

func (x *adminServiceEventsStreamServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

var _AdminService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "spacemesh.v1.AdminService",
	HandlerType: (*AdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Recover",
			Handler:    _AdminService_Recover_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CheckpointStream",
			Handler:       _AdminService_CheckpointStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "EventsStream",
			Handler:       _AdminService_EventsStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "spacemesh/v1/admin.proto",
}
