syntax = "proto3";
package spacemesh;
import "google/protobuf/empty.proto";
import "spacemesh/types.proto";
import "spacemesh/mesh_types.proto";


// Readonly API for basic mesh info
service MeshService {

    // Network genesis time as unix epoch time
    rpc GenesisTime(google.protobuf.Empty) returns (SimpleInt);

    // Current layer number
    rpc CurrentLayer(google.protobuf.Empty) returns (SimpleInt);

    // Current epoch number
    rpc CurrentEpoch(google.protobuf.Empty) returns (SimpleInt);

    // Network ID
    rpc NetId(google.protobuf.Empty) returns (SimpleInt);

    // Number of layers per epoch (a network parameter)
    rpc EpochNumLayers(google.protobuf.Empty) returns (SimpleInt);

    // Number of transactions per second (a network parameter)
    rpc MaxTransactionsPerSecond(google.protobuf.Empty) returns (SimpleInt);

    // Get account data query
    rpc AccountData(AccountMeshDataQueryParams) returns (AccountMeshDataResult);

    // Layers data query
    rpc Layers(LayersQueryParams) returns (LayersQueryResult);

    ////////// Streams
    // These streams only return new data available to the node and not
    // historical data. Historical data is obtained via queries

    // A stream of transactions or activations from an account.
    // Includes simple coin transactions with the account as the destination.
    rpc AccountDataStream(AccountMeshDataStreamFilter) returns (stream AccountMeshData);

    // Layer with blocks and transactions
    // Sent each time layer data changes. Designed for heavy-duty clients
    rpc LayerStream(google.protobuf.Empty) returns (stream Layer);
}
