syntax = "proto3";

import "google/api/visibility.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

package spacemesh.v2alpha1;

message PoetServicesRequest {}

enum IdentityStatus {
  UNSPECIFIED = 0;
  IS_SYNCING = 1;
  WAIT_FOR_POET_ROUND_START = 2;
  WAIT_FOR_POET_ROUND_END = 3;
  FETCHING_PROOFS = 4;
  POST_PROVING = 5;
}


enum RegistrationStatus {
  UNKNOWN = 0;
  SUCCESS_REG = 1;
  FAILED_REG = 2;
  RESIDUAL_REG = 3;
  NO_REG = 4;
}

message PoetServicesResponse {
  message Identity {
    message PoetInfo {
      string url = 1;
      google.protobuf.Timestamp poet_round_end = 2;
      RegistrationStatus registration_status = 3;
      string warning = 4;
    }

    bytes smesher_id = 1;
    IdentityStatus status = 2;
    repeated PoetInfo poet_infos = 3;
  }
    repeated Identity identities = 3;
}

service SmeshingIdentitiesService {
  option (google.api.api_visibility).restriction = "V2";

  // Returns set of configured poet addresses and poets addresses from registrations, if given,
  // and warning in case, if there are registrations with poets, which are not in configured poets set.
  rpc PoetServices (PoetServicesRequest) returns (PoetServicesResponse){}
}