// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        (unknown)
// source: spacemesh/v2alpha1/smeshing_identities.proto

package spacemeshv2alpha1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	_ "google.golang.org/genproto/googleapis/api/visibility"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IdentityState int32

const (
	IdentityState_UNSPECIFIED                          IdentityState = 0
	IdentityState_WAIT_FOR_ATX_SYNCED                  IdentityState = 1
	IdentityState_RETRYING                             IdentityState = 2
	IdentityState_WAITING_FOR_POET_REGISTRATION_WINDOW IdentityState = 3
	IdentityState_POET_CHALLENGE_READY                 IdentityState = 4
	IdentityState_POET_REGISTERED                      IdentityState = 5
	IdentityState_WAIT_FOR_POET_ROUND_END              IdentityState = 6
	IdentityState_POET_PROOF_RECEIVED                  IdentityState = 7
	IdentityState_GENERATING_POST_PROOF                IdentityState = 8
	IdentityState_POST_PROOF_READY                     IdentityState = 9
	IdentityState_ATX_READY                            IdentityState = 10
	IdentityState_ATX_BROADCASTED                      IdentityState = 11
	IdentityState_PROPOSAL_PUBLISHED                   IdentityState = 12
)

// Enum value maps for IdentityState.
var (
	IdentityState_name = map[int32]string{
		0:  "UNSPECIFIED",
		1:  "WAIT_FOR_ATX_SYNCED",
		2:  "RETRYING",
		3:  "WAITING_FOR_POET_REGISTRATION_WINDOW",
		4:  "POET_CHALLENGE_READY",
		5:  "POET_REGISTERED",
		6:  "WAIT_FOR_POET_ROUND_END",
		7:  "POET_PROOF_RECEIVED",
		8:  "GENERATING_POST_PROOF",
		9:  "POST_PROOF_READY",
		10: "ATX_READY",
		11: "ATX_BROADCASTED",
		12: "PROPOSAL_PUBLISHED",
	}
	IdentityState_value = map[string]int32{
		"UNSPECIFIED":                          0,
		"WAIT_FOR_ATX_SYNCED":                  1,
		"RETRYING":                             2,
		"WAITING_FOR_POET_REGISTRATION_WINDOW": 3,
		"POET_CHALLENGE_READY":                 4,
		"POET_REGISTERED":                      5,
		"WAIT_FOR_POET_ROUND_END":              6,
		"POET_PROOF_RECEIVED":                  7,
		"GENERATING_POST_PROOF":                8,
		"POST_PROOF_READY":                     9,
		"ATX_READY":                            10,
		"ATX_BROADCASTED":                      11,
		"PROPOSAL_PUBLISHED":                   12,
	}
)

func (x IdentityState) Enum() *IdentityState {
	p := new(IdentityState)
	*p = x
	return p
}

func (x IdentityState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IdentityState) Descriptor() protoreflect.EnumDescriptor {
	return file_spacemesh_v2alpha1_smeshing_identities_proto_enumTypes[0].Descriptor()
}

func (IdentityState) Type() protoreflect.EnumType {
	return &file_spacemesh_v2alpha1_smeshing_identities_proto_enumTypes[0]
}

func (x IdentityState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IdentityState.Descriptor instead.
func (IdentityState) EnumDescriptor() ([]byte, []int) {
	return file_spacemesh_v2alpha1_smeshing_identities_proto_rawDescGZIP(), []int{0}
}

type IdentityStatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IdentityStatesRequest) Reset() {
	*x = IdentityStatesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentityStatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentityStatesRequest) ProtoMessage() {}

func (x *IdentityStatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentityStatesRequest.ProtoReflect.Descriptor instead.
func (*IdentityStatesRequest) Descriptor() ([]byte, []int) {
	return file_spacemesh_v2alpha1_smeshing_identities_proto_rawDescGZIP(), []int{0}
}

type RetryingState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *RetryingState) Reset() {
	*x = RetryingState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetryingState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryingState) ProtoMessage() {}

func (x *RetryingState) ProtoReflect() protoreflect.Message {
	mi := &file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryingState.ProtoReflect.Descriptor instead.
func (*RetryingState) Descriptor() ([]byte, []int) {
	return file_spacemesh_v2alpha1_smeshing_identities_proto_rawDescGZIP(), []int{1}
}

func (x *RetryingState) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type WaitForAtxSyncedState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WaitForAtxSyncedState) Reset() {
	*x = WaitForAtxSyncedState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitForAtxSyncedState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitForAtxSyncedState) ProtoMessage() {}

func (x *WaitForAtxSyncedState) ProtoReflect() protoreflect.Message {
	mi := &file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitForAtxSyncedState.ProtoReflect.Descriptor instead.
func (*WaitForAtxSyncedState) Descriptor() ([]byte, []int) {
	return file_spacemesh_v2alpha1_smeshing_identities_proto_rawDescGZIP(), []int{2}
}

type WaitingForPoetRegistrationWindowState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WaitingForPoetRegistrationWindowState) Reset() {
	*x = WaitingForPoetRegistrationWindowState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitingForPoetRegistrationWindowState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitingForPoetRegistrationWindowState) ProtoMessage() {}

func (x *WaitingForPoetRegistrationWindowState) ProtoReflect() protoreflect.Message {
	mi := &file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitingForPoetRegistrationWindowState.ProtoReflect.Descriptor instead.
func (*WaitingForPoetRegistrationWindowState) Descriptor() ([]byte, []int) {
	return file_spacemesh_v2alpha1_smeshing_identities_proto_rawDescGZIP(), []int{3}
}

type PoetChallengeReadyState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PoetChallengeReadyState) Reset() {
	*x = PoetChallengeReadyState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoetChallengeReadyState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoetChallengeReadyState) ProtoMessage() {}

func (x *PoetChallengeReadyState) ProtoReflect() protoreflect.Message {
	mi := &file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoetChallengeReadyState.ProtoReflect.Descriptor instead.
func (*PoetChallengeReadyState) Descriptor() ([]byte, []int) {
	return file_spacemesh_v2alpha1_smeshing_identities_proto_rawDescGZIP(), []int{4}
}

type PoETRegistration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeHash []byte                 `protobuf:"bytes,1,opt,name=challenge_hash,json=challengeHash,proto3" json:"challenge_hash,omitempty"`
	Address       string                 `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	RoundId       string                 `protobuf:"bytes,3,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"`
	RoundEnd      *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=round_end,json=roundEnd,proto3" json:"round_end,omitempty"`
}

func (x *PoETRegistration) Reset() {
	*x = PoETRegistration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoETRegistration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoETRegistration) ProtoMessage() {}

func (x *PoETRegistration) ProtoReflect() protoreflect.Message {
	mi := &file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoETRegistration.ProtoReflect.Descriptor instead.
func (*PoETRegistration) Descriptor() ([]byte, []int) {
	return file_spacemesh_v2alpha1_smeshing_identities_proto_rawDescGZIP(), []int{5}
}

func (x *PoETRegistration) GetChallengeHash() []byte {
	if x != nil {
		return x.ChallengeHash
	}
	return nil
}

func (x *PoETRegistration) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *PoETRegistration) GetRoundId() string {
	if x != nil {
		return x.RoundId
	}
	return ""
}

func (x *PoETRegistration) GetRoundEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.RoundEnd
	}
	return nil
}

type PoetRegisteredState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Registrations []*PoETRegistration `protobuf:"bytes,1,rep,name=registrations,proto3" json:"registrations,omitempty"`
}

func (x *PoetRegisteredState) Reset() {
	*x = PoetRegisteredState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoetRegisteredState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoetRegisteredState) ProtoMessage() {}

func (x *PoetRegisteredState) ProtoReflect() protoreflect.Message {
	mi := &file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoetRegisteredState.ProtoReflect.Descriptor instead.
func (*PoetRegisteredState) Descriptor() ([]byte, []int) {
	return file_spacemesh_v2alpha1_smeshing_identities_proto_rawDescGZIP(), []int{6}
}

func (x *PoetRegisteredState) GetRegistrations() []*PoETRegistration {
	if x != nil {
		return x.Registrations
	}
	return nil
}

type WaitForPoetRoundEndState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WaitForPoetRoundEndState) Reset() {
	*x = WaitForPoetRoundEndState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitForPoetRoundEndState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitForPoetRoundEndState) ProtoMessage() {}

func (x *WaitForPoetRoundEndState) ProtoReflect() protoreflect.Message {
	mi := &file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitForPoetRoundEndState.ProtoReflect.Descriptor instead.
func (*WaitForPoetRoundEndState) Descriptor() ([]byte, []int) {
	return file_spacemesh_v2alpha1_smeshing_identities_proto_rawDescGZIP(), []int{7}
}

type PoetProofReceivedState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PoetUrl string `protobuf:"bytes,1,opt,name=poet_url,json=poetUrl,proto3" json:"poet_url,omitempty"`
}

func (x *PoetProofReceivedState) Reset() {
	*x = PoetProofReceivedState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoetProofReceivedState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoetProofReceivedState) ProtoMessage() {}

func (x *PoetProofReceivedState) ProtoReflect() protoreflect.Message {
	mi := &file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoetProofReceivedState.ProtoReflect.Descriptor instead.
func (*PoetProofReceivedState) Descriptor() ([]byte, []int) {
	return file_spacemesh_v2alpha1_smeshing_identities_proto_rawDescGZIP(), []int{8}
}

func (x *PoetProofReceivedState) GetPoetUrl() string {
	if x != nil {
		return x.PoetUrl
	}
	return ""
}

type GeneratingPostProofState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GeneratingPostProofState) Reset() {
	*x = GeneratingPostProofState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneratingPostProofState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneratingPostProofState) ProtoMessage() {}

func (x *GeneratingPostProofState) ProtoReflect() protoreflect.Message {
	mi := &file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneratingPostProofState.ProtoReflect.Descriptor instead.
func (*GeneratingPostProofState) Descriptor() ([]byte, []int) {
	return file_spacemesh_v2alpha1_smeshing_identities_proto_rawDescGZIP(), []int{9}
}

type PostProofReadyState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PostProofReadyState) Reset() {
	*x = PostProofReadyState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostProofReadyState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostProofReadyState) ProtoMessage() {}

func (x *PostProofReadyState) ProtoReflect() protoreflect.Message {
	mi := &file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostProofReadyState.ProtoReflect.Descriptor instead.
func (*PostProofReadyState) Descriptor() ([]byte, []int) {
	return file_spacemesh_v2alpha1_smeshing_identities_proto_rawDescGZIP(), []int{10}
}

type AtxReadyState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AtxReadyState) Reset() {
	*x = AtxReadyState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AtxReadyState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AtxReadyState) ProtoMessage() {}

func (x *AtxReadyState) ProtoReflect() protoreflect.Message {
	mi := &file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AtxReadyState.ProtoReflect.Descriptor instead.
func (*AtxReadyState) Descriptor() ([]byte, []int) {
	return file_spacemesh_v2alpha1_smeshing_identities_proto_rawDescGZIP(), []int{11}
}

type AtxBroadcastedState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AtxId []byte `protobuf:"bytes,1,opt,name=atx_id,json=atxId,proto3" json:"atx_id,omitempty"`
}

func (x *AtxBroadcastedState) Reset() {
	*x = AtxBroadcastedState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AtxBroadcastedState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AtxBroadcastedState) ProtoMessage() {}

func (x *AtxBroadcastedState) ProtoReflect() protoreflect.Message {
	mi := &file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AtxBroadcastedState.ProtoReflect.Descriptor instead.
func (*AtxBroadcastedState) Descriptor() ([]byte, []int) {
	return file_spacemesh_v2alpha1_smeshing_identities_proto_rawDescGZIP(), []int{12}
}

func (x *AtxBroadcastedState) GetAtxId() []byte {
	if x != nil {
		return x.AtxId
	}
	return nil
}

type ProposalPublishedState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proposal []byte `protobuf:"bytes,1,opt,name=proposal,proto3" json:"proposal,omitempty"`
	Layer    uint32 `protobuf:"varint,2,opt,name=layer,proto3" json:"layer,omitempty"`
}

func (x *ProposalPublishedState) Reset() {
	*x = ProposalPublishedState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProposalPublishedState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposalPublishedState) ProtoMessage() {}

func (x *ProposalPublishedState) ProtoReflect() protoreflect.Message {
	mi := &file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposalPublishedState.ProtoReflect.Descriptor instead.
func (*ProposalPublishedState) Descriptor() ([]byte, []int) {
	return file_spacemesh_v2alpha1_smeshing_identities_proto_rawDescGZIP(), []int{13}
}

func (x *ProposalPublishedState) GetProposal() []byte {
	if x != nil {
		return x.Proposal
	}
	return nil
}

func (x *ProposalPublishedState) GetLayer() uint32 {
	if x != nil {
		return x.Layer
	}
	return 0
}

type IdentityStateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State        IdentityState          `protobuf:"varint,1,opt,name=state,proto3,enum=spacemesh.v2alpha1.IdentityState" json:"state,omitempty"`
	PublishEpoch *uint32                `protobuf:"varint,2,opt,name=publish_epoch,json=publishEpoch,proto3,oneof" json:"publish_epoch,omitempty"`
	Time         *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
	// Types that are assignable to Metadata:
	//
	//	*IdentityStateInfo_Retrying
	//	*IdentityStateInfo_WaitForAtxSynced
	//	*IdentityStateInfo_WaitingForPoetRegistrationWindow
	//	*IdentityStateInfo_PoetChallengeReady
	//	*IdentityStateInfo_PoetRegistered
	//	*IdentityStateInfo_WaitForPoetRoundEnd
	//	*IdentityStateInfo_PoetProofReceived
	//	*IdentityStateInfo_GeneratingPostProof
	//	*IdentityStateInfo_PostProofReady
	//	*IdentityStateInfo_AtxReady
	//	*IdentityStateInfo_AtxBroadcasted
	//	*IdentityStateInfo_ProposalPublished
	Metadata isIdentityStateInfo_Metadata `protobuf_oneof:"metadata"`
}

func (x *IdentityStateInfo) Reset() {
	*x = IdentityStateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentityStateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentityStateInfo) ProtoMessage() {}

func (x *IdentityStateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentityStateInfo.ProtoReflect.Descriptor instead.
func (*IdentityStateInfo) Descriptor() ([]byte, []int) {
	return file_spacemesh_v2alpha1_smeshing_identities_proto_rawDescGZIP(), []int{14}
}

func (x *IdentityStateInfo) GetState() IdentityState {
	if x != nil {
		return x.State
	}
	return IdentityState_UNSPECIFIED
}

func (x *IdentityStateInfo) GetPublishEpoch() uint32 {
	if x != nil && x.PublishEpoch != nil {
		return *x.PublishEpoch
	}
	return 0
}

func (x *IdentityStateInfo) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (m *IdentityStateInfo) GetMetadata() isIdentityStateInfo_Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (x *IdentityStateInfo) GetRetrying() *RetryingState {
	if x, ok := x.GetMetadata().(*IdentityStateInfo_Retrying); ok {
		return x.Retrying
	}
	return nil
}

func (x *IdentityStateInfo) GetWaitForAtxSynced() *WaitForAtxSyncedState {
	if x, ok := x.GetMetadata().(*IdentityStateInfo_WaitForAtxSynced); ok {
		return x.WaitForAtxSynced
	}
	return nil
}

func (x *IdentityStateInfo) GetWaitingForPoetRegistrationWindow() *WaitingForPoetRegistrationWindowState {
	if x, ok := x.GetMetadata().(*IdentityStateInfo_WaitingForPoetRegistrationWindow); ok {
		return x.WaitingForPoetRegistrationWindow
	}
	return nil
}

func (x *IdentityStateInfo) GetPoetChallengeReady() *PoetChallengeReadyState {
	if x, ok := x.GetMetadata().(*IdentityStateInfo_PoetChallengeReady); ok {
		return x.PoetChallengeReady
	}
	return nil
}

func (x *IdentityStateInfo) GetPoetRegistered() *PoetRegisteredState {
	if x, ok := x.GetMetadata().(*IdentityStateInfo_PoetRegistered); ok {
		return x.PoetRegistered
	}
	return nil
}

func (x *IdentityStateInfo) GetWaitForPoetRoundEnd() *WaitForPoetRoundEndState {
	if x, ok := x.GetMetadata().(*IdentityStateInfo_WaitForPoetRoundEnd); ok {
		return x.WaitForPoetRoundEnd
	}
	return nil
}

func (x *IdentityStateInfo) GetPoetProofReceived() *PoetProofReceivedState {
	if x, ok := x.GetMetadata().(*IdentityStateInfo_PoetProofReceived); ok {
		return x.PoetProofReceived
	}
	return nil
}

func (x *IdentityStateInfo) GetGeneratingPostProof() *GeneratingPostProofState {
	if x, ok := x.GetMetadata().(*IdentityStateInfo_GeneratingPostProof); ok {
		return x.GeneratingPostProof
	}
	return nil
}

func (x *IdentityStateInfo) GetPostProofReady() *PostProofReadyState {
	if x, ok := x.GetMetadata().(*IdentityStateInfo_PostProofReady); ok {
		return x.PostProofReady
	}
	return nil
}

func (x *IdentityStateInfo) GetAtxReady() *AtxReadyState {
	if x, ok := x.GetMetadata().(*IdentityStateInfo_AtxReady); ok {
		return x.AtxReady
	}
	return nil
}

func (x *IdentityStateInfo) GetAtxBroadcasted() *AtxBroadcastedState {
	if x, ok := x.GetMetadata().(*IdentityStateInfo_AtxBroadcasted); ok {
		return x.AtxBroadcasted
	}
	return nil
}

func (x *IdentityStateInfo) GetProposalPublished() *ProposalPublishedState {
	if x, ok := x.GetMetadata().(*IdentityStateInfo_ProposalPublished); ok {
		return x.ProposalPublished
	}
	return nil
}

type isIdentityStateInfo_Metadata interface {
	isIdentityStateInfo_Metadata()
}

type IdentityStateInfo_Retrying struct {
	Retrying *RetryingState `protobuf:"bytes,4,opt,name=retrying,proto3,oneof"`
}

type IdentityStateInfo_WaitForAtxSynced struct {
	WaitForAtxSynced *WaitForAtxSyncedState `protobuf:"bytes,5,opt,name=wait_for_atx_synced,json=waitForAtxSynced,proto3,oneof"`
}

type IdentityStateInfo_WaitingForPoetRegistrationWindow struct {
	WaitingForPoetRegistrationWindow *WaitingForPoetRegistrationWindowState `protobuf:"bytes,6,opt,name=waiting_for_poet_registration_window,json=waitingForPoetRegistrationWindow,proto3,oneof"`
}

type IdentityStateInfo_PoetChallengeReady struct {
	PoetChallengeReady *PoetChallengeReadyState `protobuf:"bytes,7,opt,name=poet_challenge_ready,json=poetChallengeReady,proto3,oneof"`
}

type IdentityStateInfo_PoetRegistered struct {
	PoetRegistered *PoetRegisteredState `protobuf:"bytes,8,opt,name=poet_registered,json=poetRegistered,proto3,oneof"`
}

type IdentityStateInfo_WaitForPoetRoundEnd struct {
	WaitForPoetRoundEnd *WaitForPoetRoundEndState `protobuf:"bytes,9,opt,name=wait_for_poet_round_end,json=waitForPoetRoundEnd,proto3,oneof"`
}

type IdentityStateInfo_PoetProofReceived struct {
	PoetProofReceived *PoetProofReceivedState `protobuf:"bytes,10,opt,name=poet_proof_received,json=poetProofReceived,proto3,oneof"`
}

type IdentityStateInfo_GeneratingPostProof struct {
	GeneratingPostProof *GeneratingPostProofState `protobuf:"bytes,11,opt,name=generating_post_proof,json=generatingPostProof,proto3,oneof"`
}

type IdentityStateInfo_PostProofReady struct {
	PostProofReady *PostProofReadyState `protobuf:"bytes,12,opt,name=post_proof_ready,json=postProofReady,proto3,oneof"`
}

type IdentityStateInfo_AtxReady struct {
	AtxReady *AtxReadyState `protobuf:"bytes,13,opt,name=atx_ready,json=atxReady,proto3,oneof"`
}

type IdentityStateInfo_AtxBroadcasted struct {
	AtxBroadcasted *AtxBroadcastedState `protobuf:"bytes,14,opt,name=atx_broadcasted,json=atxBroadcasted,proto3,oneof"`
}

type IdentityStateInfo_ProposalPublished struct {
	ProposalPublished *ProposalPublishedState `protobuf:"bytes,15,opt,name=proposal_published,json=proposalPublished,proto3,oneof"`
}

func (*IdentityStateInfo_Retrying) isIdentityStateInfo_Metadata() {}

func (*IdentityStateInfo_WaitForAtxSynced) isIdentityStateInfo_Metadata() {}

func (*IdentityStateInfo_WaitingForPoetRegistrationWindow) isIdentityStateInfo_Metadata() {}

func (*IdentityStateInfo_PoetChallengeReady) isIdentityStateInfo_Metadata() {}

func (*IdentityStateInfo_PoetRegistered) isIdentityStateInfo_Metadata() {}

func (*IdentityStateInfo_WaitForPoetRoundEnd) isIdentityStateInfo_Metadata() {}

func (*IdentityStateInfo_PoetProofReceived) isIdentityStateInfo_Metadata() {}

func (*IdentityStateInfo_GeneratingPostProof) isIdentityStateInfo_Metadata() {}

func (*IdentityStateInfo_PostProofReady) isIdentityStateInfo_Metadata() {}

func (*IdentityStateInfo_AtxReady) isIdentityStateInfo_Metadata() {}

func (*IdentityStateInfo_AtxBroadcasted) isIdentityStateInfo_Metadata() {}

func (*IdentityStateInfo_ProposalPublished) isIdentityStateInfo_Metadata() {}

type Identity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	History []*IdentityStateInfo `protobuf:"bytes,1,rep,name=history,proto3" json:"history,omitempty"`
}

func (x *Identity) Reset() {
	*x = Identity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity) ProtoMessage() {}

func (x *Identity) ProtoReflect() protoreflect.Message {
	mi := &file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity.ProtoReflect.Descriptor instead.
func (*Identity) Descriptor() ([]byte, []int) {
	return file_spacemesh_v2alpha1_smeshing_identities_proto_rawDescGZIP(), []int{15}
}

func (x *Identity) GetHistory() []*IdentityStateInfo {
	if x != nil {
		return x.History
	}
	return nil
}

type IdentityStatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identities map[string]*Identity `protobuf:"bytes,1,rep,name=identities,proto3" json:"identities,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *IdentityStatesResponse) Reset() {
	*x = IdentityStatesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentityStatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentityStatesResponse) ProtoMessage() {}

func (x *IdentityStatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentityStatesResponse.ProtoReflect.Descriptor instead.
func (*IdentityStatesResponse) Descriptor() ([]byte, []int) {
	return file_spacemesh_v2alpha1_smeshing_identities_proto_rawDescGZIP(), []int{16}
}

func (x *IdentityStatesResponse) GetIdentities() map[string]*Identity {
	if x != nil {
		return x.Identities
	}
	return nil
}

// PoetInfo rpc
type PoetInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PoetInfoRequest) Reset() {
	*x = PoetInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoetInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoetInfoRequest) ProtoMessage() {}

func (x *PoetInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoetInfoRequest.ProtoReflect.Descriptor instead.
func (*PoetInfoRequest) Descriptor() ([]byte, []int) {
	return file_spacemesh_v2alpha1_smeshing_identities_proto_rawDescGZIP(), []int{17}
}

type PoetConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhaseShift *durationpb.Duration `protobuf:"bytes,1,opt,name=phase_shift,json=phaseShift,proto3" json:"phase_shift,omitempty"`
	CycleGap   *durationpb.Duration `protobuf:"bytes,2,opt,name=cycle_gap,json=cycleGap,proto3" json:"cycle_gap,omitempty"`
}

func (x *PoetConfig) Reset() {
	*x = PoetConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoetConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoetConfig) ProtoMessage() {}

func (x *PoetConfig) ProtoReflect() protoreflect.Message {
	mi := &file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoetConfig.ProtoReflect.Descriptor instead.
func (*PoetConfig) Descriptor() ([]byte, []int) {
	return file_spacemesh_v2alpha1_smeshing_identities_proto_rawDescGZIP(), []int{18}
}

func (x *PoetConfig) GetPhaseShift() *durationpb.Duration {
	if x != nil {
		return x.PhaseShift
	}
	return nil
}

func (x *PoetConfig) GetCycleGap() *durationpb.Duration {
	if x != nil {
		return x.CycleGap
	}
	return nil
}

type PoetInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Poets  []string    `protobuf:"bytes,1,rep,name=poets,proto3" json:"poets,omitempty"`
	Config *PoetConfig `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *PoetInfoResponse) Reset() {
	*x = PoetInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoetInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoetInfoResponse) ProtoMessage() {}

func (x *PoetInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoetInfoResponse.ProtoReflect.Descriptor instead.
func (*PoetInfoResponse) Descriptor() ([]byte, []int) {
	return file_spacemesh_v2alpha1_smeshing_identities_proto_rawDescGZIP(), []int{19}
}

func (x *PoetInfoResponse) GetPoets() []string {
	if x != nil {
		return x.Poets
	}
	return nil
}

func (x *PoetInfoResponse) GetConfig() *PoetConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

// Proposals and eligibilities
type Eligibilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eligibilities []*ProposalEligibility `protobuf:"bytes,5,rep,name=eligibilities,proto3" json:"eligibilities,omitempty"`
}

func (x *Eligibilities) Reset() {
	*x = Eligibilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Eligibilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Eligibilities) ProtoMessage() {}

func (x *Eligibilities) ProtoReflect() protoreflect.Message {
	mi := &file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Eligibilities.ProtoReflect.Descriptor instead.
func (*Eligibilities) Descriptor() ([]byte, []int) {
	return file_spacemesh_v2alpha1_smeshing_identities_proto_rawDescGZIP(), []int{20}
}

func (x *Eligibilities) GetEligibilities() []*ProposalEligibility {
	if x != nil {
		return x.Eligibilities
	}
	return nil
}

type ProposalEligibility struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Layer uint32 `protobuf:"varint,1,opt,name=layer,proto3" json:"layer,omitempty"`
	Count uint32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ProposalEligibility) Reset() {
	*x = ProposalEligibility{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProposalEligibility) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposalEligibility) ProtoMessage() {}

func (x *ProposalEligibility) ProtoReflect() protoreflect.Message {
	mi := &file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposalEligibility.ProtoReflect.Descriptor instead.
func (*ProposalEligibility) Descriptor() ([]byte, []int) {
	return file_spacemesh_v2alpha1_smeshing_identities_proto_rawDescGZIP(), []int{21}
}

func (x *ProposalEligibility) GetLayer() uint32 {
	if x != nil {
		return x.Layer
	}
	return 0
}

func (x *ProposalEligibility) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type EpochEligibilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epochs map[uint32]*Eligibilities `protobuf:"bytes,1,rep,name=epochs,proto3" json:"epochs,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *EpochEligibilities) Reset() {
	*x = EpochEligibilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpochEligibilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpochEligibilities) ProtoMessage() {}

func (x *EpochEligibilities) ProtoReflect() protoreflect.Message {
	mi := &file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpochEligibilities.ProtoReflect.Descriptor instead.
func (*EpochEligibilities) Descriptor() ([]byte, []int) {
	return file_spacemesh_v2alpha1_smeshing_identities_proto_rawDescGZIP(), []int{22}
}

func (x *EpochEligibilities) GetEpochs() map[uint32]*Eligibilities {
	if x != nil {
		return x.Epochs
	}
	return nil
}

type EligibilitiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EligibilitiesRequest) Reset() {
	*x = EligibilitiesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EligibilitiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EligibilitiesRequest) ProtoMessage() {}

func (x *EligibilitiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EligibilitiesRequest.ProtoReflect.Descriptor instead.
func (*EligibilitiesRequest) Descriptor() ([]byte, []int) {
	return file_spacemesh_v2alpha1_smeshing_identities_proto_rawDescGZIP(), []int{23}
}

type EligibilitiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eligibilities map[string]*EpochEligibilities `protobuf:"bytes,1,rep,name=eligibilities,proto3" json:"eligibilities,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *EligibilitiesResponse) Reset() {
	*x = EligibilitiesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EligibilitiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EligibilitiesResponse) ProtoMessage() {}

func (x *EligibilitiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EligibilitiesResponse.ProtoReflect.Descriptor instead.
func (*EligibilitiesResponse) Descriptor() ([]byte, []int) {
	return file_spacemesh_v2alpha1_smeshing_identities_proto_rawDescGZIP(), []int{24}
}

func (x *EligibilitiesResponse) GetEligibilities() map[string]*EpochEligibilities {
	if x != nil {
		return x.Eligibilities
	}
	return nil
}

type ProposalsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ProposalsRequest) Reset() {
	*x = ProposalsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProposalsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposalsRequest) ProtoMessage() {}

func (x *ProposalsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposalsRequest.ProtoReflect.Descriptor instead.
func (*ProposalsRequest) Descriptor() ([]byte, []int) {
	return file_spacemesh_v2alpha1_smeshing_identities_proto_rawDescGZIP(), []int{25}
}

type Proposal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Layer    uint32 `protobuf:"varint,1,opt,name=layer,proto3" json:"layer,omitempty"`
	Proposal []byte `protobuf:"bytes,2,opt,name=proposal,proto3" json:"proposal,omitempty"`
}

func (x *Proposal) Reset() {
	*x = Proposal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proposal) ProtoMessage() {}

func (x *Proposal) ProtoReflect() protoreflect.Message {
	mi := &file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proposal.ProtoReflect.Descriptor instead.
func (*Proposal) Descriptor() ([]byte, []int) {
	return file_spacemesh_v2alpha1_smeshing_identities_proto_rawDescGZIP(), []int{26}
}

func (x *Proposal) GetLayer() uint32 {
	if x != nil {
		return x.Layer
	}
	return 0
}

func (x *Proposal) GetProposal() []byte {
	if x != nil {
		return x.Proposal
	}
	return nil
}

type Proposals struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proposals []*Proposal `protobuf:"bytes,1,rep,name=proposals,proto3" json:"proposals,omitempty"`
}

func (x *Proposals) Reset() {
	*x = Proposals{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proposals) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proposals) ProtoMessage() {}

func (x *Proposals) ProtoReflect() protoreflect.Message {
	mi := &file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proposals.ProtoReflect.Descriptor instead.
func (*Proposals) Descriptor() ([]byte, []int) {
	return file_spacemesh_v2alpha1_smeshing_identities_proto_rawDescGZIP(), []int{27}
}

func (x *Proposals) GetProposals() []*Proposal {
	if x != nil {
		return x.Proposals
	}
	return nil
}

type ProposalsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proposals map[string]*Proposals `protobuf:"bytes,1,rep,name=proposals,proto3" json:"proposals,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ProposalsResponse) Reset() {
	*x = ProposalsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProposalsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposalsResponse) ProtoMessage() {}

func (x *ProposalsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposalsResponse.ProtoReflect.Descriptor instead.
func (*ProposalsResponse) Descriptor() ([]byte, []int) {
	return file_spacemesh_v2alpha1_smeshing_identities_proto_rawDescGZIP(), []int{28}
}

func (x *ProposalsResponse) GetProposals() map[string]*Proposals {
	if x != nil {
		return x.Proposals
	}
	return nil
}

var File_spacemesh_v2alpha1_smeshing_identities_proto protoreflect.FileDescriptor

var file_spacemesh_v2alpha1_smeshing_identities_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x76, 0x32, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x73, 0x6d, 0x65, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x69, 0x73,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x17, 0x0a, 0x15, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x29, 0x0a, 0x0d, 0x52, 0x65, 0x74, 0x72, 0x79, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x17, 0x0a, 0x15, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x41, 0x74, 0x78, 0x53, 0x79, 0x6e,
	0x63, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x27, 0x0a, 0x25, 0x57, 0x61, 0x69, 0x74,
	0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x50, 0x6f, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x22, 0x19, 0x0a, 0x17, 0x50, 0x6f, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xa7, 0x01, 0x0a,
	0x10, 0x50, 0x6f, 0x45, 0x54, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x37, 0x0a,
	0x09, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x45, 0x6e, 0x64, 0x22, 0x61, 0x0a, 0x13, 0x50, 0x6f, 0x65, 0x74, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4a, 0x0a,
	0x0d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68,
	0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x45, 0x54, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x1a, 0x0a, 0x18, 0x57, 0x61, 0x69,
	0x74, 0x46, 0x6f, 0x72, 0x50, 0x6f, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x6e, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x33, 0x0a, 0x16, 0x50, 0x6f, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x70, 0x6f, 0x65, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x6f, 0x65, 0x74, 0x55, 0x72, 0x6c, 0x22, 0x1a, 0x0a, 0x18, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6f,
	0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x15, 0x0a, 0x13, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x52, 0x65, 0x61, 0x64, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x0f, 0x0a,
	0x0d, 0x41, 0x74, 0x78, 0x52, 0x65, 0x61, 0x64, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x2c,
	0x0a, 0x13, 0x41, 0x74, 0x78, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x61, 0x74, 0x78, 0x49, 0x64, 0x22, 0x4a, 0x0a, 0x16,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x22, 0x94, 0x0a, 0x0a, 0x11, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x37,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01,
	0x52, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x88, 0x01,
	0x01, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x3f, 0x0a, 0x08, 0x72, 0x65, 0x74, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e,
	0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x74, 0x72, 0x79, 0x69,
	0x6e, 0x67, 0x12, 0x5a, 0x0a, 0x13, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x61,
	0x74, 0x78, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x32, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x41, 0x74, 0x78, 0x53,
	0x79, 0x6e, 0x63, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x10, 0x77, 0x61,
	0x69, 0x74, 0x46, 0x6f, 0x72, 0x41, 0x74, 0x78, 0x53, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x12, 0x8b,
	0x01, 0x0a, 0x24, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x70,
	0x6f, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x50, 0x6f, 0x65,
	0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x20, 0x77, 0x61, 0x69, 0x74,
	0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x50, 0x6f, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x5f, 0x0a, 0x14,
	0x70, 0x6f, 0x65, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x72,
	0x65, 0x61, 0x64, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x50, 0x6f, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x61,
	0x64, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x12, 0x70, 0x6f, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x52, 0x0a,
	0x0f, 0x70, 0x6f, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65,
	0x73, 0x68, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x65, 0x74,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48,
	0x00, 0x52, 0x0e, 0x70, 0x6f, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x12, 0x64, 0x0a, 0x17, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x70, 0x6f,
	0x65, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76,
	0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x50,
	0x6f, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x48, 0x00, 0x52, 0x13, 0x77, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x50, 0x6f, 0x65, 0x74, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x45, 0x6e, 0x64, 0x12, 0x5c, 0x0a, 0x13, 0x70, 0x6f, 0x65, 0x74, 0x5f,
	0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68,
	0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x48, 0x00, 0x52, 0x11, 0x70, 0x6f, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x62, 0x0a, 0x15, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68,
	0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x48, 0x00, 0x52, 0x13, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x53, 0x0a, 0x10, 0x70, 0x6f, 0x73,
	0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e,
	0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x52, 0x65, 0x61, 0x64, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0e,
	0x70, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x40,
	0x0a, 0x09, 0x61, 0x74, 0x78, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x32,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x74, 0x78, 0x52, 0x65, 0x61, 0x64, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x08, 0x61, 0x74, 0x78, 0x52, 0x65, 0x61, 0x64, 0x79,
	0x12, 0x52, 0x0a, 0x0f, 0x61, 0x74, 0x78, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41,
	0x74, 0x78, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x61, 0x74, 0x78, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x65, 0x64, 0x12, 0x5b, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x32, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x11,
	0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x42, 0x0a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x22,
	0x4b, 0x0a, 0x08, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x3f, 0x0a, 0x07, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22, 0xd1, 0x01, 0x0a,
	0x16, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x1a, 0x5b, 0x0a, 0x0f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x73, 0x68, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x11, 0x0a, 0x0f, 0x50, 0x6f, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x80, 0x01, 0x0a, 0x0a, 0x50, 0x6f, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x3a, 0x0a, 0x0b, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x68, 0x69, 0x66,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x68, 0x61, 0x73, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x12, 0x36,
	0x0a, 0x09, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f, 0x67, 0x61, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x63, 0x79,
	0x63, 0x6c, 0x65, 0x47, 0x61, 0x70, 0x22, 0x60, 0x0a, 0x10, 0x50, 0x6f, 0x65, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f,
	0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6f, 0x65, 0x74, 0x73,
	0x12, 0x36, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x32, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x5e, 0x0a, 0x0d, 0x45, 0x6c, 0x69, 0x67,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x0d, 0x65, 0x6c, 0x69,
	0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x32, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x45, 0x6c,
	0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0d, 0x65, 0x6c, 0x69, 0x67, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0x41, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xbe, 0x01, 0x0a, 0x12,
	0x45, 0x70, 0x6f, 0x63, 0x68, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x4a, 0x0a, 0x06, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76,
	0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x45, 0x6c, 0x69,
	0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x73, 0x1a, 0x5c,
	0x0a, 0x0b, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x16, 0x0a, 0x14,
	0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0xe5, 0x01, 0x0a, 0x15, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62,
	0x0a, 0x0d, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73,
	0x68, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x6c, 0x69, 0x67, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0d, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x1a, 0x68, 0x0a, 0x12, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45,
	0x70, 0x6f, 0x63, 0x68, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x12, 0x0a, 0x10,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x3c, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x22, 0x47,
	0x0a, 0x09, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x12, 0x3a, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x22, 0xc4, 0x01, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x32, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x73, 0x1a, 0x5b, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68,
	0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0xc3,
	0x02, 0x0a, 0x0d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x17, 0x0a, 0x13, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x41, 0x54,
	0x58, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45,
	0x54, 0x52, 0x59, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x28, 0x0a, 0x24, 0x57, 0x41, 0x49, 0x54,
	0x49, 0x4e, 0x47, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x50, 0x4f, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x47,
	0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57,
	0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x4f, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c,
	0x45, 0x4e, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f,
	0x50, 0x4f, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x45, 0x44, 0x10,
	0x05, 0x12, 0x1b, 0x0a, 0x17, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x50, 0x4f,
	0x45, 0x54, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x06, 0x12, 0x17,
	0x0a, 0x13, 0x50, 0x4f, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x4f, 0x46, 0x5f, 0x52, 0x45, 0x43,
	0x45, 0x49, 0x56, 0x45, 0x44, 0x10, 0x07, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x45, 0x4e, 0x45, 0x52,
	0x41, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x4f, 0x46,
	0x10, 0x08, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x4f, 0x53, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x4f, 0x46,
	0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x09, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x54, 0x58, 0x5f,
	0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x54, 0x58, 0x5f, 0x42,
	0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x16, 0x0a, 0x12,
	0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48,
	0x45, 0x44, 0x10, 0x0c, 0x32, 0xa7, 0x03, 0x0a, 0x19, 0x53, 0x6d, 0x65, 0x73, 0x68, 0x69, 0x6e,
	0x67, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x61, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x29, 0x2e, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x73, 0x68, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x08, 0x50, 0x6f, 0x65, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x23, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x32,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65,
	0x73, 0x68, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x65, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x66,
	0x0a, 0x0d, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x28, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x32, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45,
	0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x73, 0x12, 0x24, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e,
	0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x1a, 0x0a, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x04, 0x12, 0x02, 0x56, 0x32, 0x42, 0xe6,
	0x01, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68,
	0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x42, 0x17, 0x53, 0x6d, 0x65, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x73, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x3b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0xa2, 0x02, 0x03, 0x53, 0x58, 0x58, 0xaa, 0x02, 0x12, 0x53, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65,
	0x73, 0x68, 0x2e, 0x56, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xca, 0x02, 0x12, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x5c, 0x56, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0xe2, 0x02, 0x1e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x5c, 0x56, 0x32, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0xea, 0x02, 0x13, 0x53, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x3a, 0x3a, 0x56,
	0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_spacemesh_v2alpha1_smeshing_identities_proto_rawDescOnce sync.Once
	file_spacemesh_v2alpha1_smeshing_identities_proto_rawDescData = file_spacemesh_v2alpha1_smeshing_identities_proto_rawDesc
)

func file_spacemesh_v2alpha1_smeshing_identities_proto_rawDescGZIP() []byte {
	file_spacemesh_v2alpha1_smeshing_identities_proto_rawDescOnce.Do(func() {
		file_spacemesh_v2alpha1_smeshing_identities_proto_rawDescData = protoimpl.X.CompressGZIP(file_spacemesh_v2alpha1_smeshing_identities_proto_rawDescData)
	})
	return file_spacemesh_v2alpha1_smeshing_identities_proto_rawDescData
}

var file_spacemesh_v2alpha1_smeshing_identities_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_spacemesh_v2alpha1_smeshing_identities_proto_goTypes = []interface{}{
	(IdentityState)(0),                            // 0: spacemesh.v2alpha1.IdentityState
	(*IdentityStatesRequest)(nil),                 // 1: spacemesh.v2alpha1.IdentityStatesRequest
	(*RetryingState)(nil),                         // 2: spacemesh.v2alpha1.RetryingState
	(*WaitForAtxSyncedState)(nil),                 // 3: spacemesh.v2alpha1.WaitForAtxSyncedState
	(*WaitingForPoetRegistrationWindowState)(nil), // 4: spacemesh.v2alpha1.WaitingForPoetRegistrationWindowState
	(*PoetChallengeReadyState)(nil),               // 5: spacemesh.v2alpha1.PoetChallengeReadyState
	(*PoETRegistration)(nil),                      // 6: spacemesh.v2alpha1.PoETRegistration
	(*PoetRegisteredState)(nil),                   // 7: spacemesh.v2alpha1.PoetRegisteredState
	(*WaitForPoetRoundEndState)(nil),              // 8: spacemesh.v2alpha1.WaitForPoetRoundEndState
	(*PoetProofReceivedState)(nil),                // 9: spacemesh.v2alpha1.PoetProofReceivedState
	(*GeneratingPostProofState)(nil),              // 10: spacemesh.v2alpha1.GeneratingPostProofState
	(*PostProofReadyState)(nil),                   // 11: spacemesh.v2alpha1.PostProofReadyState
	(*AtxReadyState)(nil),                         // 12: spacemesh.v2alpha1.AtxReadyState
	(*AtxBroadcastedState)(nil),                   // 13: spacemesh.v2alpha1.AtxBroadcastedState
	(*ProposalPublishedState)(nil),                // 14: spacemesh.v2alpha1.ProposalPublishedState
	(*IdentityStateInfo)(nil),                     // 15: spacemesh.v2alpha1.IdentityStateInfo
	(*Identity)(nil),                              // 16: spacemesh.v2alpha1.Identity
	(*IdentityStatesResponse)(nil),                // 17: spacemesh.v2alpha1.IdentityStatesResponse
	(*PoetInfoRequest)(nil),                       // 18: spacemesh.v2alpha1.PoetInfoRequest
	(*PoetConfig)(nil),                            // 19: spacemesh.v2alpha1.PoetConfig
	(*PoetInfoResponse)(nil),                      // 20: spacemesh.v2alpha1.PoetInfoResponse
	(*Eligibilities)(nil),                         // 21: spacemesh.v2alpha1.Eligibilities
	(*ProposalEligibility)(nil),                   // 22: spacemesh.v2alpha1.ProposalEligibility
	(*EpochEligibilities)(nil),                    // 23: spacemesh.v2alpha1.EpochEligibilities
	(*EligibilitiesRequest)(nil),                  // 24: spacemesh.v2alpha1.EligibilitiesRequest
	(*EligibilitiesResponse)(nil),                 // 25: spacemesh.v2alpha1.EligibilitiesResponse
	(*ProposalsRequest)(nil),                      // 26: spacemesh.v2alpha1.ProposalsRequest
	(*Proposal)(nil),                              // 27: spacemesh.v2alpha1.Proposal
	(*Proposals)(nil),                             // 28: spacemesh.v2alpha1.Proposals
	(*ProposalsResponse)(nil),                     // 29: spacemesh.v2alpha1.ProposalsResponse
	nil,                                           // 30: spacemesh.v2alpha1.IdentityStatesResponse.IdentitiesEntry
	nil,                                           // 31: spacemesh.v2alpha1.EpochEligibilities.EpochsEntry
	nil,                                           // 32: spacemesh.v2alpha1.EligibilitiesResponse.EligibilitiesEntry
	nil,                                           // 33: spacemesh.v2alpha1.ProposalsResponse.ProposalsEntry
	(*timestamppb.Timestamp)(nil),                 // 34: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),                   // 35: google.protobuf.Duration
}
var file_spacemesh_v2alpha1_smeshing_identities_proto_depIdxs = []int32{
	34, // 0: spacemesh.v2alpha1.PoETRegistration.round_end:type_name -> google.protobuf.Timestamp
	6,  // 1: spacemesh.v2alpha1.PoetRegisteredState.registrations:type_name -> spacemesh.v2alpha1.PoETRegistration
	0,  // 2: spacemesh.v2alpha1.IdentityStateInfo.state:type_name -> spacemesh.v2alpha1.IdentityState
	34, // 3: spacemesh.v2alpha1.IdentityStateInfo.time:type_name -> google.protobuf.Timestamp
	2,  // 4: spacemesh.v2alpha1.IdentityStateInfo.retrying:type_name -> spacemesh.v2alpha1.RetryingState
	3,  // 5: spacemesh.v2alpha1.IdentityStateInfo.wait_for_atx_synced:type_name -> spacemesh.v2alpha1.WaitForAtxSyncedState
	4,  // 6: spacemesh.v2alpha1.IdentityStateInfo.waiting_for_poet_registration_window:type_name -> spacemesh.v2alpha1.WaitingForPoetRegistrationWindowState
	5,  // 7: spacemesh.v2alpha1.IdentityStateInfo.poet_challenge_ready:type_name -> spacemesh.v2alpha1.PoetChallengeReadyState
	7,  // 8: spacemesh.v2alpha1.IdentityStateInfo.poet_registered:type_name -> spacemesh.v2alpha1.PoetRegisteredState
	8,  // 9: spacemesh.v2alpha1.IdentityStateInfo.wait_for_poet_round_end:type_name -> spacemesh.v2alpha1.WaitForPoetRoundEndState
	9,  // 10: spacemesh.v2alpha1.IdentityStateInfo.poet_proof_received:type_name -> spacemesh.v2alpha1.PoetProofReceivedState
	10, // 11: spacemesh.v2alpha1.IdentityStateInfo.generating_post_proof:type_name -> spacemesh.v2alpha1.GeneratingPostProofState
	11, // 12: spacemesh.v2alpha1.IdentityStateInfo.post_proof_ready:type_name -> spacemesh.v2alpha1.PostProofReadyState
	12, // 13: spacemesh.v2alpha1.IdentityStateInfo.atx_ready:type_name -> spacemesh.v2alpha1.AtxReadyState
	13, // 14: spacemesh.v2alpha1.IdentityStateInfo.atx_broadcasted:type_name -> spacemesh.v2alpha1.AtxBroadcastedState
	14, // 15: spacemesh.v2alpha1.IdentityStateInfo.proposal_published:type_name -> spacemesh.v2alpha1.ProposalPublishedState
	15, // 16: spacemesh.v2alpha1.Identity.history:type_name -> spacemesh.v2alpha1.IdentityStateInfo
	30, // 17: spacemesh.v2alpha1.IdentityStatesResponse.identities:type_name -> spacemesh.v2alpha1.IdentityStatesResponse.IdentitiesEntry
	35, // 18: spacemesh.v2alpha1.PoetConfig.phase_shift:type_name -> google.protobuf.Duration
	35, // 19: spacemesh.v2alpha1.PoetConfig.cycle_gap:type_name -> google.protobuf.Duration
	19, // 20: spacemesh.v2alpha1.PoetInfoResponse.config:type_name -> spacemesh.v2alpha1.PoetConfig
	22, // 21: spacemesh.v2alpha1.Eligibilities.eligibilities:type_name -> spacemesh.v2alpha1.ProposalEligibility
	31, // 22: spacemesh.v2alpha1.EpochEligibilities.epochs:type_name -> spacemesh.v2alpha1.EpochEligibilities.EpochsEntry
	32, // 23: spacemesh.v2alpha1.EligibilitiesResponse.eligibilities:type_name -> spacemesh.v2alpha1.EligibilitiesResponse.EligibilitiesEntry
	27, // 24: spacemesh.v2alpha1.Proposals.proposals:type_name -> spacemesh.v2alpha1.Proposal
	33, // 25: spacemesh.v2alpha1.ProposalsResponse.proposals:type_name -> spacemesh.v2alpha1.ProposalsResponse.ProposalsEntry
	16, // 26: spacemesh.v2alpha1.IdentityStatesResponse.IdentitiesEntry.value:type_name -> spacemesh.v2alpha1.Identity
	21, // 27: spacemesh.v2alpha1.EpochEligibilities.EpochsEntry.value:type_name -> spacemesh.v2alpha1.Eligibilities
	23, // 28: spacemesh.v2alpha1.EligibilitiesResponse.EligibilitiesEntry.value:type_name -> spacemesh.v2alpha1.EpochEligibilities
	28, // 29: spacemesh.v2alpha1.ProposalsResponse.ProposalsEntry.value:type_name -> spacemesh.v2alpha1.Proposals
	1,  // 30: spacemesh.v2alpha1.SmeshingIdentitiesService.States:input_type -> spacemesh.v2alpha1.IdentityStatesRequest
	18, // 31: spacemesh.v2alpha1.SmeshingIdentitiesService.PoetInfo:input_type -> spacemesh.v2alpha1.PoetInfoRequest
	24, // 32: spacemesh.v2alpha1.SmeshingIdentitiesService.Eligibilities:input_type -> spacemesh.v2alpha1.EligibilitiesRequest
	26, // 33: spacemesh.v2alpha1.SmeshingIdentitiesService.Proposals:input_type -> spacemesh.v2alpha1.ProposalsRequest
	17, // 34: spacemesh.v2alpha1.SmeshingIdentitiesService.States:output_type -> spacemesh.v2alpha1.IdentityStatesResponse
	20, // 35: spacemesh.v2alpha1.SmeshingIdentitiesService.PoetInfo:output_type -> spacemesh.v2alpha1.PoetInfoResponse
	25, // 36: spacemesh.v2alpha1.SmeshingIdentitiesService.Eligibilities:output_type -> spacemesh.v2alpha1.EligibilitiesResponse
	29, // 37: spacemesh.v2alpha1.SmeshingIdentitiesService.Proposals:output_type -> spacemesh.v2alpha1.ProposalsResponse
	34, // [34:38] is the sub-list for method output_type
	30, // [30:34] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_spacemesh_v2alpha1_smeshing_identities_proto_init() }
func file_spacemesh_v2alpha1_smeshing_identities_proto_init() {
	if File_spacemesh_v2alpha1_smeshing_identities_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentityStatesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetryingState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitForAtxSyncedState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitingForPoetRegistrationWindowState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoetChallengeReadyState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoETRegistration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoetRegisteredState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitForPoetRoundEndState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoetProofReceivedState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneratingPostProofState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostProofReadyState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AtxReadyState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AtxBroadcastedState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProposalPublishedState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentityStateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentityStatesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoetInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoetConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoetInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Eligibilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProposalEligibility); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EpochEligibilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EligibilitiesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EligibilitiesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProposalsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proposal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proposals); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProposalsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*IdentityStateInfo_Retrying)(nil),
		(*IdentityStateInfo_WaitForAtxSynced)(nil),
		(*IdentityStateInfo_WaitingForPoetRegistrationWindow)(nil),
		(*IdentityStateInfo_PoetChallengeReady)(nil),
		(*IdentityStateInfo_PoetRegistered)(nil),
		(*IdentityStateInfo_WaitForPoetRoundEnd)(nil),
		(*IdentityStateInfo_PoetProofReceived)(nil),
		(*IdentityStateInfo_GeneratingPostProof)(nil),
		(*IdentityStateInfo_PostProofReady)(nil),
		(*IdentityStateInfo_AtxReady)(nil),
		(*IdentityStateInfo_AtxBroadcasted)(nil),
		(*IdentityStateInfo_ProposalPublished)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_spacemesh_v2alpha1_smeshing_identities_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_spacemesh_v2alpha1_smeshing_identities_proto_goTypes,
		DependencyIndexes: file_spacemesh_v2alpha1_smeshing_identities_proto_depIdxs,
		EnumInfos:         file_spacemesh_v2alpha1_smeshing_identities_proto_enumTypes,
		MessageInfos:      file_spacemesh_v2alpha1_smeshing_identities_proto_msgTypes,
	}.Build()
	File_spacemesh_v2alpha1_smeshing_identities_proto = out.File
	file_spacemesh_v2alpha1_smeshing_identities_proto_rawDesc = nil
	file_spacemesh_v2alpha1_smeshing_identities_proto_goTypes = nil
	file_spacemesh_v2alpha1_smeshing_identities_proto_depIdxs = nil
}
