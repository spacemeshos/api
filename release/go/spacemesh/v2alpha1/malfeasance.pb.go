// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        (unknown)
// source: spacemesh/v2alpha1/malfeasance.proto

package spacemeshv2alpha1

import (
	_ "google.golang.org/genproto/googleapis/api/visibility"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MalfeasanceProof_MalfeasanceType int32

const (
	MalfeasanceProof_MALFEASANCE_UNSPECIFIED        MalfeasanceProof_MalfeasanceType = 0
	MalfeasanceProof_MALFEASANCE_ATX                MalfeasanceProof_MalfeasanceType = 1
	MalfeasanceProof_MALFEASANCE_BALLOT             MalfeasanceProof_MalfeasanceType = 2
	MalfeasanceProof_MALFEASANCE_HARE               MalfeasanceProof_MalfeasanceType = 3
	MalfeasanceProof_MALFEASANCE_POST_INDEX         MalfeasanceProof_MalfeasanceType = 4
	MalfeasanceProof_MALFEASANCE_INCORRECT_PREV_ATX MalfeasanceProof_MalfeasanceType = 5
	MalfeasanceProof_MALFEASANCE_DOUBLE_MARRY       MalfeasanceProof_MalfeasanceType = 6
)

// Enum value maps for MalfeasanceProof_MalfeasanceType.
var (
	MalfeasanceProof_MalfeasanceType_name = map[int32]string{
		0: "MALFEASANCE_UNSPECIFIED",
		1: "MALFEASANCE_ATX",
		2: "MALFEASANCE_BALLOT",
		3: "MALFEASANCE_HARE",
		4: "MALFEASANCE_POST_INDEX",
		5: "MALFEASANCE_INCORRECT_PREV_ATX",
		6: "MALFEASANCE_DOUBLE_MARRY",
	}
	MalfeasanceProof_MalfeasanceType_value = map[string]int32{
		"MALFEASANCE_UNSPECIFIED":        0,
		"MALFEASANCE_ATX":                1,
		"MALFEASANCE_BALLOT":             2,
		"MALFEASANCE_HARE":               3,
		"MALFEASANCE_POST_INDEX":         4,
		"MALFEASANCE_INCORRECT_PREV_ATX": 5,
		"MALFEASANCE_DOUBLE_MARRY":       6,
	}
)

func (x MalfeasanceProof_MalfeasanceType) Enum() *MalfeasanceProof_MalfeasanceType {
	p := new(MalfeasanceProof_MalfeasanceType)
	*p = x
	return p
}

func (x MalfeasanceProof_MalfeasanceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MalfeasanceProof_MalfeasanceType) Descriptor() protoreflect.EnumDescriptor {
	return file_spacemesh_v2alpha1_malfeasance_proto_enumTypes[0].Descriptor()
}

func (MalfeasanceProof_MalfeasanceType) Type() protoreflect.EnumType {
	return &file_spacemesh_v2alpha1_malfeasance_proto_enumTypes[0]
}

func (x MalfeasanceProof_MalfeasanceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MalfeasanceProof_MalfeasanceType.Descriptor instead.
func (MalfeasanceProof_MalfeasanceType) EnumDescriptor() ([]byte, []int) {
	return file_spacemesh_v2alpha1_malfeasance_proto_rawDescGZIP(), []int{0, 0}
}

type MalfeasanceProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Smesher   []byte                           `protobuf:"bytes,1,opt,name=smesher,proto3" json:"smesher,omitempty"`
	Layer     uint32                           `protobuf:"varint,2,opt,name=layer,proto3" json:"layer,omitempty"`
	Kind      MalfeasanceProof_MalfeasanceType `protobuf:"varint,3,opt,name=kind,proto3,enum=spacemesh.v2alpha1.MalfeasanceProof_MalfeasanceType" json:"kind,omitempty"`
	DebugInfo string                           `protobuf:"bytes,4,opt,name=debug_info,json=debugInfo,proto3" json:"debug_info,omitempty"`
	Proof     []byte                           `protobuf:"bytes,5,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (x *MalfeasanceProof) Reset() {
	*x = MalfeasanceProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacemesh_v2alpha1_malfeasance_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MalfeasanceProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MalfeasanceProof) ProtoMessage() {}

func (x *MalfeasanceProof) ProtoReflect() protoreflect.Message {
	mi := &file_spacemesh_v2alpha1_malfeasance_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MalfeasanceProof.ProtoReflect.Descriptor instead.
func (*MalfeasanceProof) Descriptor() ([]byte, []int) {
	return file_spacemesh_v2alpha1_malfeasance_proto_rawDescGZIP(), []int{0}
}

func (x *MalfeasanceProof) GetSmesher() []byte {
	if x != nil {
		return x.Smesher
	}
	return nil
}

func (x *MalfeasanceProof) GetLayer() uint32 {
	if x != nil {
		return x.Layer
	}
	return 0
}

func (x *MalfeasanceProof) GetKind() MalfeasanceProof_MalfeasanceType {
	if x != nil {
		return x.Kind
	}
	return MalfeasanceProof_MALFEASANCE_UNSPECIFIED
}

func (x *MalfeasanceProof) GetDebugInfo() string {
	if x != nil {
		return x.DebugInfo
	}
	return ""
}

func (x *MalfeasanceProof) GetProof() []byte {
	if x != nil {
		return x.Proof
	}
	return nil
}

type MalfeasanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SmesherId    [][]byte `protobuf:"bytes,1,rep,name=smesher_id,json=smesherId,proto3" json:"smesher_id,omitempty"`
	IncludeProof bool     `protobuf:"varint,2,opt,name=include_proof,json=includeProof,proto3" json:"include_proof,omitempty"` // whether to include proof
	Offset       uint64   `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`                                 // adjusts the starting point for data
	Limit        uint64   `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`                                   // specifies max number of items to fetch
}

func (x *MalfeasanceRequest) Reset() {
	*x = MalfeasanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacemesh_v2alpha1_malfeasance_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MalfeasanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MalfeasanceRequest) ProtoMessage() {}

func (x *MalfeasanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacemesh_v2alpha1_malfeasance_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MalfeasanceRequest.ProtoReflect.Descriptor instead.
func (*MalfeasanceRequest) Descriptor() ([]byte, []int) {
	return file_spacemesh_v2alpha1_malfeasance_proto_rawDescGZIP(), []int{1}
}

func (x *MalfeasanceRequest) GetSmesherId() [][]byte {
	if x != nil {
		return x.SmesherId
	}
	return nil
}

func (x *MalfeasanceRequest) GetIncludeProof() bool {
	if x != nil {
		return x.IncludeProof
	}
	return false
}

func (x *MalfeasanceRequest) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *MalfeasanceRequest) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type MalfeasanceList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Malfeasances []*MalfeasanceProof `protobuf:"bytes,1,rep,name=malfeasances,proto3" json:"malfeasances,omitempty"`
}

func (x *MalfeasanceList) Reset() {
	*x = MalfeasanceList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacemesh_v2alpha1_malfeasance_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MalfeasanceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MalfeasanceList) ProtoMessage() {}

func (x *MalfeasanceList) ProtoReflect() protoreflect.Message {
	mi := &file_spacemesh_v2alpha1_malfeasance_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MalfeasanceList.ProtoReflect.Descriptor instead.
func (*MalfeasanceList) Descriptor() ([]byte, []int) {
	return file_spacemesh_v2alpha1_malfeasance_proto_rawDescGZIP(), []int{2}
}

func (x *MalfeasanceList) GetMalfeasances() []*MalfeasanceProof {
	if x != nil {
		return x.Malfeasances
	}
	return nil
}

type MalfeasanceStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IncludeProof bool `protobuf:"varint,1,opt,name=include_proof,json=includeProof,proto3" json:"include_proof,omitempty"` // whether to include proof
}

func (x *MalfeasanceStreamRequest) Reset() {
	*x = MalfeasanceStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacemesh_v2alpha1_malfeasance_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MalfeasanceStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MalfeasanceStreamRequest) ProtoMessage() {}

func (x *MalfeasanceStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacemesh_v2alpha1_malfeasance_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MalfeasanceStreamRequest.ProtoReflect.Descriptor instead.
func (*MalfeasanceStreamRequest) Descriptor() ([]byte, []int) {
	return file_spacemesh_v2alpha1_malfeasance_proto_rawDescGZIP(), []int{3}
}

func (x *MalfeasanceStreamRequest) GetIncludeProof() bool {
	if x != nil {
		return x.IncludeProof
	}
	return false
}

var File_spacemesh_v2alpha1_malfeasance_proto protoreflect.FileDescriptor

var file_spacemesh_v2alpha1_malfeasance_proto_rawDesc = []byte{
	0x0a, 0x24, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x76, 0x32, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x6d, 0x61, 0x6c, 0x66, 0x65, 0x61, 0x73, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73,
	0x68, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x93, 0x03, 0x0a, 0x10, 0x4d, 0x61, 0x6c, 0x66,
	0x65, 0x61, 0x73, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x6d, 0x65, 0x73, 0x68, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x73,
	0x6d, 0x65, 0x73, 0x68, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x4d, 0x61, 0x6c, 0x66, 0x65, 0x61, 0x73, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x2e, 0x4d, 0x61, 0x6c, 0x66, 0x65, 0x61, 0x73, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x22, 0xcf, 0x01, 0x0a, 0x0f,
	0x4d, 0x61, 0x6c, 0x66, 0x65, 0x61, 0x73, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1b, 0x0a, 0x17, 0x4d, 0x41, 0x4c, 0x46, 0x45, 0x41, 0x53, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f,
	0x4d, 0x41, 0x4c, 0x46, 0x45, 0x41, 0x53, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x41, 0x54, 0x58, 0x10,
	0x01, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x41, 0x4c, 0x46, 0x45, 0x41, 0x53, 0x41, 0x4e, 0x43, 0x45,
	0x5f, 0x42, 0x41, 0x4c, 0x4c, 0x4f, 0x54, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x41, 0x4c,
	0x46, 0x45, 0x41, 0x53, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x48, 0x41, 0x52, 0x45, 0x10, 0x03, 0x12,
	0x1a, 0x0a, 0x16, 0x4d, 0x41, 0x4c, 0x46, 0x45, 0x41, 0x53, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x50,
	0x4f, 0x53, 0x54, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x10, 0x04, 0x12, 0x22, 0x0a, 0x1e, 0x4d,
	0x41, 0x4c, 0x46, 0x45, 0x41, 0x53, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x52,
	0x52, 0x45, 0x43, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x56, 0x5f, 0x41, 0x54, 0x58, 0x10, 0x05, 0x12,
	0x1c, 0x0a, 0x18, 0x4d, 0x41, 0x4c, 0x46, 0x45, 0x41, 0x53, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x44,
	0x4f, 0x55, 0x42, 0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x52, 0x52, 0x59, 0x10, 0x06, 0x22, 0x86, 0x01,
	0x0a, 0x12, 0x4d, 0x61, 0x6c, 0x66, 0x65, 0x61, 0x73, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6d, 0x65, 0x73, 0x68, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x6d, 0x65, 0x73, 0x68, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x70,
	0x72, 0x6f, 0x6f, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x5b, 0x0a, 0x0f, 0x4d, 0x61, 0x6c, 0x66, 0x65, 0x61,
	0x73, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x0c, 0x6d, 0x61, 0x6c,
	0x66, 0x65, 0x61, 0x73, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x32, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x61, 0x6c, 0x66, 0x65, 0x61, 0x73, 0x61, 0x6e, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x0c, 0x6d, 0x61, 0x6c, 0x66, 0x65, 0x61, 0x73, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x22, 0x3f, 0x0a, 0x18, 0x4d, 0x61, 0x6c, 0x66, 0x65, 0x61, 0x73, 0x61, 0x6e,
	0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x50,
	0x72, 0x6f, 0x6f, 0x66, 0x32, 0x75, 0x0a, 0x12, 0x4d, 0x61, 0x6c, 0x66, 0x65, 0x61, 0x73, 0x61,
	0x6e, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x53, 0x0a, 0x04, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x26, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76,
	0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x61, 0x6c, 0x66, 0x65, 0x61, 0x73, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x4d, 0x61, 0x6c, 0x66, 0x65, 0x61, 0x73, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x1a,
	0x0a, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x04, 0x12, 0x02, 0x56, 0x32, 0x32, 0x8c, 0x01, 0x0a, 0x18,
	0x4d, 0x61, 0x6c, 0x66, 0x65, 0x61, 0x73, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5e, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x12, 0x2c, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76,
	0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x61, 0x6c, 0x66, 0x65, 0x61, 0x73, 0x61,
	0x6e, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x24, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x32, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x61, 0x6c, 0x66, 0x65, 0x61, 0x73, 0x61, 0x6e, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x30, 0x01, 0x1a, 0x10, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x0a,
	0x12, 0x08, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x42, 0xdf, 0x01, 0x0a, 0x16, 0x63,
	0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x32, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x42, 0x10, 0x4d, 0x61, 0x6c, 0x66, 0x65, 0x61, 0x73, 0x61, 0x6e,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4a, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x6f,
	0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2f, 0x67, 0x6f,
	0x2f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x76, 0x32, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x3b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x76, 0x32, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x53, 0x58, 0x58, 0xaa, 0x02, 0x12, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x56, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0xca, 0x02, 0x12, 0x53, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x5c, 0x56, 0x32, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0xe2, 0x02, 0x1e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73,
	0x68, 0x5c, 0x56, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x13, 0x53, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65,
	0x73, 0x68, 0x3a, 0x3a, 0x56, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_spacemesh_v2alpha1_malfeasance_proto_rawDescOnce sync.Once
	file_spacemesh_v2alpha1_malfeasance_proto_rawDescData = file_spacemesh_v2alpha1_malfeasance_proto_rawDesc
)

func file_spacemesh_v2alpha1_malfeasance_proto_rawDescGZIP() []byte {
	file_spacemesh_v2alpha1_malfeasance_proto_rawDescOnce.Do(func() {
		file_spacemesh_v2alpha1_malfeasance_proto_rawDescData = protoimpl.X.CompressGZIP(file_spacemesh_v2alpha1_malfeasance_proto_rawDescData)
	})
	return file_spacemesh_v2alpha1_malfeasance_proto_rawDescData
}

var file_spacemesh_v2alpha1_malfeasance_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_spacemesh_v2alpha1_malfeasance_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_spacemesh_v2alpha1_malfeasance_proto_goTypes = []interface{}{
	(MalfeasanceProof_MalfeasanceType)(0), // 0: spacemesh.v2alpha1.MalfeasanceProof.MalfeasanceType
	(*MalfeasanceProof)(nil),              // 1: spacemesh.v2alpha1.MalfeasanceProof
	(*MalfeasanceRequest)(nil),            // 2: spacemesh.v2alpha1.MalfeasanceRequest
	(*MalfeasanceList)(nil),               // 3: spacemesh.v2alpha1.MalfeasanceList
	(*MalfeasanceStreamRequest)(nil),      // 4: spacemesh.v2alpha1.MalfeasanceStreamRequest
}
var file_spacemesh_v2alpha1_malfeasance_proto_depIdxs = []int32{
	0, // 0: spacemesh.v2alpha1.MalfeasanceProof.kind:type_name -> spacemesh.v2alpha1.MalfeasanceProof.MalfeasanceType
	1, // 1: spacemesh.v2alpha1.MalfeasanceList.malfeasances:type_name -> spacemesh.v2alpha1.MalfeasanceProof
	2, // 2: spacemesh.v2alpha1.MalfeasanceService.List:input_type -> spacemesh.v2alpha1.MalfeasanceRequest
	4, // 3: spacemesh.v2alpha1.MalfeasanceStreamService.Stream:input_type -> spacemesh.v2alpha1.MalfeasanceStreamRequest
	3, // 4: spacemesh.v2alpha1.MalfeasanceService.List:output_type -> spacemesh.v2alpha1.MalfeasanceList
	1, // 5: spacemesh.v2alpha1.MalfeasanceStreamService.Stream:output_type -> spacemesh.v2alpha1.MalfeasanceProof
	4, // [4:6] is the sub-list for method output_type
	2, // [2:4] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_spacemesh_v2alpha1_malfeasance_proto_init() }
func file_spacemesh_v2alpha1_malfeasance_proto_init() {
	if File_spacemesh_v2alpha1_malfeasance_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_spacemesh_v2alpha1_malfeasance_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MalfeasanceProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacemesh_v2alpha1_malfeasance_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MalfeasanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacemesh_v2alpha1_malfeasance_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MalfeasanceList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacemesh_v2alpha1_malfeasance_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MalfeasanceStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_spacemesh_v2alpha1_malfeasance_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_spacemesh_v2alpha1_malfeasance_proto_goTypes,
		DependencyIndexes: file_spacemesh_v2alpha1_malfeasance_proto_depIdxs,
		EnumInfos:         file_spacemesh_v2alpha1_malfeasance_proto_enumTypes,
		MessageInfos:      file_spacemesh_v2alpha1_malfeasance_proto_msgTypes,
	}.Build()
	File_spacemesh_v2alpha1_malfeasance_proto = out.File
	file_spacemesh_v2alpha1_malfeasance_proto_rawDesc = nil
	file_spacemesh_v2alpha1_malfeasance_proto_goTypes = nil
	file_spacemesh_v2alpha1_malfeasance_proto_depIdxs = nil
}
