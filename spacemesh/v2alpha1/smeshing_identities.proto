syntax = "proto3";

import "google/api/visibility.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

package spacemesh.v2alpha1;

message IdentityStatesRequest {}

enum IdentityStatus {
  UNSPECIFIED = 0;

  WAIT_FOR_ATX_SYNCING = 1;

  WAITING_FOR_POET_REGISTRATION_WINDOW = 2;
  POET_CHALLENGE_READY = 3;
  POET_REGISTERED = 4;
  POET_REGISTRATION_FAILED = 5;
  WAIT_FOR_POET_ROUND_END = 6;
  POET_PROOF_RECEIVED = 7;
  POET_PROOF_FAILED = 8;

  GENERATING_POST_PROOF = 9;
  POST_PROOF_READY = 10;
  POST_PROOF_FAILED = 11;

  ATX_EXPIRED = 12;
  ATX_READY = 13;
  ATX_BROADCASTED = 14;
}


//enum RegistrationStatus {
//  UNKNOWN = 0;
//  SUCCESS_REG = 1;
//  FAILED_REG = 2;
//  RESIDUAL_REG = 3;
//  NO_REG = 4;
//}

//type IdentityStateInfo struct {
//	Date string
//}
//
//type IdentityInfo struct {
//	States map[IdentityState]IdentityStateInfo
//}
//
//type IdentityStateStorage struct {
//	mu     sync.RWMutex
//	states map[types.NodeID]*IdentityInfo
//}
message IdentityStateEpoch {
  uint32 epoch = 1;
  repeated IdentityState states = 2;
}

message IdentityState {
  IdentityStatus state = 1;
  google.protobuf.Timestamp time = 3;
}

message Identity {
  bytes smesher_id = 1;
  repeated IdentityStateEpoch epochs = 2;
  repeated IdentityState states = 3;
}

message IdentityStatesResponse {
    repeated Identity identities = 3;
}

service SmeshingIdentitiesService {
  option (google.api.api_visibility).restriction = "V2";

  // Returns set of configured poet addresses and poets addresses from registrations, if given,
  // and warning in case, if there are registrations with poets, which are not in configured poets set.
  rpc States (IdentityStatesRequest) returns (IdentityStatesResponse){}
}