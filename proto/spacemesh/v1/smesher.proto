syntax = "proto3";
package spacemesh.v1;
option go_package = "github.com/spacemeshos/api/release/go/spacemesh/v1";
import "google/protobuf/empty.proto";
import "spacemesh/v1/smesher_types.proto";

// Readonly basic node data
service SmesherService {
    // Returns true iff node is currently smeshing
    rpc IsSmeshing (google.protobuf.Empty) returns (IsSmeshingResponse);

    // Start smeshing. If the post data is incomplete or missing, data creation
    // session will be preceded. Changing of the post potions (e.g., number of labels),
    // after initial setup, is supported.
    // Returns success if request is accepted by node , failure if it fails
    rpc StartSmeshing (StartSmeshingRequest) returns (StartSmeshingResponse);

    // Stop smeshing or the preceding post data session, and optionally attempt to
    // delete the post data files(s).
    // Returns success if request is accepted by node, failure if it fails
    rpc StopSmeshing (StopSmeshingRequest) returns (StopSmeshingResponse);

    // Get the current smesher id generated by the node
    rpc SmesherID (google.protobuf.Empty) returns (SmesherIDResponse);

    // Get the current coinbase
    rpc Coinbase (google.protobuf.Empty) returns (CoinbaseResponse);

    // Set the coinbase
    // Returns success if request succeeds, failure if it fails
    rpc SetCoinbase (SetCoinbaseRequest) returns (SetCoinbaseResponse);

    // Get the current min gas for including txs in blocks by this smesher
    rpc MinGas (google.protobuf.Empty) returns (MinGasResponse);

    // Set a min gas units for including txs in blocks by this smesher
    // Returns success if request succeeds, failure if it fails
    rpc SetMinGas (SetMinGasRequest) returns (SetMinGasResponse);

    // Estimate smeshing rewards over the next upcoming epoch
    rpc EstimatedRewards (EstimatedRewardsRequest) returns (EstimatedRewardsResponse);

    // Returns post data status from the node
    rpc PoSTSetupStatus (google.protobuf.Empty) returns (PoSTSetupStatusResponse);

    // Returns a stream of updates regarding the current or the upcoming post data creation session
    rpc PoSTSetupStatusStream (google.protobuf.Empty) returns (stream PoSTSetupStatusStreamResponse);

    // Returns a list of available post compute providers for creating post data
    rpc PoSTSetupComputeProviders (PoSTSetupComputeProvidersRequest) returns (PoSTSetupComputeProvidersResponse);

    rpc PoSTConfig (google.protobuf.Empty) returns (PoSTConfigResponse);

}

