// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        (unknown)
// source: spacemesh/v2beta1/smeshing_identities.proto

package spacemeshv2beta1

import (
	v2 "github.com/spacemeshos/api/release/go/spacemesh/smesher/v2"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	_ "google.golang.org/genproto/googleapis/api/visibility"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IdentityStatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	States []v2.IdentityState `protobuf:"varint,1,rep,packed,name=states,proto3,enum=spacemesh.smesher.v2.IdentityState" json:"states,omitempty"` // list of identity states to filter by
	Offset uint64             `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`                                                // adjusts the starting point for data
	Limit  uint64             `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`                                                  // specifies max number of items to fetch
}

func (x *IdentityStatesRequest) Reset() {
	*x = IdentityStatesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacemesh_v2beta1_smeshing_identities_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentityStatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentityStatesRequest) ProtoMessage() {}

func (x *IdentityStatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacemesh_v2beta1_smeshing_identities_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentityStatesRequest.ProtoReflect.Descriptor instead.
func (*IdentityStatesRequest) Descriptor() ([]byte, []int) {
	return file_spacemesh_v2beta1_smeshing_identities_proto_rawDescGZIP(), []int{0}
}

func (x *IdentityStatesRequest) GetStates() []v2.IdentityState {
	if x != nil {
		return x.States
	}
	return nil
}

func (x *IdentityStatesRequest) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *IdentityStatesRequest) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type IdentityStatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identities map[string]*v2.Identity `protobuf:"bytes,1,rep,name=identities,proto3" json:"identities,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *IdentityStatesResponse) Reset() {
	*x = IdentityStatesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacemesh_v2beta1_smeshing_identities_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentityStatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentityStatesResponse) ProtoMessage() {}

func (x *IdentityStatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spacemesh_v2beta1_smeshing_identities_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentityStatesResponse.ProtoReflect.Descriptor instead.
func (*IdentityStatesResponse) Descriptor() ([]byte, []int) {
	return file_spacemesh_v2beta1_smeshing_identities_proto_rawDescGZIP(), []int{1}
}

func (x *IdentityStatesResponse) GetIdentities() map[string]*v2.Identity {
	if x != nil {
		return x.Identities
	}
	return nil
}

// PoetInfo rpc
type PoetInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PoetInfoRequest) Reset() {
	*x = PoetInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacemesh_v2beta1_smeshing_identities_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoetInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoetInfoRequest) ProtoMessage() {}

func (x *PoetInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacemesh_v2beta1_smeshing_identities_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoetInfoRequest.ProtoReflect.Descriptor instead.
func (*PoetInfoRequest) Descriptor() ([]byte, []int) {
	return file_spacemesh_v2beta1_smeshing_identities_proto_rawDescGZIP(), []int{2}
}

type PoetInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Poets  []string       `protobuf:"bytes,1,rep,name=poets,proto3" json:"poets,omitempty"`
	Config *v2.PoetConfig `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *PoetInfoResponse) Reset() {
	*x = PoetInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacemesh_v2beta1_smeshing_identities_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoetInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoetInfoResponse) ProtoMessage() {}

func (x *PoetInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spacemesh_v2beta1_smeshing_identities_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoetInfoResponse.ProtoReflect.Descriptor instead.
func (*PoetInfoResponse) Descriptor() ([]byte, []int) {
	return file_spacemesh_v2beta1_smeshing_identities_proto_rawDescGZIP(), []int{3}
}

func (x *PoetInfoResponse) GetPoets() []string {
	if x != nil {
		return x.Poets
	}
	return nil
}

func (x *PoetInfoResponse) GetConfig() *v2.PoetConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

// Proposals and eligibilities
type EligibilitiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EligibilitiesRequest) Reset() {
	*x = EligibilitiesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacemesh_v2beta1_smeshing_identities_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EligibilitiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EligibilitiesRequest) ProtoMessage() {}

func (x *EligibilitiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacemesh_v2beta1_smeshing_identities_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EligibilitiesRequest.ProtoReflect.Descriptor instead.
func (*EligibilitiesRequest) Descriptor() ([]byte, []int) {
	return file_spacemesh_v2beta1_smeshing_identities_proto_rawDescGZIP(), []int{4}
}

type EligibilitiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identities map[string]*v2.EpochEligibilities `protobuf:"bytes,1,rep,name=identities,proto3" json:"identities,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *EligibilitiesResponse) Reset() {
	*x = EligibilitiesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacemesh_v2beta1_smeshing_identities_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EligibilitiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EligibilitiesResponse) ProtoMessage() {}

func (x *EligibilitiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spacemesh_v2beta1_smeshing_identities_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EligibilitiesResponse.ProtoReflect.Descriptor instead.
func (*EligibilitiesResponse) Descriptor() ([]byte, []int) {
	return file_spacemesh_v2beta1_smeshing_identities_proto_rawDescGZIP(), []int{5}
}

func (x *EligibilitiesResponse) GetIdentities() map[string]*v2.EpochEligibilities {
	if x != nil {
		return x.Identities
	}
	return nil
}

type ProposalsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ProposalsRequest) Reset() {
	*x = ProposalsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacemesh_v2beta1_smeshing_identities_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProposalsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposalsRequest) ProtoMessage() {}

func (x *ProposalsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacemesh_v2beta1_smeshing_identities_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposalsRequest.ProtoReflect.Descriptor instead.
func (*ProposalsRequest) Descriptor() ([]byte, []int) {
	return file_spacemesh_v2beta1_smeshing_identities_proto_rawDescGZIP(), []int{6}
}

type ProposalsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proposals map[string]*v2.Proposals `protobuf:"bytes,1,rep,name=proposals,proto3" json:"proposals,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ProposalsResponse) Reset() {
	*x = ProposalsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacemesh_v2beta1_smeshing_identities_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProposalsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposalsResponse) ProtoMessage() {}

func (x *ProposalsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spacemesh_v2beta1_smeshing_identities_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposalsResponse.ProtoReflect.Descriptor instead.
func (*ProposalsResponse) Descriptor() ([]byte, []int) {
	return file_spacemesh_v2beta1_smeshing_identities_proto_rawDescGZIP(), []int{7}
}

func (x *ProposalsResponse) GetProposals() map[string]*v2.Proposals {
	if x != nil {
		return x.Proposals
	}
	return nil
}

var File_spacemesh_v2beta1_smeshing_identities_proto protoreflect.FileDescriptor

var file_spacemesh_v2beta1_smeshing_identities_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x76, 0x32, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2f, 0x73, 0x6d, 0x65, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x69, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x73, 0x68, 0x2f, 0x73, 0x6d, 0x65, 0x73, 0x68, 0x65, 0x72, 0x2f, 0x76, 0x32, 0x2f,
	0x73, 0x6d, 0x65, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x82, 0x01, 0x0a, 0x15, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e,
	0x73, 0x6d, 0x65, 0x73, 0x68, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xd2,
	0x01, 0x0a, 0x16, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x0a, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x1a, 0x5d, 0x0a, 0x0f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x73, 0x68, 0x2e, 0x73, 0x6d, 0x65, 0x73, 0x68, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x11, 0x0a, 0x0f, 0x50, 0x6f, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x62, 0x0a, 0x10, 0x50, 0x6f, 0x65, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f,
	0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6f, 0x65, 0x74, 0x73,
	0x12, 0x38, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x73, 0x6d, 0x65,
	0x73, 0x68, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x6f, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x16, 0x0a, 0x14, 0x45, 0x6c,
	0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0xda, 0x01, 0x0a, 0x15, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x0a,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x32, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x67, 0x0a, 0x0f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3e, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x73, 0x6d, 0x65, 0x73, 0x68, 0x65, 0x72, 0x2e, 0x76,
	0x32, 0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x12, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0xc5, 0x01, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x1a, 0x5d, 0x0a, 0x0e,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x73, 0x6d, 0x65, 0x73,
	0x68, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0xa0, 0x05, 0x0a, 0x19,
	0x53, 0x6d, 0x65, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x9a, 0x01, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x73, 0x12, 0x28, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68,
	0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,
	0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x35, 0x12, 0x33, 0x2f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x32,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x6d, 0x65, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x92, 0x01, 0x0a, 0x08, 0x50, 0x6f, 0x65, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x22, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e,
	0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x73, 0x68, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x65, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3d, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x37, 0x12, 0x35, 0x2f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68,
	0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x6d, 0x65, 0x73, 0x68, 0x69, 0x6e,
	0x67, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x50, 0x6f, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0xa6, 0x01, 0x0a, 0x0d,
	0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x27, 0x2e,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65,
	0x73, 0x68, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x45, 0x6c, 0x69, 0x67, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x42, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3c, 0x12, 0x3a, 0x2f, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x6d, 0x65,
	0x73, 0x68, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x96, 0x01, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x73, 0x12, 0x23, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76,
	0x32, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x73, 0x68, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3e, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x38, 0x12, 0x36, 0x2f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73,
	0x68, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x6d, 0x65, 0x73, 0x68, 0x69,
	0x6e, 0x67, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x1a, 0x0f, 0xfa,
	0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x31, 0x42, 0xdf,
	0x01, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68,
	0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x31, 0x42, 0x17, 0x53, 0x6d, 0x65, 0x73, 0x68, 0x69,
	0x6e, 0x67, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x48, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x73, 0x68, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x31, 0x3b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x31, 0xa2, 0x02, 0x03,
	0x53, 0x58, 0x58, 0xaa, 0x02, 0x11, 0x53, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e,
	0x56, 0x32, 0x62, 0x65, 0x74, 0x61, 0x31, 0xca, 0x02, 0x11, 0x53, 0x70, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x73, 0x68, 0x5c, 0x56, 0x32, 0x62, 0x65, 0x74, 0x61, 0x31, 0xe2, 0x02, 0x1d, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x5c, 0x56, 0x32, 0x62, 0x65, 0x74, 0x61, 0x31, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x12, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x3a, 0x3a, 0x56, 0x32, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_spacemesh_v2beta1_smeshing_identities_proto_rawDescOnce sync.Once
	file_spacemesh_v2beta1_smeshing_identities_proto_rawDescData = file_spacemesh_v2beta1_smeshing_identities_proto_rawDesc
)

func file_spacemesh_v2beta1_smeshing_identities_proto_rawDescGZIP() []byte {
	file_spacemesh_v2beta1_smeshing_identities_proto_rawDescOnce.Do(func() {
		file_spacemesh_v2beta1_smeshing_identities_proto_rawDescData = protoimpl.X.CompressGZIP(file_spacemesh_v2beta1_smeshing_identities_proto_rawDescData)
	})
	return file_spacemesh_v2beta1_smeshing_identities_proto_rawDescData
}

var file_spacemesh_v2beta1_smeshing_identities_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_spacemesh_v2beta1_smeshing_identities_proto_goTypes = []interface{}{
	(*IdentityStatesRequest)(nil),  // 0: spacemesh.v2beta1.IdentityStatesRequest
	(*IdentityStatesResponse)(nil), // 1: spacemesh.v2beta1.IdentityStatesResponse
	(*PoetInfoRequest)(nil),        // 2: spacemesh.v2beta1.PoetInfoRequest
	(*PoetInfoResponse)(nil),       // 3: spacemesh.v2beta1.PoetInfoResponse
	(*EligibilitiesRequest)(nil),   // 4: spacemesh.v2beta1.EligibilitiesRequest
	(*EligibilitiesResponse)(nil),  // 5: spacemesh.v2beta1.EligibilitiesResponse
	(*ProposalsRequest)(nil),       // 6: spacemesh.v2beta1.ProposalsRequest
	(*ProposalsResponse)(nil),      // 7: spacemesh.v2beta1.ProposalsResponse
	nil,                            // 8: spacemesh.v2beta1.IdentityStatesResponse.IdentitiesEntry
	nil,                            // 9: spacemesh.v2beta1.EligibilitiesResponse.IdentitiesEntry
	nil,                            // 10: spacemesh.v2beta1.ProposalsResponse.ProposalsEntry
	(v2.IdentityState)(0),          // 11: spacemesh.smesher.v2.IdentityState
	(*v2.PoetConfig)(nil),          // 12: spacemesh.smesher.v2.PoetConfig
	(*v2.Identity)(nil),            // 13: spacemesh.smesher.v2.Identity
	(*v2.EpochEligibilities)(nil),  // 14: spacemesh.smesher.v2.EpochEligibilities
	(*v2.Proposals)(nil),           // 15: spacemesh.smesher.v2.Proposals
}
var file_spacemesh_v2beta1_smeshing_identities_proto_depIdxs = []int32{
	11, // 0: spacemesh.v2beta1.IdentityStatesRequest.states:type_name -> spacemesh.smesher.v2.IdentityState
	8,  // 1: spacemesh.v2beta1.IdentityStatesResponse.identities:type_name -> spacemesh.v2beta1.IdentityStatesResponse.IdentitiesEntry
	12, // 2: spacemesh.v2beta1.PoetInfoResponse.config:type_name -> spacemesh.smesher.v2.PoetConfig
	9,  // 3: spacemesh.v2beta1.EligibilitiesResponse.identities:type_name -> spacemesh.v2beta1.EligibilitiesResponse.IdentitiesEntry
	10, // 4: spacemesh.v2beta1.ProposalsResponse.proposals:type_name -> spacemesh.v2beta1.ProposalsResponse.ProposalsEntry
	13, // 5: spacemesh.v2beta1.IdentityStatesResponse.IdentitiesEntry.value:type_name -> spacemesh.smesher.v2.Identity
	14, // 6: spacemesh.v2beta1.EligibilitiesResponse.IdentitiesEntry.value:type_name -> spacemesh.smesher.v2.EpochEligibilities
	15, // 7: spacemesh.v2beta1.ProposalsResponse.ProposalsEntry.value:type_name -> spacemesh.smesher.v2.Proposals
	0,  // 8: spacemesh.v2beta1.SmeshingIdentitiesService.States:input_type -> spacemesh.v2beta1.IdentityStatesRequest
	2,  // 9: spacemesh.v2beta1.SmeshingIdentitiesService.PoetInfo:input_type -> spacemesh.v2beta1.PoetInfoRequest
	4,  // 10: spacemesh.v2beta1.SmeshingIdentitiesService.Eligibilities:input_type -> spacemesh.v2beta1.EligibilitiesRequest
	6,  // 11: spacemesh.v2beta1.SmeshingIdentitiesService.Proposals:input_type -> spacemesh.v2beta1.ProposalsRequest
	1,  // 12: spacemesh.v2beta1.SmeshingIdentitiesService.States:output_type -> spacemesh.v2beta1.IdentityStatesResponse
	3,  // 13: spacemesh.v2beta1.SmeshingIdentitiesService.PoetInfo:output_type -> spacemesh.v2beta1.PoetInfoResponse
	5,  // 14: spacemesh.v2beta1.SmeshingIdentitiesService.Eligibilities:output_type -> spacemesh.v2beta1.EligibilitiesResponse
	7,  // 15: spacemesh.v2beta1.SmeshingIdentitiesService.Proposals:output_type -> spacemesh.v2beta1.ProposalsResponse
	12, // [12:16] is the sub-list for method output_type
	8,  // [8:12] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_spacemesh_v2beta1_smeshing_identities_proto_init() }
func file_spacemesh_v2beta1_smeshing_identities_proto_init() {
	if File_spacemesh_v2beta1_smeshing_identities_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_spacemesh_v2beta1_smeshing_identities_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentityStatesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacemesh_v2beta1_smeshing_identities_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentityStatesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacemesh_v2beta1_smeshing_identities_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoetInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacemesh_v2beta1_smeshing_identities_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoetInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacemesh_v2beta1_smeshing_identities_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EligibilitiesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacemesh_v2beta1_smeshing_identities_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EligibilitiesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacemesh_v2beta1_smeshing_identities_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProposalsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacemesh_v2beta1_smeshing_identities_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProposalsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_spacemesh_v2beta1_smeshing_identities_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_spacemesh_v2beta1_smeshing_identities_proto_goTypes,
		DependencyIndexes: file_spacemesh_v2beta1_smeshing_identities_proto_depIdxs,
		MessageInfos:      file_spacemesh_v2beta1_smeshing_identities_proto_msgTypes,
	}.Build()
	File_spacemesh_v2beta1_smeshing_identities_proto = out.File
	file_spacemesh_v2beta1_smeshing_identities_proto_rawDesc = nil
	file_spacemesh_v2beta1_smeshing_identities_proto_goTypes = nil
	file_spacemesh_v2beta1_smeshing_identities_proto_depIdxs = nil
}
