syntax = "proto3";

import "google/api/annotations.proto";
import "google/api/visibility.proto";

package spacemesh.v2beta1;

message MalfeasanceProof {
    bytes smesher = 1;

    enum MalfeasanceDomain {
        DOMAIN_UNSPECIFIED = 0; // for legacy proofs
        DOMAIN_ACTIVATION = 1;  // ATX related proofs
        DOMAIN_BALLOT = 2;      // Ballot related proofs
        DOMAIN_HARE = 3;        // Hare related proofs
    }
    MalfeasanceDomain domain = 2;

    // type of the malfeasance proof, depends on domain
    //
    // for legacy proofs the types are
    //   1 - Double publish of ATX
    //   2 - Multiple ballots for a layer by same smesher
    //   3 - Hare Equivocation (currently unused)
    //   4 - ATX with invalid PoST proof published
    //   5 - ATX referencing an invalid previous ATX published
    uint32 type = 3;

    // Properties of the Malfeasance proof, different for every type of proof
    map<string, string> properties = 4;
}

message MalfeasanceRequest {
    repeated bytes smesher_id = 1; // list of smesher ids to fetch (can be empty for all)
    uint64 offset = 2; // adjusts the starting point for data
    uint64 limit = 3; // specifies max number of items to fetch
}

message MalfeasanceList {
    repeated MalfeasanceProof proofs = 1; // list of malfeasance proofs
}

service MalfeasanceService {
    option (google.api.api_visibility).restriction = "v2beta1";

    // List of malfeasance proofs
    //
    // List is a method that takes a "{{.RequestType.Name}}" body and returns an "{{.ResponseType.Name}}".
    // This method is used to retrieve a list of malfeasance proofs based on the provided request parameters.
    rpc List(MalfeasanceRequest) returns (MalfeasanceList) {
        option (google.api.http) = {
            get: "/spacemesh.v2beta1.MalfeasanceService/List"
        };
    }
}

message MalfeasanceStreamRequest {
    repeated bytes smesher_id = 1; // list of smesher ids to watch
    bool watch = 2;
}

service MalfeasanceStreamService {
    option (google.api.api_visibility).restriction = "INTERNAL";

    rpc Stream(MalfeasanceStreamRequest) returns (stream MalfeasanceProof);
}
