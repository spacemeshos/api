syntax = "proto3";

import "google/api/annotations.proto";
import "spacemesh/v1/mesh_types.proto";
import "google/api/visibility.proto";

package spacemesh.v1;

// Readonly API for basic mesh info
service MeshService {
    option (google.api.api_visibility).restriction = "V1";

    // Network genesis time as unix epoch time
    rpc GenesisTime(GenesisTimeRequest) returns (GenesisTimeResponse) {
        option (google.api.http) = {
            post: "/v1/mesh/genesistime"
            body: "*"
        };
    }

    // Current layer number
    rpc CurrentLayer(CurrentLayerRequest) returns (CurrentLayerResponse) {
        option (google.api.http) = {
            post: "/v1/mesh/currentlayer"
            body: "*"
        };
    }

    // Current epoch number
    rpc CurrentEpoch(CurrentEpochRequest) returns (CurrentEpochResponse) {
        option (google.api.http) = {
            post: "/v1/mesh/currentepoch"
            body: "*"
        };
    }

    // Genesis ID
    rpc GenesisID(GenesisIDRequest) returns (GenesisIDResponse) {
        option (google.api.http) = {
            post: "/v1/mesh/genesisid"
            body: "*"
        };
    }

    // Number of layers per epoch (a network parameter)
    rpc EpochNumLayers(EpochNumLayersRequest) returns (EpochNumLayersResponse) {
        option (google.api.http) = {
            post: "/v1/mesh/epochnumlayers"
            body: "*"
        };
    }

    // Layer duration (a network parameter)
    rpc LayerDuration(LayerDurationRequest) returns (LayerDurationResponse) {
        option (google.api.http) = {
            post: "/v1/mesh/layerduration"
            body: "*"
        };
    }

    // Number of transactions per second (a network parameter)
    rpc MaxTransactionsPerSecond(MaxTransactionsPerSecondRequest) returns (MaxTransactionsPerSecondResponse) {
        option (google.api.http) = {
            post: "/v1/mesh/maxtransactionspersecond"
            body: "*"
        };
    }

    ////////// Queries
    // Queries return paginated, historical data.

    // Get account data query
    rpc AccountMeshDataQuery(AccountMeshDataQueryRequest) returns (AccountMeshDataQueryResponse) {
        option (google.api.http) = {
            post: "/v1/mesh/accountmeshdataquery"
            body: "*"
        };
    }

    // Layers data query
    rpc LayersQuery(LayersQueryRequest) returns (LayersQueryResponse) {
        option (google.api.http) = {
            post: "/v1/mesh/layersquery"
            body: "*"
        };
    }

    ////////// Streams
    // Streams return live, new data as it becomes available to the node and not
    // historical data.

    // A stream of transactions and activations from an account.
    // Includes simple coin transactions with the account as the destination.
    rpc AccountMeshDataStream(AccountMeshDataStreamRequest) returns (stream AccountMeshDataStreamResponse);

    // Layer with blocks, transactions and activations
    // Sent each time layer data changes. Designed for heavy-duty clients.
    rpc LayerStream(LayerStreamRequest) returns (stream LayerStreamResponse);

    // Epoch activation transactions.
    rpc EpochStream(EpochStreamRequest) returns (stream EpochStreamResponse);

    rpc MalfeasanceQuery(MalfeasanceRequest) returns (MalfeasanceResponse);
    rpc MalfeasanceStream(MalfeasanceStreamRequest) returns (stream MalfeasanceStreamResponse);
}
