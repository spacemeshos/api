// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: spacemesh/v2alpha1/layer.proto

package spacemeshv2alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LayerService_Get_FullMethodName = "/spacemesh.v2alpha1.LayerService/Get"
)

// LayerServiceClient is the client API for LayerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LayerServiceClient interface {
	Get(ctx context.Context, in *LayerRequest, opts ...grpc.CallOption) (*Layer, error)
}

type layerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLayerServiceClient(cc grpc.ClientConnInterface) LayerServiceClient {
	return &layerServiceClient{cc}
}

func (c *layerServiceClient) Get(ctx context.Context, in *LayerRequest, opts ...grpc.CallOption) (*Layer, error) {
	out := new(Layer)
	err := c.cc.Invoke(ctx, LayerService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LayerServiceServer is the server API for LayerService service.
// All implementations should embed UnimplementedLayerServiceServer
// for forward compatibility
type LayerServiceServer interface {
	Get(context.Context, *LayerRequest) (*Layer, error)
}

// UnimplementedLayerServiceServer should be embedded to have forward compatible implementations.
type UnimplementedLayerServiceServer struct {
}

func (UnimplementedLayerServiceServer) Get(context.Context, *LayerRequest) (*Layer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}

// UnsafeLayerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LayerServiceServer will
// result in compilation errors.
type UnsafeLayerServiceServer interface {
	mustEmbedUnimplementedLayerServiceServer()
}

func RegisterLayerServiceServer(s grpc.ServiceRegistrar, srv LayerServiceServer) {
	s.RegisterService(&LayerService_ServiceDesc, srv)
}

func _LayerService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LayerServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LayerService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LayerServiceServer).Get(ctx, req.(*LayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LayerService_ServiceDesc is the grpc.ServiceDesc for LayerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LayerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spacemesh.v2alpha1.LayerService",
	HandlerType: (*LayerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _LayerService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spacemesh/v2alpha1/layer.proto",
}
