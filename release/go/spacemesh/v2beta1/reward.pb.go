// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: spacemesh/v2beta1/reward.proto

package spacemeshv2beta1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	_ "google.golang.org/genproto/googleapis/api/visibility"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Reward struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Layer         uint32                 `protobuf:"varint,1,opt,name=layer,proto3" json:"layer,omitempty"`                                // layer award was paid in
	Total         uint64                 `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`                                // total reward paid in smidge (sum of tx fee and layer reward)
	LayerReward   uint64                 `protobuf:"varint,3,opt,name=layer_reward,json=layerReward,proto3" json:"layer_reward,omitempty"` // tx_fee = total - layer_reward
	Coinbase      string                 `protobuf:"bytes,5,opt,name=coinbase,proto3" json:"coinbase,omitempty"`                           // account awarded this reward
	Smesher       []byte                 `protobuf:"bytes,6,opt,name=smesher,proto3" json:"smesher,omitempty"`                             // id of smesher who earned this reward
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Reward) Reset() {
	*x = Reward{}
	mi := &file_spacemesh_v2beta1_reward_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Reward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reward) ProtoMessage() {}

func (x *Reward) ProtoReflect() protoreflect.Message {
	mi := &file_spacemesh_v2beta1_reward_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reward.ProtoReflect.Descriptor instead.
func (*Reward) Descriptor() ([]byte, []int) {
	return file_spacemesh_v2beta1_reward_proto_rawDescGZIP(), []int{0}
}

func (x *Reward) GetLayer() uint32 {
	if x != nil {
		return x.Layer
	}
	return 0
}

func (x *Reward) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *Reward) GetLayerReward() uint64 {
	if x != nil {
		return x.LayerReward
	}
	return 0
}

func (x *Reward) GetCoinbase() string {
	if x != nil {
		return x.Coinbase
	}
	return ""
}

func (x *Reward) GetSmesher() []byte {
	if x != nil {
		return x.Smesher
	}
	return nil
}

type RewardRequest struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	StartLayer uint32                 `protobuf:"varint,1,opt,name=start_layer,json=startLayer,proto3" json:"start_layer,omitempty"` // starting layer for the query
	EndLayer   uint32                 `protobuf:"varint,2,opt,name=end_layer,json=endLayer,proto3" json:"end_layer,omitempty"`       // ending layer for the query
	// Types that are valid to be assigned to FilterBy:
	//
	//	*RewardRequest_Coinbase
	//	*RewardRequest_Smesher
	FilterBy      isRewardRequest_FilterBy `protobuf_oneof:"filter_by"`
	Offset        uint64                   `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`                                                         // adjusts the starting point for data
	Limit         uint64                   `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`                                                           // specifies max number of items to fetch
	SortOrder     SortOrder                `protobuf:"varint,7,opt,name=sort_order,json=sortOrder,proto3,enum=spacemesh.v2beta1.SortOrder" json:"sort_order,omitempty"` // specifies the sort order by layer (default is ASC)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RewardRequest) Reset() {
	*x = RewardRequest{}
	mi := &file_spacemesh_v2beta1_reward_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RewardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardRequest) ProtoMessage() {}

func (x *RewardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacemesh_v2beta1_reward_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardRequest.ProtoReflect.Descriptor instead.
func (*RewardRequest) Descriptor() ([]byte, []int) {
	return file_spacemesh_v2beta1_reward_proto_rawDescGZIP(), []int{1}
}

func (x *RewardRequest) GetStartLayer() uint32 {
	if x != nil {
		return x.StartLayer
	}
	return 0
}

func (x *RewardRequest) GetEndLayer() uint32 {
	if x != nil {
		return x.EndLayer
	}
	return 0
}

func (x *RewardRequest) GetFilterBy() isRewardRequest_FilterBy {
	if x != nil {
		return x.FilterBy
	}
	return nil
}

func (x *RewardRequest) GetCoinbase() string {
	if x != nil {
		if x, ok := x.FilterBy.(*RewardRequest_Coinbase); ok {
			return x.Coinbase
		}
	}
	return ""
}

func (x *RewardRequest) GetSmesher() []byte {
	if x != nil {
		if x, ok := x.FilterBy.(*RewardRequest_Smesher); ok {
			return x.Smesher
		}
	}
	return nil
}

func (x *RewardRequest) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *RewardRequest) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *RewardRequest) GetSortOrder() SortOrder {
	if x != nil {
		return x.SortOrder
	}
	return SortOrder_ASC
}

type isRewardRequest_FilterBy interface {
	isRewardRequest_FilterBy()
}

type RewardRequest_Coinbase struct {
	Coinbase string `protobuf:"bytes,3,opt,name=coinbase,proto3,oneof"` // filter by coinbase
}

type RewardRequest_Smesher struct {
	Smesher []byte `protobuf:"bytes,4,opt,name=smesher,proto3,oneof"` // filter by smesher
}

func (*RewardRequest_Coinbase) isRewardRequest_FilterBy() {}

func (*RewardRequest_Smesher) isRewardRequest_FilterBy() {}

type RewardList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rewards       []*Reward              `protobuf:"bytes,1,rep,name=rewards,proto3" json:"rewards,omitempty"` // list of rewards
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RewardList) Reset() {
	*x = RewardList{}
	mi := &file_spacemesh_v2beta1_reward_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RewardList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardList) ProtoMessage() {}

func (x *RewardList) ProtoReflect() protoreflect.Message {
	mi := &file_spacemesh_v2beta1_reward_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardList.ProtoReflect.Descriptor instead.
func (*RewardList) Descriptor() ([]byte, []int) {
	return file_spacemesh_v2beta1_reward_proto_rawDescGZIP(), []int{2}
}

func (x *RewardList) GetRewards() []*Reward {
	if x != nil {
		return x.Rewards
	}
	return nil
}

type RewardStreamRequest struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	StartLayer uint32                 `protobuf:"varint,1,opt,name=start_layer,json=startLayer,proto3" json:"start_layer,omitempty"`
	EndLayer   uint32                 `protobuf:"varint,2,opt,name=end_layer,json=endLayer,proto3" json:"end_layer,omitempty"`
	// Types that are valid to be assigned to FilterBy:
	//
	//	*RewardStreamRequest_Coinbase
	//	*RewardStreamRequest_Smesher
	FilterBy      isRewardStreamRequest_FilterBy `protobuf_oneof:"filter_by"`
	Watch         bool                           `protobuf:"varint,5,opt,name=watch,proto3" json:"watch,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RewardStreamRequest) Reset() {
	*x = RewardStreamRequest{}
	mi := &file_spacemesh_v2beta1_reward_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RewardStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardStreamRequest) ProtoMessage() {}

func (x *RewardStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacemesh_v2beta1_reward_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardStreamRequest.ProtoReflect.Descriptor instead.
func (*RewardStreamRequest) Descriptor() ([]byte, []int) {
	return file_spacemesh_v2beta1_reward_proto_rawDescGZIP(), []int{3}
}

func (x *RewardStreamRequest) GetStartLayer() uint32 {
	if x != nil {
		return x.StartLayer
	}
	return 0
}

func (x *RewardStreamRequest) GetEndLayer() uint32 {
	if x != nil {
		return x.EndLayer
	}
	return 0
}

func (x *RewardStreamRequest) GetFilterBy() isRewardStreamRequest_FilterBy {
	if x != nil {
		return x.FilterBy
	}
	return nil
}

func (x *RewardStreamRequest) GetCoinbase() string {
	if x != nil {
		if x, ok := x.FilterBy.(*RewardStreamRequest_Coinbase); ok {
			return x.Coinbase
		}
	}
	return ""
}

func (x *RewardStreamRequest) GetSmesher() []byte {
	if x != nil {
		if x, ok := x.FilterBy.(*RewardStreamRequest_Smesher); ok {
			return x.Smesher
		}
	}
	return nil
}

func (x *RewardStreamRequest) GetWatch() bool {
	if x != nil {
		return x.Watch
	}
	return false
}

type isRewardStreamRequest_FilterBy interface {
	isRewardStreamRequest_FilterBy()
}

type RewardStreamRequest_Coinbase struct {
	Coinbase string `protobuf:"bytes,3,opt,name=coinbase,proto3,oneof"`
}

type RewardStreamRequest_Smesher struct {
	Smesher []byte `protobuf:"bytes,4,opt,name=smesher,proto3,oneof"`
}

func (*RewardStreamRequest_Coinbase) isRewardStreamRequest_FilterBy() {}

func (*RewardStreamRequest_Smesher) isRewardStreamRequest_FilterBy() {}

var File_spacemesh_v2beta1_reward_proto protoreflect.FileDescriptor

const file_spacemesh_v2beta1_reward_proto_rawDesc = "" +
	"\n" +
	"\x1espacemesh/v2beta1/reward.proto\x12\x11spacemesh.v2beta1\x1a\x1cgoogle/api/annotations.proto\x1a\x1bgoogle/api/visibility.proto\x1a\x1fspacemesh/v2beta1/v2beta1.proto\"\x8d\x01\n" +
	"\x06Reward\x12\x14\n" +
	"\x05layer\x18\x01 \x01(\rR\x05layer\x12\x14\n" +
	"\x05total\x18\x02 \x01(\x04R\x05total\x12!\n" +
	"\flayer_reward\x18\x03 \x01(\x04R\vlayerReward\x12\x1a\n" +
	"\bcoinbase\x18\x05 \x01(\tR\bcoinbase\x12\x18\n" +
	"\asmesher\x18\x06 \x01(\fR\asmesher\"\xff\x01\n" +
	"\rRewardRequest\x12\x1f\n" +
	"\vstart_layer\x18\x01 \x01(\rR\n" +
	"startLayer\x12\x1b\n" +
	"\tend_layer\x18\x02 \x01(\rR\bendLayer\x12\x1c\n" +
	"\bcoinbase\x18\x03 \x01(\tH\x00R\bcoinbase\x12\x1a\n" +
	"\asmesher\x18\x04 \x01(\fH\x00R\asmesher\x12\x16\n" +
	"\x06offset\x18\x05 \x01(\x04R\x06offset\x12\x14\n" +
	"\x05limit\x18\x06 \x01(\x04R\x05limit\x12;\n" +
	"\n" +
	"sort_order\x18\a \x01(\x0e2\x1c.spacemesh.v2beta1.SortOrderR\tsortOrderB\v\n" +
	"\tfilter_by\"A\n" +
	"\n" +
	"RewardList\x123\n" +
	"\arewards\x18\x01 \x03(\v2\x19.spacemesh.v2beta1.RewardR\arewards\"\xb0\x01\n" +
	"\x13RewardStreamRequest\x12\x1f\n" +
	"\vstart_layer\x18\x01 \x01(\rR\n" +
	"startLayer\x12\x1b\n" +
	"\tend_layer\x18\x02 \x01(\rR\bendLayer\x12\x1c\n" +
	"\bcoinbase\x18\x03 \x01(\tH\x00R\bcoinbase\x12\x1a\n" +
	"\asmesher\x18\x04 \x01(\fH\x00R\asmesher\x12\x14\n" +
	"\x05watch\x18\x05 \x01(\bR\x05watchB\v\n" +
	"\tfilter_by2\x98\x01\n" +
	"\rRewardService\x12v\n" +
	"\x04List\x12 .spacemesh.v2beta1.RewardRequest\x1a\x1d.spacemesh.v2beta1.RewardList\"-\x82\xd3\xe4\x93\x02'\x12%/spacemesh.v2beta1.RewardService/List\x1a\x0f\xfa\xd2\xe4\x93\x02\t\x12\av2beta12v\n" +
	"\x13RewardStreamService\x12M\n" +
	"\x06Stream\x12&.spacemesh.v2beta1.RewardStreamRequest\x1a\x19.spacemesh.v2beta1.Reward0\x01\x1a\x10\xfa\xd2\xe4\x93\x02\n" +
	"\x12\bINTERNALB\xd3\x01\n" +
	"\x15com.spacemesh.v2beta1B\vRewardProtoP\x01ZHgithub.com/spacemeshos/api/release/go/spacemesh/v2beta1;spacemeshv2beta1\xa2\x02\x03SXX\xaa\x02\x11Spacemesh.V2beta1\xca\x02\x11Spacemesh\\V2beta1\xe2\x02\x1dSpacemesh\\V2beta1\\GPBMetadata\xea\x02\x12Spacemesh::V2beta1b\x06proto3"

var (
	file_spacemesh_v2beta1_reward_proto_rawDescOnce sync.Once
	file_spacemesh_v2beta1_reward_proto_rawDescData []byte
)

func file_spacemesh_v2beta1_reward_proto_rawDescGZIP() []byte {
	file_spacemesh_v2beta1_reward_proto_rawDescOnce.Do(func() {
		file_spacemesh_v2beta1_reward_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_spacemesh_v2beta1_reward_proto_rawDesc), len(file_spacemesh_v2beta1_reward_proto_rawDesc)))
	})
	return file_spacemesh_v2beta1_reward_proto_rawDescData
}

var file_spacemesh_v2beta1_reward_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_spacemesh_v2beta1_reward_proto_goTypes = []any{
	(*Reward)(nil),              // 0: spacemesh.v2beta1.Reward
	(*RewardRequest)(nil),       // 1: spacemesh.v2beta1.RewardRequest
	(*RewardList)(nil),          // 2: spacemesh.v2beta1.RewardList
	(*RewardStreamRequest)(nil), // 3: spacemesh.v2beta1.RewardStreamRequest
	(SortOrder)(0),              // 4: spacemesh.v2beta1.SortOrder
}
var file_spacemesh_v2beta1_reward_proto_depIdxs = []int32{
	4, // 0: spacemesh.v2beta1.RewardRequest.sort_order:type_name -> spacemesh.v2beta1.SortOrder
	0, // 1: spacemesh.v2beta1.RewardList.rewards:type_name -> spacemesh.v2beta1.Reward
	1, // 2: spacemesh.v2beta1.RewardService.List:input_type -> spacemesh.v2beta1.RewardRequest
	3, // 3: spacemesh.v2beta1.RewardStreamService.Stream:input_type -> spacemesh.v2beta1.RewardStreamRequest
	2, // 4: spacemesh.v2beta1.RewardService.List:output_type -> spacemesh.v2beta1.RewardList
	0, // 5: spacemesh.v2beta1.RewardStreamService.Stream:output_type -> spacemesh.v2beta1.Reward
	4, // [4:6] is the sub-list for method output_type
	2, // [2:4] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_spacemesh_v2beta1_reward_proto_init() }
func file_spacemesh_v2beta1_reward_proto_init() {
	if File_spacemesh_v2beta1_reward_proto != nil {
		return
	}
	file_spacemesh_v2beta1_v2beta1_proto_init()
	file_spacemesh_v2beta1_reward_proto_msgTypes[1].OneofWrappers = []any{
		(*RewardRequest_Coinbase)(nil),
		(*RewardRequest_Smesher)(nil),
	}
	file_spacemesh_v2beta1_reward_proto_msgTypes[3].OneofWrappers = []any{
		(*RewardStreamRequest_Coinbase)(nil),
		(*RewardStreamRequest_Smesher)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_spacemesh_v2beta1_reward_proto_rawDesc), len(file_spacemesh_v2beta1_reward_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_spacemesh_v2beta1_reward_proto_goTypes,
		DependencyIndexes: file_spacemesh_v2beta1_reward_proto_depIdxs,
		MessageInfos:      file_spacemesh_v2beta1_reward_proto_msgTypes,
	}.Build()
	File_spacemesh_v2beta1_reward_proto = out.File
	file_spacemesh_v2beta1_reward_proto_goTypes = nil
	file_spacemesh_v2beta1_reward_proto_depIdxs = nil
}
