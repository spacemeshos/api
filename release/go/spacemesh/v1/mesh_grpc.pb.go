// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: spacemesh/v1/mesh.proto

package spacemeshv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MeshService_GenesisTime_FullMethodName              = "/spacemesh.v1.MeshService/GenesisTime"
	MeshService_CurrentLayer_FullMethodName             = "/spacemesh.v1.MeshService/CurrentLayer"
	MeshService_CurrentEpoch_FullMethodName             = "/spacemesh.v1.MeshService/CurrentEpoch"
	MeshService_GenesisID_FullMethodName                = "/spacemesh.v1.MeshService/GenesisID"
	MeshService_EpochNumLayers_FullMethodName           = "/spacemesh.v1.MeshService/EpochNumLayers"
	MeshService_LayerDuration_FullMethodName            = "/spacemesh.v1.MeshService/LayerDuration"
	MeshService_MaxTransactionsPerSecond_FullMethodName = "/spacemesh.v1.MeshService/MaxTransactionsPerSecond"
	MeshService_AccountMeshDataQuery_FullMethodName     = "/spacemesh.v1.MeshService/AccountMeshDataQuery"
	MeshService_LayersQuery_FullMethodName              = "/spacemesh.v1.MeshService/LayersQuery"
	MeshService_AccountMeshDataStream_FullMethodName    = "/spacemesh.v1.MeshService/AccountMeshDataStream"
	MeshService_LayerStream_FullMethodName              = "/spacemesh.v1.MeshService/LayerStream"
	MeshService_EpochStream_FullMethodName              = "/spacemesh.v1.MeshService/EpochStream"
	MeshService_MalfeasanceQuery_FullMethodName         = "/spacemesh.v1.MeshService/MalfeasanceQuery"
	MeshService_MalfeasanceStream_FullMethodName        = "/spacemesh.v1.MeshService/MalfeasanceStream"
)

// MeshServiceClient is the client API for MeshService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Readonly API for basic mesh info
type MeshServiceClient interface {
	// Network genesis time as unix epoch time
	GenesisTime(ctx context.Context, in *GenesisTimeRequest, opts ...grpc.CallOption) (*GenesisTimeResponse, error)
	// Current layer number
	CurrentLayer(ctx context.Context, in *CurrentLayerRequest, opts ...grpc.CallOption) (*CurrentLayerResponse, error)
	// Current epoch number
	CurrentEpoch(ctx context.Context, in *CurrentEpochRequest, opts ...grpc.CallOption) (*CurrentEpochResponse, error)
	// Genesis ID
	GenesisID(ctx context.Context, in *GenesisIDRequest, opts ...grpc.CallOption) (*GenesisIDResponse, error)
	// Number of layers per epoch (a network parameter)
	EpochNumLayers(ctx context.Context, in *EpochNumLayersRequest, opts ...grpc.CallOption) (*EpochNumLayersResponse, error)
	// Layer duration (a network parameter)
	LayerDuration(ctx context.Context, in *LayerDurationRequest, opts ...grpc.CallOption) (*LayerDurationResponse, error)
	// Number of transactions per second (a network parameter)
	MaxTransactionsPerSecond(ctx context.Context, in *MaxTransactionsPerSecondRequest, opts ...grpc.CallOption) (*MaxTransactionsPerSecondResponse, error)
	// Get account data query
	AccountMeshDataQuery(ctx context.Context, in *AccountMeshDataQueryRequest, opts ...grpc.CallOption) (*AccountMeshDataQueryResponse, error)
	// Layers data query
	LayersQuery(ctx context.Context, in *LayersQueryRequest, opts ...grpc.CallOption) (*LayersQueryResponse, error)
	// A stream of transactions and activations from an account.
	// Includes simple coin transactions with the account as the destination.
	AccountMeshDataStream(ctx context.Context, in *AccountMeshDataStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AccountMeshDataStreamResponse], error)
	// Layer with blocks, transactions and activations
	// Sent each time layer data changes. Designed for heavy-duty clients.
	LayerStream(ctx context.Context, in *LayerStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LayerStreamResponse], error)
	// Epoch activation transactions.
	EpochStream(ctx context.Context, in *EpochStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[EpochStreamResponse], error)
	MalfeasanceQuery(ctx context.Context, in *MalfeasanceRequest, opts ...grpc.CallOption) (*MalfeasanceResponse, error)
	MalfeasanceStream(ctx context.Context, in *MalfeasanceStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MalfeasanceStreamResponse], error)
}

type meshServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMeshServiceClient(cc grpc.ClientConnInterface) MeshServiceClient {
	return &meshServiceClient{cc}
}

func (c *meshServiceClient) GenesisTime(ctx context.Context, in *GenesisTimeRequest, opts ...grpc.CallOption) (*GenesisTimeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenesisTimeResponse)
	err := c.cc.Invoke(ctx, MeshService_GenesisTime_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meshServiceClient) CurrentLayer(ctx context.Context, in *CurrentLayerRequest, opts ...grpc.CallOption) (*CurrentLayerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CurrentLayerResponse)
	err := c.cc.Invoke(ctx, MeshService_CurrentLayer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meshServiceClient) CurrentEpoch(ctx context.Context, in *CurrentEpochRequest, opts ...grpc.CallOption) (*CurrentEpochResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CurrentEpochResponse)
	err := c.cc.Invoke(ctx, MeshService_CurrentEpoch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meshServiceClient) GenesisID(ctx context.Context, in *GenesisIDRequest, opts ...grpc.CallOption) (*GenesisIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenesisIDResponse)
	err := c.cc.Invoke(ctx, MeshService_GenesisID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meshServiceClient) EpochNumLayers(ctx context.Context, in *EpochNumLayersRequest, opts ...grpc.CallOption) (*EpochNumLayersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EpochNumLayersResponse)
	err := c.cc.Invoke(ctx, MeshService_EpochNumLayers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meshServiceClient) LayerDuration(ctx context.Context, in *LayerDurationRequest, opts ...grpc.CallOption) (*LayerDurationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LayerDurationResponse)
	err := c.cc.Invoke(ctx, MeshService_LayerDuration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meshServiceClient) MaxTransactionsPerSecond(ctx context.Context, in *MaxTransactionsPerSecondRequest, opts ...grpc.CallOption) (*MaxTransactionsPerSecondResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MaxTransactionsPerSecondResponse)
	err := c.cc.Invoke(ctx, MeshService_MaxTransactionsPerSecond_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meshServiceClient) AccountMeshDataQuery(ctx context.Context, in *AccountMeshDataQueryRequest, opts ...grpc.CallOption) (*AccountMeshDataQueryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccountMeshDataQueryResponse)
	err := c.cc.Invoke(ctx, MeshService_AccountMeshDataQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meshServiceClient) LayersQuery(ctx context.Context, in *LayersQueryRequest, opts ...grpc.CallOption) (*LayersQueryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LayersQueryResponse)
	err := c.cc.Invoke(ctx, MeshService_LayersQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meshServiceClient) AccountMeshDataStream(ctx context.Context, in *AccountMeshDataStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AccountMeshDataStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MeshService_ServiceDesc.Streams[0], MeshService_AccountMeshDataStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AccountMeshDataStreamRequest, AccountMeshDataStreamResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MeshService_AccountMeshDataStreamClient = grpc.ServerStreamingClient[AccountMeshDataStreamResponse]

func (c *meshServiceClient) LayerStream(ctx context.Context, in *LayerStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LayerStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MeshService_ServiceDesc.Streams[1], MeshService_LayerStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[LayerStreamRequest, LayerStreamResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MeshService_LayerStreamClient = grpc.ServerStreamingClient[LayerStreamResponse]

func (c *meshServiceClient) EpochStream(ctx context.Context, in *EpochStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[EpochStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MeshService_ServiceDesc.Streams[2], MeshService_EpochStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[EpochStreamRequest, EpochStreamResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MeshService_EpochStreamClient = grpc.ServerStreamingClient[EpochStreamResponse]

func (c *meshServiceClient) MalfeasanceQuery(ctx context.Context, in *MalfeasanceRequest, opts ...grpc.CallOption) (*MalfeasanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MalfeasanceResponse)
	err := c.cc.Invoke(ctx, MeshService_MalfeasanceQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meshServiceClient) MalfeasanceStream(ctx context.Context, in *MalfeasanceStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MalfeasanceStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MeshService_ServiceDesc.Streams[3], MeshService_MalfeasanceStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[MalfeasanceStreamRequest, MalfeasanceStreamResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MeshService_MalfeasanceStreamClient = grpc.ServerStreamingClient[MalfeasanceStreamResponse]

// MeshServiceServer is the server API for MeshService service.
// All implementations should embed UnimplementedMeshServiceServer
// for forward compatibility.
//
// Readonly API for basic mesh info
type MeshServiceServer interface {
	// Network genesis time as unix epoch time
	GenesisTime(context.Context, *GenesisTimeRequest) (*GenesisTimeResponse, error)
	// Current layer number
	CurrentLayer(context.Context, *CurrentLayerRequest) (*CurrentLayerResponse, error)
	// Current epoch number
	CurrentEpoch(context.Context, *CurrentEpochRequest) (*CurrentEpochResponse, error)
	// Genesis ID
	GenesisID(context.Context, *GenesisIDRequest) (*GenesisIDResponse, error)
	// Number of layers per epoch (a network parameter)
	EpochNumLayers(context.Context, *EpochNumLayersRequest) (*EpochNumLayersResponse, error)
	// Layer duration (a network parameter)
	LayerDuration(context.Context, *LayerDurationRequest) (*LayerDurationResponse, error)
	// Number of transactions per second (a network parameter)
	MaxTransactionsPerSecond(context.Context, *MaxTransactionsPerSecondRequest) (*MaxTransactionsPerSecondResponse, error)
	// Get account data query
	AccountMeshDataQuery(context.Context, *AccountMeshDataQueryRequest) (*AccountMeshDataQueryResponse, error)
	// Layers data query
	LayersQuery(context.Context, *LayersQueryRequest) (*LayersQueryResponse, error)
	// A stream of transactions and activations from an account.
	// Includes simple coin transactions with the account as the destination.
	AccountMeshDataStream(*AccountMeshDataStreamRequest, grpc.ServerStreamingServer[AccountMeshDataStreamResponse]) error
	// Layer with blocks, transactions and activations
	// Sent each time layer data changes. Designed for heavy-duty clients.
	LayerStream(*LayerStreamRequest, grpc.ServerStreamingServer[LayerStreamResponse]) error
	// Epoch activation transactions.
	EpochStream(*EpochStreamRequest, grpc.ServerStreamingServer[EpochStreamResponse]) error
	MalfeasanceQuery(context.Context, *MalfeasanceRequest) (*MalfeasanceResponse, error)
	MalfeasanceStream(*MalfeasanceStreamRequest, grpc.ServerStreamingServer[MalfeasanceStreamResponse]) error
}

// UnimplementedMeshServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMeshServiceServer struct{}

func (UnimplementedMeshServiceServer) GenesisTime(context.Context, *GenesisTimeRequest) (*GenesisTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenesisTime not implemented")
}
func (UnimplementedMeshServiceServer) CurrentLayer(context.Context, *CurrentLayerRequest) (*CurrentLayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentLayer not implemented")
}
func (UnimplementedMeshServiceServer) CurrentEpoch(context.Context, *CurrentEpochRequest) (*CurrentEpochResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentEpoch not implemented")
}
func (UnimplementedMeshServiceServer) GenesisID(context.Context, *GenesisIDRequest) (*GenesisIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenesisID not implemented")
}
func (UnimplementedMeshServiceServer) EpochNumLayers(context.Context, *EpochNumLayersRequest) (*EpochNumLayersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EpochNumLayers not implemented")
}
func (UnimplementedMeshServiceServer) LayerDuration(context.Context, *LayerDurationRequest) (*LayerDurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LayerDuration not implemented")
}
func (UnimplementedMeshServiceServer) MaxTransactionsPerSecond(context.Context, *MaxTransactionsPerSecondRequest) (*MaxTransactionsPerSecondResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MaxTransactionsPerSecond not implemented")
}
func (UnimplementedMeshServiceServer) AccountMeshDataQuery(context.Context, *AccountMeshDataQueryRequest) (*AccountMeshDataQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountMeshDataQuery not implemented")
}
func (UnimplementedMeshServiceServer) LayersQuery(context.Context, *LayersQueryRequest) (*LayersQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LayersQuery not implemented")
}
func (UnimplementedMeshServiceServer) AccountMeshDataStream(*AccountMeshDataStreamRequest, grpc.ServerStreamingServer[AccountMeshDataStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method AccountMeshDataStream not implemented")
}
func (UnimplementedMeshServiceServer) LayerStream(*LayerStreamRequest, grpc.ServerStreamingServer[LayerStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method LayerStream not implemented")
}
func (UnimplementedMeshServiceServer) EpochStream(*EpochStreamRequest, grpc.ServerStreamingServer[EpochStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method EpochStream not implemented")
}
func (UnimplementedMeshServiceServer) MalfeasanceQuery(context.Context, *MalfeasanceRequest) (*MalfeasanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MalfeasanceQuery not implemented")
}
func (UnimplementedMeshServiceServer) MalfeasanceStream(*MalfeasanceStreamRequest, grpc.ServerStreamingServer[MalfeasanceStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method MalfeasanceStream not implemented")
}
func (UnimplementedMeshServiceServer) testEmbeddedByValue() {}

// UnsafeMeshServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MeshServiceServer will
// result in compilation errors.
type UnsafeMeshServiceServer interface {
	mustEmbedUnimplementedMeshServiceServer()
}

func RegisterMeshServiceServer(s grpc.ServiceRegistrar, srv MeshServiceServer) {
	// If the following call pancis, it indicates UnimplementedMeshServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MeshService_ServiceDesc, srv)
}

func _MeshService_GenesisTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenesisTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshServiceServer).GenesisTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeshService_GenesisTime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshServiceServer).GenesisTime(ctx, req.(*GenesisTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeshService_CurrentLayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrentLayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshServiceServer).CurrentLayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeshService_CurrentLayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshServiceServer).CurrentLayer(ctx, req.(*CurrentLayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeshService_CurrentEpoch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrentEpochRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshServiceServer).CurrentEpoch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeshService_CurrentEpoch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshServiceServer).CurrentEpoch(ctx, req.(*CurrentEpochRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeshService_GenesisID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenesisIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshServiceServer).GenesisID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeshService_GenesisID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshServiceServer).GenesisID(ctx, req.(*GenesisIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeshService_EpochNumLayers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EpochNumLayersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshServiceServer).EpochNumLayers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeshService_EpochNumLayers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshServiceServer).EpochNumLayers(ctx, req.(*EpochNumLayersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeshService_LayerDuration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LayerDurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshServiceServer).LayerDuration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeshService_LayerDuration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshServiceServer).LayerDuration(ctx, req.(*LayerDurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeshService_MaxTransactionsPerSecond_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MaxTransactionsPerSecondRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshServiceServer).MaxTransactionsPerSecond(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeshService_MaxTransactionsPerSecond_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshServiceServer).MaxTransactionsPerSecond(ctx, req.(*MaxTransactionsPerSecondRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeshService_AccountMeshDataQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountMeshDataQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshServiceServer).AccountMeshDataQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeshService_AccountMeshDataQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshServiceServer).AccountMeshDataQuery(ctx, req.(*AccountMeshDataQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeshService_LayersQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LayersQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshServiceServer).LayersQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeshService_LayersQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshServiceServer).LayersQuery(ctx, req.(*LayersQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeshService_AccountMeshDataStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AccountMeshDataStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MeshServiceServer).AccountMeshDataStream(m, &grpc.GenericServerStream[AccountMeshDataStreamRequest, AccountMeshDataStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MeshService_AccountMeshDataStreamServer = grpc.ServerStreamingServer[AccountMeshDataStreamResponse]

func _MeshService_LayerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LayerStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MeshServiceServer).LayerStream(m, &grpc.GenericServerStream[LayerStreamRequest, LayerStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MeshService_LayerStreamServer = grpc.ServerStreamingServer[LayerStreamResponse]

func _MeshService_EpochStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EpochStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MeshServiceServer).EpochStream(m, &grpc.GenericServerStream[EpochStreamRequest, EpochStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MeshService_EpochStreamServer = grpc.ServerStreamingServer[EpochStreamResponse]

func _MeshService_MalfeasanceQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MalfeasanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshServiceServer).MalfeasanceQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeshService_MalfeasanceQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshServiceServer).MalfeasanceQuery(ctx, req.(*MalfeasanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeshService_MalfeasanceStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MalfeasanceStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MeshServiceServer).MalfeasanceStream(m, &grpc.GenericServerStream[MalfeasanceStreamRequest, MalfeasanceStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MeshService_MalfeasanceStreamServer = grpc.ServerStreamingServer[MalfeasanceStreamResponse]

// MeshService_ServiceDesc is the grpc.ServiceDesc for MeshService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MeshService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spacemesh.v1.MeshService",
	HandlerType: (*MeshServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenesisTime",
			Handler:    _MeshService_GenesisTime_Handler,
		},
		{
			MethodName: "CurrentLayer",
			Handler:    _MeshService_CurrentLayer_Handler,
		},
		{
			MethodName: "CurrentEpoch",
			Handler:    _MeshService_CurrentEpoch_Handler,
		},
		{
			MethodName: "GenesisID",
			Handler:    _MeshService_GenesisID_Handler,
		},
		{
			MethodName: "EpochNumLayers",
			Handler:    _MeshService_EpochNumLayers_Handler,
		},
		{
			MethodName: "LayerDuration",
			Handler:    _MeshService_LayerDuration_Handler,
		},
		{
			MethodName: "MaxTransactionsPerSecond",
			Handler:    _MeshService_MaxTransactionsPerSecond_Handler,
		},
		{
			MethodName: "AccountMeshDataQuery",
			Handler:    _MeshService_AccountMeshDataQuery_Handler,
		},
		{
			MethodName: "LayersQuery",
			Handler:    _MeshService_LayersQuery_Handler,
		},
		{
			MethodName: "MalfeasanceQuery",
			Handler:    _MeshService_MalfeasanceQuery_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AccountMeshDataStream",
			Handler:       _MeshService_AccountMeshDataStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "LayerStream",
			Handler:       _MeshService_LayerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "EpochStream",
			Handler:       _MeshService_EpochStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MalfeasanceStream",
			Handler:       _MeshService_MalfeasanceStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "spacemesh/v1/mesh.proto",
}
