// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: spacemesh/v1/debug.proto

package spacemeshv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DebugService_NetworkInfo_FullMethodName     = "/spacemesh.v1.DebugService/NetworkInfo"
	DebugService_Accounts_FullMethodName        = "/spacemesh.v1.DebugService/Accounts"
	DebugService_ActiveSet_FullMethodName       = "/spacemesh.v1.DebugService/ActiveSet"
	DebugService_ProposalsStream_FullMethodName = "/spacemesh.v1.DebugService/ProposalsStream"
	DebugService_ChangeLogLevel_FullMethodName  = "/spacemesh.v1.DebugService/ChangeLogLevel"
)

// DebugServiceClient is the client API for DebugService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// DebugService exposes methods used for mostly debugging and tests
// NOTE: The endpoints in this service are experimental and subject to change without notice.
// They should not be used in production.
type DebugServiceClient interface {
	// NetworkInfo returns p2p network information. Mostly required for integration with deployment
	// and testing tooling.
	NetworkInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*NetworkInfoResponse, error)
	// Accounts returns data for all the accounts currently in the node's current global state.
	// This includes each account's address, nonce and balance but excludes projection of account state.
	Accounts(ctx context.Context, in *AccountsRequest, opts ...grpc.CallOption) (*AccountsResponse, error)
	// ActiveSet returns the active set used by hare in a given epoch.
	ActiveSet(ctx context.Context, in *ActiveSetRequest, opts ...grpc.CallOption) (*ActiveSetResponse, error)
	// ProposalsStream streams all proposals that are confirmed by hare.
	ProposalsStream(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Proposal], error)
	ChangeLogLevel(ctx context.Context, in *ChangeLogLevelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type debugServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDebugServiceClient(cc grpc.ClientConnInterface) DebugServiceClient {
	return &debugServiceClient{cc}
}

func (c *debugServiceClient) NetworkInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*NetworkInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NetworkInfoResponse)
	err := c.cc.Invoke(ctx, DebugService_NetworkInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugServiceClient) Accounts(ctx context.Context, in *AccountsRequest, opts ...grpc.CallOption) (*AccountsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccountsResponse)
	err := c.cc.Invoke(ctx, DebugService_Accounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugServiceClient) ActiveSet(ctx context.Context, in *ActiveSetRequest, opts ...grpc.CallOption) (*ActiveSetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActiveSetResponse)
	err := c.cc.Invoke(ctx, DebugService_ActiveSet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugServiceClient) ProposalsStream(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Proposal], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DebugService_ServiceDesc.Streams[0], DebugService_ProposalsStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[emptypb.Empty, Proposal]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DebugService_ProposalsStreamClient = grpc.ServerStreamingClient[Proposal]

func (c *debugServiceClient) ChangeLogLevel(ctx context.Context, in *ChangeLogLevelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DebugService_ChangeLogLevel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DebugServiceServer is the server API for DebugService service.
// All implementations should embed UnimplementedDebugServiceServer
// for forward compatibility.
//
// DebugService exposes methods used for mostly debugging and tests
// NOTE: The endpoints in this service are experimental and subject to change without notice.
// They should not be used in production.
type DebugServiceServer interface {
	// NetworkInfo returns p2p network information. Mostly required for integration with deployment
	// and testing tooling.
	NetworkInfo(context.Context, *emptypb.Empty) (*NetworkInfoResponse, error)
	// Accounts returns data for all the accounts currently in the node's current global state.
	// This includes each account's address, nonce and balance but excludes projection of account state.
	Accounts(context.Context, *AccountsRequest) (*AccountsResponse, error)
	// ActiveSet returns the active set used by hare in a given epoch.
	ActiveSet(context.Context, *ActiveSetRequest) (*ActiveSetResponse, error)
	// ProposalsStream streams all proposals that are confirmed by hare.
	ProposalsStream(*emptypb.Empty, grpc.ServerStreamingServer[Proposal]) error
	ChangeLogLevel(context.Context, *ChangeLogLevelRequest) (*emptypb.Empty, error)
}

// UnimplementedDebugServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDebugServiceServer struct{}

func (UnimplementedDebugServiceServer) NetworkInfo(context.Context, *emptypb.Empty) (*NetworkInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NetworkInfo not implemented")
}
func (UnimplementedDebugServiceServer) Accounts(context.Context, *AccountsRequest) (*AccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Accounts not implemented")
}
func (UnimplementedDebugServiceServer) ActiveSet(context.Context, *ActiveSetRequest) (*ActiveSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActiveSet not implemented")
}
func (UnimplementedDebugServiceServer) ProposalsStream(*emptypb.Empty, grpc.ServerStreamingServer[Proposal]) error {
	return status.Errorf(codes.Unimplemented, "method ProposalsStream not implemented")
}
func (UnimplementedDebugServiceServer) ChangeLogLevel(context.Context, *ChangeLogLevelRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeLogLevel not implemented")
}
func (UnimplementedDebugServiceServer) testEmbeddedByValue() {}

// UnsafeDebugServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DebugServiceServer will
// result in compilation errors.
type UnsafeDebugServiceServer interface {
	mustEmbedUnimplementedDebugServiceServer()
}

func RegisterDebugServiceServer(s grpc.ServiceRegistrar, srv DebugServiceServer) {
	// If the following call pancis, it indicates UnimplementedDebugServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DebugService_ServiceDesc, srv)
}

func _DebugService_NetworkInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServiceServer).NetworkInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DebugService_NetworkInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServiceServer).NetworkInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DebugService_Accounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServiceServer).Accounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DebugService_Accounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServiceServer).Accounts(ctx, req.(*AccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DebugService_ActiveSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActiveSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServiceServer).ActiveSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DebugService_ActiveSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServiceServer).ActiveSet(ctx, req.(*ActiveSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DebugService_ProposalsStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DebugServiceServer).ProposalsStream(m, &grpc.GenericServerStream[emptypb.Empty, Proposal]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DebugService_ProposalsStreamServer = grpc.ServerStreamingServer[Proposal]

func _DebugService_ChangeLogLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeLogLevelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServiceServer).ChangeLogLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DebugService_ChangeLogLevel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServiceServer).ChangeLogLevel(ctx, req.(*ChangeLogLevelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DebugService_ServiceDesc is the grpc.ServiceDesc for DebugService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DebugService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spacemesh.v1.DebugService",
	HandlerType: (*DebugServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NetworkInfo",
			Handler:    _DebugService_NetworkInfo_Handler,
		},
		{
			MethodName: "Accounts",
			Handler:    _DebugService_Accounts_Handler,
		},
		{
			MethodName: "ActiveSet",
			Handler:    _DebugService_ActiveSet_Handler,
		},
		{
			MethodName: "ChangeLogLevel",
			Handler:    _DebugService_ChangeLogLevel_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ProposalsStream",
			Handler:       _DebugService_ProposalsStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "spacemesh/v1/debug.proto",
}
