syntax = "proto3";

package spacemesh.v2beta1;

import "google/api/annotations.proto";
import "google/api/visibility.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "spacemesh/v2beta1/v2beta1.proto";

enum IdentityState {
  UNSPECIFIED = 0;

  WAIT_FOR_ATX_SYNCED = 1;
  RETRYING = 2;

  WAITING_FOR_POET_REGISTRATION_WINDOW = 3;
  POET_CHALLENGE_READY = 4;
  POET_REGISTERED = 5;
  WAIT_FOR_POET_ROUND_END = 6;
  POET_PROOF_RECEIVED = 7;

  GENERATING_POST_PROOF = 8;
  POST_PROOF_READY = 9;

  ATX_READY = 10;
  ATX_BROADCASTED = 11;

  PROPOSAL_BUILD_FAILED = 12;
  PROPOSAL_PUBLISH_FAILED = 13;
  PROPOSAL_PUBLISHED = 14;

  ELIGIBLE = 15;
}

message RetryingState {
  string message = 1;
}
message WaitForAtxSyncedState {}
message WaitingForPoetRegistrationWindowState {}
message PoetChallengeReadyState {}

message PoETRegistration {
  bytes challenge_hash = 1;
  string address = 2;
  string round_id = 3;
  google.protobuf.Timestamp round_end = 4;
}
message PoetRegisteredState {
  repeated PoETRegistration registrations = 1;
}

message WaitForPoetRoundEndState {
  google.protobuf.Timestamp round_end = 1;
  google.protobuf.Timestamp publish_epoch_end = 2;
}
message PoetProofReceivedState {
  string poet_url = 1;
}
message GeneratingPostProofState {}
message PostProofReadyState {}
message AtxReadyState {}
message AtxBroadcastedState {
  bytes atx_id = 1;
}
message ProposalBuildFailedState {
  string message = 1;
  uint32 layer = 2;
}
message ProposalPublishFailedState {
  string message = 1;
  bytes proposal = 2;
  uint32 layer = 3;
}
message ProposalPublishedState {
  bytes proposal = 1;
  uint32 layer = 2;
}

message Eligibility {
  uint32 layer = 1;
  uint32 count = 2;
}
message Eligible {
  repeated Eligibility layers = 2;
}

message IdentityStateInfo {
  bytes id = 1;
  IdentityState state = 2;
  optional uint32 publish_epoch = 3;
  google.protobuf.Timestamp time = 4;
  oneof metadata {
    WaitForAtxSyncedState wait_for_atx_synced = 5;
    WaitingForPoetRegistrationWindowState waiting_for_poet_registration_window = 6;
    PoetChallengeReadyState poet_challenge_ready = 7;
    PoetRegisteredState poet_registered = 8;
    WaitForPoetRoundEndState wait_for_poet_round_end = 9;
    PoetProofReceivedState poet_proof_received = 10;
    GeneratingPostProofState generating_post_proof = 11;
    PostProofReadyState post_proof_ready = 12;
    AtxReadyState atx_ready = 13;
    AtxBroadcastedState atx_broadcasted = 14;
    ProposalBuildFailedState proposal_build_failed = 15;
    ProposalPublishFailedState proposal_publish_failed = 16;
    ProposalPublishedState proposal_published = 17;
    Eligible eligible = 18;
    RetryingState retrying = 19;
  }
}

message IdentityStatesRequest {
  repeated IdentityState states = 1; // list of identity states to filter by
  // The timestamp of the oldest state to return.
  // It's inclusive.
  google.protobuf.Timestamp from = 2;
  // The timestamp of the newest state to return.
  // It's exclusive, meaning it will return states between [from; to).
  google.protobuf.Timestamp to = 3;
  // How many states to return at most.
  uint64 limit = 4;
  // The sorting order of states:
  // - ASC:  from oldest to newest
  // - DESC: from newest to oldest.
  SortOrder order = 5;
}

message IdentityStatesResponse {
 repeated IdentityStateInfo states = 1;
}

// PoetInfo rpc
message PoetInfoRequest {}

message PoetConfig {
  google.protobuf.Duration phase_shift = 1;
  google.protobuf.Duration cycle_gap = 2;
}

message PoetInfoResponse {
  repeated string poets = 1;
  PoetConfig config = 2;
}

// Proposals and eligibilities
message Eligibilities {
  repeated ProposalEligibility eligibilities = 5;
}

message ProposalEligibility {
  uint32 layer = 1;
  uint32 count = 2;
}

message EpochEligibilities {
  map<uint32, Eligibilities> epochs = 1;
}

message EligibilitiesRequest {}

message EligibilitiesResponse {
  map<string, EpochEligibilities> identities = 1;
}

message ProposalsRequest {}

message Proposal {
  uint32 layer = 1;
  bytes proposal = 2;
}

message Proposals {
  repeated Proposal proposals = 1;
}

message ProposalsResponse {
  map<string, Proposals> proposals = 1;
}

service SmeshingIdentitiesService {
  option (google.api.api_visibility).restriction = "v2beta1";

  rpc States(IdentityStatesRequest) returns (IdentityStatesResponse) {
    option (google.api.http) = {get: "/spacemesh.v2beta1.SmeshingIdentitiesService/States"};
  }

  rpc PoetInfo(PoetInfoRequest) returns (PoetInfoResponse) {
    option (google.api.http) = {get: "/spacemesh.v2beta1.SmeshingIdentitiesService/PoetInfo"};
  }

  rpc Eligibilities(EligibilitiesRequest) returns (EligibilitiesResponse) {
    option (google.api.http) = {get: "/spacemesh.v2beta1.SmeshingIdentitiesService/Eligibilities"};
  }

  rpc Proposals(ProposalsRequest) returns (ProposalsResponse) {
    option (google.api.http) = {get: "/spacemesh.v2beta1.SmeshingIdentitiesService/Proposals"};
  }
}
