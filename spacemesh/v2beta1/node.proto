syntax = "proto3";

package spacemesh.v2beta1;

import "google/api/annotations.proto";
import "google/api/visibility.proto";

message NodeStatusResponse {
  uint64 connected_peers = 1; // number of connected neighbors
  enum SyncStatus {
    SYNC_STATUS_UNSPECIFIED = 0;
    SYNC_STATUS_OFFLINE = 1;
    SYNC_STATUS_SYNCING = 2;
    SYNC_STATUS_SYNCED = 3;
  }
  SyncStatus status = 2; // node sync status
  uint32 latest_layer = 3; // latest layer node has seen from blocks
  uint32 applied_layer = 4; // last layer node has applied to the state
  uint32 processed_layer = 5; // last layer whose votes have been processed
  uint32 current_layer = 6; // current layer, based on clock time
}

message NodeStatusRequest {}

message NodeVersionRequest {}

message NodeVersionResponse {
  string version = 1; // semantic version of the node software
}

message NodeBuildRequest {}

message NodeBuildResponse {
  string build = 1; // git commit hash of the build
}

service NodeService {
  option (google.api.api_visibility).restriction = "v2beta1";

  // Node status
  //
  // Status is a method that returns an "{{.ResponseType.Name}}".
  // This method is used to retrieve node status information.
  rpc Status(NodeStatusRequest) returns (NodeStatusResponse) {
    option (google.api.http) = {
      get: "/spacemesh.v2beta1.NodeService/Status"
    };
  }

  // Node version
  //
  // Version returns version information about the node software.
  rpc Version(NodeVersionRequest) returns (NodeVersionResponse) {
    option (google.api.http) = {
      get: "/spacemesh.v2beta1.NodeService/Version"
    };
  }

  // Node build
  //
  // Build returns the build of the node software.
  rpc Build(NodeBuildRequest) returns (NodeBuildResponse) {
    option (google.api.http) = {
      get: "/spacemesh.v2beta1.NodeService/Build"
    };
  }
}
