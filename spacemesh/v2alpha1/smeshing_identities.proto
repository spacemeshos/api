syntax = "proto3";

package spacemesh.v2alpha1;

import "google/api/annotations.proto";
import "google/api/visibility.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

message IdentityStatesRequest {}

enum IdentityState {
  UNSPECIFIED = 0;

  WAIT_FOR_ATX_SYNCED = 1;
  RETRYING = 2;

  WAITING_FOR_POET_REGISTRATION_WINDOW = 3;
  POET_CHALLENGE_READY = 4;
  POET_REGISTERED = 5;
  WAIT_FOR_POET_ROUND_END = 6;
  POET_PROOF_RECEIVED = 7;

  GENERATING_POST_PROOF = 8;
  POST_PROOF_READY = 9;

  ATX_READY = 10;
  ATX_BROADCASTED = 11;

  PROPOSAL_PUBLISHED = 12;
}

message IdentityStateInfo {
  IdentityState state = 1;
  optional uint32 publish_epoch = 2;
  string message = 3;
  google.protobuf.Timestamp time = 4;
}

message Identity {
  repeated IdentityStateInfo history = 1;
}

message IdentityStatesResponse {
  map<string, Identity> identities = 1;
}

// PoetInfo rpc
message PoetInfoRequest {}

message PoetInfo {
  google.protobuf.Duration phase_shift = 1;
  google.protobuf.Duration cycle_gap = 2;
}

message PoetInfoResponse {
  map<string, PoetInfo> poets = 1;
}

// Proposals and eligibilities
message Eligibilities {
  repeated ProposalEligibility eligibilities = 5;
}

message ProposalEligibility {
  uint32 layer = 1;
  uint32 count = 2;
}

message EligibilitiesRequest {}

message EligibilitiesResponse {
  map<string, Eligibilities> eligibilities = 1;
}

message ProposalsRequest {}

message Proposal {
  uint32 layer = 1;
  bytes proposal = 2;
}

message Proposals {
  repeated Proposal proposals = 1;
}

message ProposalsResponse {
  map<string, Proposals> proposals = 1;
}

service SmeshingIdentitiesService {
  option (google.api.api_visibility).restriction = "V2";

  rpc States(IdentityStatesRequest) returns (IdentityStatesResponse) {}

  rpc PoetInfo(PoetInfoRequest) returns (PoetInfoResponse) {}

  rpc Eligibilities(EligibilitiesRequest) returns (EligibilitiesResponse) {}

  rpc Proposals(ProposalsRequest) returns (ProposalsResponse) {}
}
