// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: spacemesh/v2beta1/reward.proto

package spacemeshv2beta1

import (
	context "context"
	v2alpha1 "github.com/spacemeshos/api/release/go/spacemesh/v2alpha1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RewardService_List_FullMethodName = "/spacemesh.v2beta1.RewardService/List"
)

// RewardServiceClient is the client API for RewardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RewardServiceClient interface {
	List(ctx context.Context, in *v2alpha1.RewardRequest, opts ...grpc.CallOption) (*v2alpha1.RewardList, error)
}

type rewardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRewardServiceClient(cc grpc.ClientConnInterface) RewardServiceClient {
	return &rewardServiceClient{cc}
}

func (c *rewardServiceClient) List(ctx context.Context, in *v2alpha1.RewardRequest, opts ...grpc.CallOption) (*v2alpha1.RewardList, error) {
	out := new(v2alpha1.RewardList)
	err := c.cc.Invoke(ctx, RewardService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RewardServiceServer is the server API for RewardService service.
// All implementations should embed UnimplementedRewardServiceServer
// for forward compatibility
type RewardServiceServer interface {
	List(context.Context, *v2alpha1.RewardRequest) (*v2alpha1.RewardList, error)
}

// UnimplementedRewardServiceServer should be embedded to have forward compatible implementations.
type UnimplementedRewardServiceServer struct {
}

func (UnimplementedRewardServiceServer) List(context.Context, *v2alpha1.RewardRequest) (*v2alpha1.RewardList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}

// UnsafeRewardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RewardServiceServer will
// result in compilation errors.
type UnsafeRewardServiceServer interface {
	mustEmbedUnimplementedRewardServiceServer()
}

func RegisterRewardServiceServer(s grpc.ServiceRegistrar, srv RewardServiceServer) {
	s.RegisterService(&RewardService_ServiceDesc, srv)
}

func _RewardService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v2alpha1.RewardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RewardServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RewardService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RewardServiceServer).List(ctx, req.(*v2alpha1.RewardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RewardService_ServiceDesc is the grpc.ServiceDesc for RewardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RewardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spacemesh.v2beta1.RewardService",
	HandlerType: (*RewardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _RewardService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spacemesh/v2beta1/reward.proto",
}

const (
	RewardStreamService_Stream_FullMethodName = "/spacemesh.v2beta1.RewardStreamService/Stream"
)

// RewardStreamServiceClient is the client API for RewardStreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RewardStreamServiceClient interface {
	Stream(ctx context.Context, in *v2alpha1.RewardStreamRequest, opts ...grpc.CallOption) (RewardStreamService_StreamClient, error)
}

type rewardStreamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRewardStreamServiceClient(cc grpc.ClientConnInterface) RewardStreamServiceClient {
	return &rewardStreamServiceClient{cc}
}

func (c *rewardStreamServiceClient) Stream(ctx context.Context, in *v2alpha1.RewardStreamRequest, opts ...grpc.CallOption) (RewardStreamService_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &RewardStreamService_ServiceDesc.Streams[0], RewardStreamService_Stream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &rewardStreamServiceStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RewardStreamService_StreamClient interface {
	Recv() (*v2alpha1.Reward, error)
	grpc.ClientStream
}

type rewardStreamServiceStreamClient struct {
	grpc.ClientStream
}

func (x *rewardStreamServiceStreamClient) Recv() (*v2alpha1.Reward, error) {
	m := new(v2alpha1.Reward)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RewardStreamServiceServer is the server API for RewardStreamService service.
// All implementations should embed UnimplementedRewardStreamServiceServer
// for forward compatibility
type RewardStreamServiceServer interface {
	Stream(*v2alpha1.RewardStreamRequest, RewardStreamService_StreamServer) error
}

// UnimplementedRewardStreamServiceServer should be embedded to have forward compatible implementations.
type UnimplementedRewardStreamServiceServer struct {
}

func (UnimplementedRewardStreamServiceServer) Stream(*v2alpha1.RewardStreamRequest, RewardStreamService_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}

// UnsafeRewardStreamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RewardStreamServiceServer will
// result in compilation errors.
type UnsafeRewardStreamServiceServer interface {
	mustEmbedUnimplementedRewardStreamServiceServer()
}

func RegisterRewardStreamServiceServer(s grpc.ServiceRegistrar, srv RewardStreamServiceServer) {
	s.RegisterService(&RewardStreamService_ServiceDesc, srv)
}

func _RewardStreamService_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(v2alpha1.RewardStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RewardStreamServiceServer).Stream(m, &rewardStreamServiceStreamServer{stream})
}

type RewardStreamService_StreamServer interface {
	Send(*v2alpha1.Reward) error
	grpc.ServerStream
}

type rewardStreamServiceStreamServer struct {
	grpc.ServerStream
}

func (x *rewardStreamServiceStreamServer) Send(m *v2alpha1.Reward) error {
	return x.ServerStream.SendMsg(m)
}

// RewardStreamService_ServiceDesc is the grpc.ServiceDesc for RewardStreamService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RewardStreamService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spacemesh.v2beta1.RewardStreamService",
	HandlerType: (*RewardStreamServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _RewardStreamService_Stream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "spacemesh/v2beta1/reward.proto",
}
