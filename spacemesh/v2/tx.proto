syntax = "proto3";

import "google/rpc/status.proto";

package spacemesh.v2;

message Transaction {
  oneof versioned {
    TransactionV1 v1 = 1;
  }
}

// An immutable Spacemesh transaction.
// do not include mutable data such as tx state or result.
message TransactionV1 {
  bytes id = 1;
  string principal = 2; // principal account address
  string template = 3; // template account address
  uint32 method = 4; // this is actually limited by uint8, but no type for that.
  Nonce nonce = 5;
  LayerLimits limits = 6;
  uint64 max_gas = 7; // max gas units consumed by tx
  uint64 gas_price = 8; // fee per unit gas, in smidge
  uint64 max_spend = 9;
  bytes raw = 10;
}

message Nonce {
  uint64 counter = 1;
}

message LayerLimits {
  uint32 min = 1;
  uint32 max = 2;
}

// TransactionState is the "journey" of a tx from mempool to block inclusion to
// mesh to STF processing. To know whether or not the tx actually succeeded,
// and its side effects, check the Receipt in the GlobalStateService.
message TransactionState {
  bytes id = 1;
  enum TransactionState {
    TRANSACTION_STATE_UNSPECIFIED = 0; // default state
    TRANSACTION_STATE_REJECTED = 1; // rejected from mempool due to, e.g., invalid syntax
    TRANSACTION_STATE_INSUFFICIENT_FUNDS = 2; // rejected from mempool by funds check
    TRANSACTION_STATE_CONFLICTING = 3; // rejected from mempool due to conflicting counter
    TRANSACTION_STATE_MEMPOOL = 4; // in mempool but not on the mesh yet
    TRANSACTION_STATE_MESH = 5; // submitted to the mesh
    TRANSACTION_STATE_PROCESSED = 6; // processed by STF; check Receipt for success or failure
  }
  TransactionState state = 2;
}

message TransactionResult {
  enum Status {
    SUCCESS = 0;
    FAILURE = 1;
    INVALID = 2;
  }

  Transaction tx = 1;
  Status status = 2;
  string message = 3;
  uint64 gas_consumed = 4; // in units of gas
  uint64 fee = 5; // in smidge
  bytes block = 6;
  uint32 layer = 7;
  repeated string touched_addresses = 8;
}

message TransactionStreamRequest {
  uint32 start_layer = 1;
  uint32 end_layer = 2;
  bytes id = 3;
  string address = 4;
  bool watch = 5;
}

service TransactionStreamService {
  rpc Stream(TransactionStreamRequest) returns (stream Transaction);
}

message TransactionRequest {
  bytes id = 1;
  bool include_state = 2;
  bool include_result = 3;
}

message TransactionResponse {
  Transaction tx = 1;
  TransactionState tx_state = 2;
  TransactionResult tx_result = 3;
}

message ParseTransactionRequest {
  bytes transaction = 1;  // signed binary transaction
  bool verify = 2;        // if true signature verification will be executed
}

message SubmitTransactionRequest {
  bytes  transaction = 1;  // signed binary transaction
}

message SubmitTransactionResponse {
  google.rpc.Status status = 1;
  TransactionState tx_state = 2;
}

service TransactionService {
  rpc Get(TransactionRequest) returns (TransactionResponse);
  rpc ParseTransaction(ParseTransactionRequest) returns (ParseTransactionRequest);
  rpc SubmitTransaction(SubmitTransactionRequest) returns (SubmitTransactionResponse);
}