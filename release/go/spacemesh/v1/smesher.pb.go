// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.3
// source: spacemesh/v1/smesher.proto

package v1

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

var File_spacemesh_v1_smesher_proto protoreflect.FileDescriptor

var file_spacemesh_v1_smesher_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x6d, 0x65, 0x73, 0x68, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65,
	0x73, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x6d, 0x65, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0xd0, 0x08, 0x0a, 0x0e, 0x53, 0x6d,
	0x65, 0x73, 0x68, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x46, 0x0a, 0x0a,
	0x49, 0x73, 0x53, 0x6d, 0x65, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x20, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x73, 0x53, 0x6d, 0x65, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x6d, 0x65,
	0x73, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x22, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x6d, 0x65, 0x73, 0x68, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x6d,
	0x65, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55,
	0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x70, 0x53, 0x6d, 0x65, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x21,
	0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x6f, 0x70, 0x53, 0x6d, 0x65, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x22, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x6f, 0x70, 0x53, 0x6d, 0x65, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x09, 0x53, 0x6d, 0x65, 0x73, 0x68, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1f, 0x2e, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6d, 0x65, 0x73, 0x68, 0x65,
	0x72, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x08, 0x43,
	0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x1e, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x52, 0x0a, 0x0b, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x12, 0x20,
	0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x74, 0x43, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x06, 0x4d, 0x69, 0x6e, 0x47, 0x61, 0x73, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1c, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x6e, 0x47, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x09, 0x53, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x47, 0x61, 0x73,
	0x12, 0x1e, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x47, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1f, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x47, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x61, 0x0a, 0x10, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x25, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x73, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0f, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x65, 0x74, 0x75,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x25, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6f, 0x73, 0x74, 0x53, 0x65, 0x74, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x15, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x65,
	0x74, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2b, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x65, 0x74, 0x75, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x7c, 0x0a, 0x19, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x65,
	0x74, 0x75, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x2e, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x65, 0x74, 0x75, 0x70, 0x43, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x65, 0x74, 0x75, 0x70, 0x43, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0a, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x20, 0x2e, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x34, 0x5a, 0x32,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x73, 0x68, 0x6f, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2f,
	0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_spacemesh_v1_smesher_proto_goTypes = []interface{}{
	(*empty.Empty)(nil),                       // 0: google.protobuf.Empty
	(*StartSmeshingRequest)(nil),              // 1: spacemesh.v1.StartSmeshingRequest
	(*StopSmeshingRequest)(nil),               // 2: spacemesh.v1.StopSmeshingRequest
	(*SetCoinbaseRequest)(nil),                // 3: spacemesh.v1.SetCoinbaseRequest
	(*SetMinGasRequest)(nil),                  // 4: spacemesh.v1.SetMinGasRequest
	(*EstimatedRewardsRequest)(nil),           // 5: spacemesh.v1.EstimatedRewardsRequest
	(*PostSetupComputeProvidersRequest)(nil),  // 6: spacemesh.v1.PostSetupComputeProvidersRequest
	(*IsSmeshingResponse)(nil),                // 7: spacemesh.v1.IsSmeshingResponse
	(*StartSmeshingResponse)(nil),             // 8: spacemesh.v1.StartSmeshingResponse
	(*StopSmeshingResponse)(nil),              // 9: spacemesh.v1.StopSmeshingResponse
	(*SmesherIDResponse)(nil),                 // 10: spacemesh.v1.SmesherIDResponse
	(*CoinbaseResponse)(nil),                  // 11: spacemesh.v1.CoinbaseResponse
	(*SetCoinbaseResponse)(nil),               // 12: spacemesh.v1.SetCoinbaseResponse
	(*MinGasResponse)(nil),                    // 13: spacemesh.v1.MinGasResponse
	(*SetMinGasResponse)(nil),                 // 14: spacemesh.v1.SetMinGasResponse
	(*EstimatedRewardsResponse)(nil),          // 15: spacemesh.v1.EstimatedRewardsResponse
	(*PostSetupStatusResponse)(nil),           // 16: spacemesh.v1.PostSetupStatusResponse
	(*PostSetupStatusStreamResponse)(nil),     // 17: spacemesh.v1.PostSetupStatusStreamResponse
	(*PostSetupComputeProvidersResponse)(nil), // 18: spacemesh.v1.PostSetupComputeProvidersResponse
	(*PostConfigResponse)(nil),                // 19: spacemesh.v1.PostConfigResponse
}
var file_spacemesh_v1_smesher_proto_depIdxs = []int32{
	0,  // 0: spacemesh.v1.SmesherService.IsSmeshing:input_type -> google.protobuf.Empty
	1,  // 1: spacemesh.v1.SmesherService.StartSmeshing:input_type -> spacemesh.v1.StartSmeshingRequest
	2,  // 2: spacemesh.v1.SmesherService.StopSmeshing:input_type -> spacemesh.v1.StopSmeshingRequest
	0,  // 3: spacemesh.v1.SmesherService.SmesherID:input_type -> google.protobuf.Empty
	0,  // 4: spacemesh.v1.SmesherService.Coinbase:input_type -> google.protobuf.Empty
	3,  // 5: spacemesh.v1.SmesherService.SetCoinbase:input_type -> spacemesh.v1.SetCoinbaseRequest
	0,  // 6: spacemesh.v1.SmesherService.MinGas:input_type -> google.protobuf.Empty
	4,  // 7: spacemesh.v1.SmesherService.SetMinGas:input_type -> spacemesh.v1.SetMinGasRequest
	5,  // 8: spacemesh.v1.SmesherService.EstimatedRewards:input_type -> spacemesh.v1.EstimatedRewardsRequest
	0,  // 9: spacemesh.v1.SmesherService.PostSetupStatus:input_type -> google.protobuf.Empty
	0,  // 10: spacemesh.v1.SmesherService.PostSetupStatusStream:input_type -> google.protobuf.Empty
	6,  // 11: spacemesh.v1.SmesherService.PostSetupComputeProviders:input_type -> spacemesh.v1.PostSetupComputeProvidersRequest
	0,  // 12: spacemesh.v1.SmesherService.PostConfig:input_type -> google.protobuf.Empty
	7,  // 13: spacemesh.v1.SmesherService.IsSmeshing:output_type -> spacemesh.v1.IsSmeshingResponse
	8,  // 14: spacemesh.v1.SmesherService.StartSmeshing:output_type -> spacemesh.v1.StartSmeshingResponse
	9,  // 15: spacemesh.v1.SmesherService.StopSmeshing:output_type -> spacemesh.v1.StopSmeshingResponse
	10, // 16: spacemesh.v1.SmesherService.SmesherID:output_type -> spacemesh.v1.SmesherIDResponse
	11, // 17: spacemesh.v1.SmesherService.Coinbase:output_type -> spacemesh.v1.CoinbaseResponse
	12, // 18: spacemesh.v1.SmesherService.SetCoinbase:output_type -> spacemesh.v1.SetCoinbaseResponse
	13, // 19: spacemesh.v1.SmesherService.MinGas:output_type -> spacemesh.v1.MinGasResponse
	14, // 20: spacemesh.v1.SmesherService.SetMinGas:output_type -> spacemesh.v1.SetMinGasResponse
	15, // 21: spacemesh.v1.SmesherService.EstimatedRewards:output_type -> spacemesh.v1.EstimatedRewardsResponse
	16, // 22: spacemesh.v1.SmesherService.PostSetupStatus:output_type -> spacemesh.v1.PostSetupStatusResponse
	17, // 23: spacemesh.v1.SmesherService.PostSetupStatusStream:output_type -> spacemesh.v1.PostSetupStatusStreamResponse
	18, // 24: spacemesh.v1.SmesherService.PostSetupComputeProviders:output_type -> spacemesh.v1.PostSetupComputeProvidersResponse
	19, // 25: spacemesh.v1.SmesherService.PostConfig:output_type -> spacemesh.v1.PostConfigResponse
	13, // [13:26] is the sub-list for method output_type
	0,  // [0:13] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_spacemesh_v1_smesher_proto_init() }
func file_spacemesh_v1_smesher_proto_init() {
	if File_spacemesh_v1_smesher_proto != nil {
		return
	}
	file_spacemesh_v1_smesher_types_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_spacemesh_v1_smesher_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_spacemesh_v1_smesher_proto_goTypes,
		DependencyIndexes: file_spacemesh_v1_smesher_proto_depIdxs,
	}.Build()
	File_spacemesh_v1_smesher_proto = out.File
	file_spacemesh_v1_smesher_proto_rawDesc = nil
	file_spacemesh_v1_smesher_proto_goTypes = nil
	file_spacemesh_v1_smesher_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SmesherServiceClient is the client API for SmesherService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SmesherServiceClient interface {
	// Returns true iff node is currently smeshing
	IsSmeshing(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*IsSmeshingResponse, error)
	// Starts smeshing, after completing the post setup.
	// Changing of the post setup options (e.g., number of units), after initial setup, is supported.
	// Returns success if request is accepted by node , failure if it fails
	StartSmeshing(ctx context.Context, in *StartSmeshingRequest, opts ...grpc.CallOption) (*StartSmeshingResponse, error)
	// Stops smeshing, or the preceding post setup session, and optionally attempt to
	// delete the post setup data files(s).
	// Returns success if request is accepted by node, failure if it fails
	StopSmeshing(ctx context.Context, in *StopSmeshingRequest, opts ...grpc.CallOption) (*StopSmeshingResponse, error)
	// Get the current smesher id generated by the node
	SmesherID(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*SmesherIDResponse, error)
	// Get the current coinbase
	Coinbase(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*CoinbaseResponse, error)
	// Set the coinbase
	// Returns success if request succeeds, failure if it fails
	SetCoinbase(ctx context.Context, in *SetCoinbaseRequest, opts ...grpc.CallOption) (*SetCoinbaseResponse, error)
	// Get the current min gas for including txs in blocks by this smesher
	MinGas(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*MinGasResponse, error)
	// Set a min gas units for including txs in blocks by this smesher
	// Returns success if request succeeds, failure if it fails
	SetMinGas(ctx context.Context, in *SetMinGasRequest, opts ...grpc.CallOption) (*SetMinGasResponse, error)
	// Estimate smeshing rewards over the next upcoming epoch
	EstimatedRewards(ctx context.Context, in *EstimatedRewardsRequest, opts ...grpc.CallOption) (*EstimatedRewardsResponse, error)
	// Returns the Post setup status
	PostSetupStatus(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PostSetupStatusResponse, error)
	// Returns a stream of updates for the Post setup status
	PostSetupStatusStream(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (SmesherService_PostSetupStatusStreamClient, error)
	// Returns a list of available Post setup compute providers
	PostSetupComputeProviders(ctx context.Context, in *PostSetupComputeProvidersRequest, opts ...grpc.CallOption) (*PostSetupComputeProvidersResponse, error)
	// Returns the Post protocol config
	PostConfig(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PostConfigResponse, error)
}

type smesherServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSmesherServiceClient(cc grpc.ClientConnInterface) SmesherServiceClient {
	return &smesherServiceClient{cc}
}

func (c *smesherServiceClient) IsSmeshing(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*IsSmeshingResponse, error) {
	out := new(IsSmeshingResponse)
	err := c.cc.Invoke(ctx, "/spacemesh.v1.SmesherService/IsSmeshing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smesherServiceClient) StartSmeshing(ctx context.Context, in *StartSmeshingRequest, opts ...grpc.CallOption) (*StartSmeshingResponse, error) {
	out := new(StartSmeshingResponse)
	err := c.cc.Invoke(ctx, "/spacemesh.v1.SmesherService/StartSmeshing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smesherServiceClient) StopSmeshing(ctx context.Context, in *StopSmeshingRequest, opts ...grpc.CallOption) (*StopSmeshingResponse, error) {
	out := new(StopSmeshingResponse)
	err := c.cc.Invoke(ctx, "/spacemesh.v1.SmesherService/StopSmeshing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smesherServiceClient) SmesherID(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*SmesherIDResponse, error) {
	out := new(SmesherIDResponse)
	err := c.cc.Invoke(ctx, "/spacemesh.v1.SmesherService/SmesherID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smesherServiceClient) Coinbase(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*CoinbaseResponse, error) {
	out := new(CoinbaseResponse)
	err := c.cc.Invoke(ctx, "/spacemesh.v1.SmesherService/Coinbase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smesherServiceClient) SetCoinbase(ctx context.Context, in *SetCoinbaseRequest, opts ...grpc.CallOption) (*SetCoinbaseResponse, error) {
	out := new(SetCoinbaseResponse)
	err := c.cc.Invoke(ctx, "/spacemesh.v1.SmesherService/SetCoinbase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smesherServiceClient) MinGas(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*MinGasResponse, error) {
	out := new(MinGasResponse)
	err := c.cc.Invoke(ctx, "/spacemesh.v1.SmesherService/MinGas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smesherServiceClient) SetMinGas(ctx context.Context, in *SetMinGasRequest, opts ...grpc.CallOption) (*SetMinGasResponse, error) {
	out := new(SetMinGasResponse)
	err := c.cc.Invoke(ctx, "/spacemesh.v1.SmesherService/SetMinGas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smesherServiceClient) EstimatedRewards(ctx context.Context, in *EstimatedRewardsRequest, opts ...grpc.CallOption) (*EstimatedRewardsResponse, error) {
	out := new(EstimatedRewardsResponse)
	err := c.cc.Invoke(ctx, "/spacemesh.v1.SmesherService/EstimatedRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smesherServiceClient) PostSetupStatus(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PostSetupStatusResponse, error) {
	out := new(PostSetupStatusResponse)
	err := c.cc.Invoke(ctx, "/spacemesh.v1.SmesherService/PostSetupStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smesherServiceClient) PostSetupStatusStream(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (SmesherService_PostSetupStatusStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SmesherService_serviceDesc.Streams[0], "/spacemesh.v1.SmesherService/PostSetupStatusStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &smesherServicePostSetupStatusStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SmesherService_PostSetupStatusStreamClient interface {
	Recv() (*PostSetupStatusStreamResponse, error)
	grpc.ClientStream
}

type smesherServicePostSetupStatusStreamClient struct {
	grpc.ClientStream
}

func (x *smesherServicePostSetupStatusStreamClient) Recv() (*PostSetupStatusStreamResponse, error) {
	m := new(PostSetupStatusStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *smesherServiceClient) PostSetupComputeProviders(ctx context.Context, in *PostSetupComputeProvidersRequest, opts ...grpc.CallOption) (*PostSetupComputeProvidersResponse, error) {
	out := new(PostSetupComputeProvidersResponse)
	err := c.cc.Invoke(ctx, "/spacemesh.v1.SmesherService/PostSetupComputeProviders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smesherServiceClient) PostConfig(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PostConfigResponse, error) {
	out := new(PostConfigResponse)
	err := c.cc.Invoke(ctx, "/spacemesh.v1.SmesherService/PostConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SmesherServiceServer is the server API for SmesherService service.
type SmesherServiceServer interface {
	// Returns true iff node is currently smeshing
	IsSmeshing(context.Context, *empty.Empty) (*IsSmeshingResponse, error)
	// Starts smeshing, after completing the post setup.
	// Changing of the post setup options (e.g., number of units), after initial setup, is supported.
	// Returns success if request is accepted by node , failure if it fails
	StartSmeshing(context.Context, *StartSmeshingRequest) (*StartSmeshingResponse, error)
	// Stops smeshing, or the preceding post setup session, and optionally attempt to
	// delete the post setup data files(s).
	// Returns success if request is accepted by node, failure if it fails
	StopSmeshing(context.Context, *StopSmeshingRequest) (*StopSmeshingResponse, error)
	// Get the current smesher id generated by the node
	SmesherID(context.Context, *empty.Empty) (*SmesherIDResponse, error)
	// Get the current coinbase
	Coinbase(context.Context, *empty.Empty) (*CoinbaseResponse, error)
	// Set the coinbase
	// Returns success if request succeeds, failure if it fails
	SetCoinbase(context.Context, *SetCoinbaseRequest) (*SetCoinbaseResponse, error)
	// Get the current min gas for including txs in blocks by this smesher
	MinGas(context.Context, *empty.Empty) (*MinGasResponse, error)
	// Set a min gas units for including txs in blocks by this smesher
	// Returns success if request succeeds, failure if it fails
	SetMinGas(context.Context, *SetMinGasRequest) (*SetMinGasResponse, error)
	// Estimate smeshing rewards over the next upcoming epoch
	EstimatedRewards(context.Context, *EstimatedRewardsRequest) (*EstimatedRewardsResponse, error)
	// Returns the Post setup status
	PostSetupStatus(context.Context, *empty.Empty) (*PostSetupStatusResponse, error)
	// Returns a stream of updates for the Post setup status
	PostSetupStatusStream(*empty.Empty, SmesherService_PostSetupStatusStreamServer) error
	// Returns a list of available Post setup compute providers
	PostSetupComputeProviders(context.Context, *PostSetupComputeProvidersRequest) (*PostSetupComputeProvidersResponse, error)
	// Returns the Post protocol config
	PostConfig(context.Context, *empty.Empty) (*PostConfigResponse, error)
}

// UnimplementedSmesherServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSmesherServiceServer struct {
}

func (*UnimplementedSmesherServiceServer) IsSmeshing(context.Context, *empty.Empty) (*IsSmeshingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsSmeshing not implemented")
}
func (*UnimplementedSmesherServiceServer) StartSmeshing(context.Context, *StartSmeshingRequest) (*StartSmeshingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartSmeshing not implemented")
}
func (*UnimplementedSmesherServiceServer) StopSmeshing(context.Context, *StopSmeshingRequest) (*StopSmeshingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopSmeshing not implemented")
}
func (*UnimplementedSmesherServiceServer) SmesherID(context.Context, *empty.Empty) (*SmesherIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SmesherID not implemented")
}
func (*UnimplementedSmesherServiceServer) Coinbase(context.Context, *empty.Empty) (*CoinbaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Coinbase not implemented")
}
func (*UnimplementedSmesherServiceServer) SetCoinbase(context.Context, *SetCoinbaseRequest) (*SetCoinbaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCoinbase not implemented")
}
func (*UnimplementedSmesherServiceServer) MinGas(context.Context, *empty.Empty) (*MinGasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MinGas not implemented")
}
func (*UnimplementedSmesherServiceServer) SetMinGas(context.Context, *SetMinGasRequest) (*SetMinGasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMinGas not implemented")
}
func (*UnimplementedSmesherServiceServer) EstimatedRewards(context.Context, *EstimatedRewardsRequest) (*EstimatedRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimatedRewards not implemented")
}
func (*UnimplementedSmesherServiceServer) PostSetupStatus(context.Context, *empty.Empty) (*PostSetupStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostSetupStatus not implemented")
}
func (*UnimplementedSmesherServiceServer) PostSetupStatusStream(*empty.Empty, SmesherService_PostSetupStatusStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method PostSetupStatusStream not implemented")
}
func (*UnimplementedSmesherServiceServer) PostSetupComputeProviders(context.Context, *PostSetupComputeProvidersRequest) (*PostSetupComputeProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostSetupComputeProviders not implemented")
}
func (*UnimplementedSmesherServiceServer) PostConfig(context.Context, *empty.Empty) (*PostConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostConfig not implemented")
}

func RegisterSmesherServiceServer(s *grpc.Server, srv SmesherServiceServer) {
	s.RegisterService(&_SmesherService_serviceDesc, srv)
}

func _SmesherService_IsSmeshing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmesherServiceServer).IsSmeshing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemesh.v1.SmesherService/IsSmeshing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmesherServiceServer).IsSmeshing(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmesherService_StartSmeshing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartSmeshingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmesherServiceServer).StartSmeshing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemesh.v1.SmesherService/StartSmeshing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmesherServiceServer).StartSmeshing(ctx, req.(*StartSmeshingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmesherService_StopSmeshing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopSmeshingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmesherServiceServer).StopSmeshing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemesh.v1.SmesherService/StopSmeshing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmesherServiceServer).StopSmeshing(ctx, req.(*StopSmeshingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmesherService_SmesherID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmesherServiceServer).SmesherID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemesh.v1.SmesherService/SmesherID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmesherServiceServer).SmesherID(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmesherService_Coinbase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmesherServiceServer).Coinbase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemesh.v1.SmesherService/Coinbase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmesherServiceServer).Coinbase(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmesherService_SetCoinbase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCoinbaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmesherServiceServer).SetCoinbase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemesh.v1.SmesherService/SetCoinbase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmesherServiceServer).SetCoinbase(ctx, req.(*SetCoinbaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmesherService_MinGas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmesherServiceServer).MinGas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemesh.v1.SmesherService/MinGas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmesherServiceServer).MinGas(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmesherService_SetMinGas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMinGasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmesherServiceServer).SetMinGas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemesh.v1.SmesherService/SetMinGas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmesherServiceServer).SetMinGas(ctx, req.(*SetMinGasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmesherService_EstimatedRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstimatedRewardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmesherServiceServer).EstimatedRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemesh.v1.SmesherService/EstimatedRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmesherServiceServer).EstimatedRewards(ctx, req.(*EstimatedRewardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmesherService_PostSetupStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmesherServiceServer).PostSetupStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemesh.v1.SmesherService/PostSetupStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmesherServiceServer).PostSetupStatus(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmesherService_PostSetupStatusStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SmesherServiceServer).PostSetupStatusStream(m, &smesherServicePostSetupStatusStreamServer{stream})
}

type SmesherService_PostSetupStatusStreamServer interface {
	Send(*PostSetupStatusStreamResponse) error
	grpc.ServerStream
}

type smesherServicePostSetupStatusStreamServer struct {
	grpc.ServerStream
}

func (x *smesherServicePostSetupStatusStreamServer) Send(m *PostSetupStatusStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SmesherService_PostSetupComputeProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostSetupComputeProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmesherServiceServer).PostSetupComputeProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemesh.v1.SmesherService/PostSetupComputeProviders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmesherServiceServer).PostSetupComputeProviders(ctx, req.(*PostSetupComputeProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmesherService_PostConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmesherServiceServer).PostConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemesh.v1.SmesherService/PostConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmesherServiceServer).PostConfig(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _SmesherService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "spacemesh.v1.SmesherService",
	HandlerType: (*SmesherServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsSmeshing",
			Handler:    _SmesherService_IsSmeshing_Handler,
		},
		{
			MethodName: "StartSmeshing",
			Handler:    _SmesherService_StartSmeshing_Handler,
		},
		{
			MethodName: "StopSmeshing",
			Handler:    _SmesherService_StopSmeshing_Handler,
		},
		{
			MethodName: "SmesherID",
			Handler:    _SmesherService_SmesherID_Handler,
		},
		{
			MethodName: "Coinbase",
			Handler:    _SmesherService_Coinbase_Handler,
		},
		{
			MethodName: "SetCoinbase",
			Handler:    _SmesherService_SetCoinbase_Handler,
		},
		{
			MethodName: "MinGas",
			Handler:    _SmesherService_MinGas_Handler,
		},
		{
			MethodName: "SetMinGas",
			Handler:    _SmesherService_SetMinGas_Handler,
		},
		{
			MethodName: "EstimatedRewards",
			Handler:    _SmesherService_EstimatedRewards_Handler,
		},
		{
			MethodName: "PostSetupStatus",
			Handler:    _SmesherService_PostSetupStatus_Handler,
		},
		{
			MethodName: "PostSetupComputeProviders",
			Handler:    _SmesherService_PostSetupComputeProviders_Handler,
		},
		{
			MethodName: "PostConfig",
			Handler:    _SmesherService_PostConfig_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PostSetupStatusStream",
			Handler:       _SmesherService_PostSetupStatusStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "spacemesh/v1/smesher.proto",
}
