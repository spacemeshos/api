// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: spacemesh/v2alpha1/malfeasance.proto

package spacemeshv2alpha1

import (
	_ "google.golang.org/genproto/googleapis/api/visibility"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MalfeasanceProof_MalfeasanceDomain int32

const (
	MalfeasanceProof_DOMAIN_UNSPECIFIED MalfeasanceProof_MalfeasanceDomain = 0 // for legacy proofs
	MalfeasanceProof_DOMAIN_ACTIVATION  MalfeasanceProof_MalfeasanceDomain = 1 // ATX related proofs
	MalfeasanceProof_DOMAIN_BALLOT      MalfeasanceProof_MalfeasanceDomain = 2 // Ballot related proofs
	MalfeasanceProof_DOMAIN_HARE        MalfeasanceProof_MalfeasanceDomain = 3 // Hare related proofs
)

// Enum value maps for MalfeasanceProof_MalfeasanceDomain.
var (
	MalfeasanceProof_MalfeasanceDomain_name = map[int32]string{
		0: "DOMAIN_UNSPECIFIED",
		1: "DOMAIN_ACTIVATION",
		2: "DOMAIN_BALLOT",
		3: "DOMAIN_HARE",
	}
	MalfeasanceProof_MalfeasanceDomain_value = map[string]int32{
		"DOMAIN_UNSPECIFIED": 0,
		"DOMAIN_ACTIVATION":  1,
		"DOMAIN_BALLOT":      2,
		"DOMAIN_HARE":        3,
	}
)

func (x MalfeasanceProof_MalfeasanceDomain) Enum() *MalfeasanceProof_MalfeasanceDomain {
	p := new(MalfeasanceProof_MalfeasanceDomain)
	*p = x
	return p
}

func (x MalfeasanceProof_MalfeasanceDomain) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MalfeasanceProof_MalfeasanceDomain) Descriptor() protoreflect.EnumDescriptor {
	return file_spacemesh_v2alpha1_malfeasance_proto_enumTypes[0].Descriptor()
}

func (MalfeasanceProof_MalfeasanceDomain) Type() protoreflect.EnumType {
	return &file_spacemesh_v2alpha1_malfeasance_proto_enumTypes[0]
}

func (x MalfeasanceProof_MalfeasanceDomain) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MalfeasanceProof_MalfeasanceDomain.Descriptor instead.
func (MalfeasanceProof_MalfeasanceDomain) EnumDescriptor() ([]byte, []int) {
	return file_spacemesh_v2alpha1_malfeasance_proto_rawDescGZIP(), []int{0, 0}
}

type MalfeasanceProof struct {
	state   protoimpl.MessageState             `protogen:"open.v1"`
	Smesher []byte                             `protobuf:"bytes,1,opt,name=smesher,proto3" json:"smesher,omitempty"`
	Domain  MalfeasanceProof_MalfeasanceDomain `protobuf:"varint,2,opt,name=domain,proto3,enum=spacemesh.v2alpha1.MalfeasanceProof_MalfeasanceDomain" json:"domain,omitempty"`
	// type of the malfeasance proof, depends on domain
	//
	// for legacy proofs the types are
	//
	//	1 - Double publish of ATX
	//	2 - Multiple ballots for a layer by same smesher
	//	3 - Hare Equivocation (currently unused)
	//	4 - ATX with invalid PoST proof published
	//	5 - ATX referencing an invalid previous ATX published
	Type uint32 `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	// Properties of the Malfeasance proof, different for every type of proof
	Properties    map[string]string `protobuf:"bytes,4,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MalfeasanceProof) Reset() {
	*x = MalfeasanceProof{}
	mi := &file_spacemesh_v2alpha1_malfeasance_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MalfeasanceProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MalfeasanceProof) ProtoMessage() {}

func (x *MalfeasanceProof) ProtoReflect() protoreflect.Message {
	mi := &file_spacemesh_v2alpha1_malfeasance_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MalfeasanceProof.ProtoReflect.Descriptor instead.
func (*MalfeasanceProof) Descriptor() ([]byte, []int) {
	return file_spacemesh_v2alpha1_malfeasance_proto_rawDescGZIP(), []int{0}
}

func (x *MalfeasanceProof) GetSmesher() []byte {
	if x != nil {
		return x.Smesher
	}
	return nil
}

func (x *MalfeasanceProof) GetDomain() MalfeasanceProof_MalfeasanceDomain {
	if x != nil {
		return x.Domain
	}
	return MalfeasanceProof_DOMAIN_UNSPECIFIED
}

func (x *MalfeasanceProof) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *MalfeasanceProof) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

type MalfeasanceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SmesherId     [][]byte               `protobuf:"bytes,1,rep,name=smesher_id,json=smesherId,proto3" json:"smesher_id,omitempty"` // list of smesher ids to fetch (can be empty for all)
	Offset        uint64                 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`                       // adjusts the starting point for data
	Limit         uint64                 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`                         // specifies max number of items to fetch
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MalfeasanceRequest) Reset() {
	*x = MalfeasanceRequest{}
	mi := &file_spacemesh_v2alpha1_malfeasance_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MalfeasanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MalfeasanceRequest) ProtoMessage() {}

func (x *MalfeasanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacemesh_v2alpha1_malfeasance_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MalfeasanceRequest.ProtoReflect.Descriptor instead.
func (*MalfeasanceRequest) Descriptor() ([]byte, []int) {
	return file_spacemesh_v2alpha1_malfeasance_proto_rawDescGZIP(), []int{1}
}

func (x *MalfeasanceRequest) GetSmesherId() [][]byte {
	if x != nil {
		return x.SmesherId
	}
	return nil
}

func (x *MalfeasanceRequest) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *MalfeasanceRequest) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type MalfeasanceList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Proofs        []*MalfeasanceProof    `protobuf:"bytes,1,rep,name=proofs,proto3" json:"proofs,omitempty"` // list of malfeasance proofs
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MalfeasanceList) Reset() {
	*x = MalfeasanceList{}
	mi := &file_spacemesh_v2alpha1_malfeasance_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MalfeasanceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MalfeasanceList) ProtoMessage() {}

func (x *MalfeasanceList) ProtoReflect() protoreflect.Message {
	mi := &file_spacemesh_v2alpha1_malfeasance_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MalfeasanceList.ProtoReflect.Descriptor instead.
func (*MalfeasanceList) Descriptor() ([]byte, []int) {
	return file_spacemesh_v2alpha1_malfeasance_proto_rawDescGZIP(), []int{2}
}

func (x *MalfeasanceList) GetProofs() []*MalfeasanceProof {
	if x != nil {
		return x.Proofs
	}
	return nil
}

type MalfeasanceStreamRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SmesherId     [][]byte               `protobuf:"bytes,1,rep,name=smesher_id,json=smesherId,proto3" json:"smesher_id,omitempty"` // list of smesher ids to watch
	Watch         bool                   `protobuf:"varint,2,opt,name=watch,proto3" json:"watch,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MalfeasanceStreamRequest) Reset() {
	*x = MalfeasanceStreamRequest{}
	mi := &file_spacemesh_v2alpha1_malfeasance_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MalfeasanceStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MalfeasanceStreamRequest) ProtoMessage() {}

func (x *MalfeasanceStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacemesh_v2alpha1_malfeasance_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MalfeasanceStreamRequest.ProtoReflect.Descriptor instead.
func (*MalfeasanceStreamRequest) Descriptor() ([]byte, []int) {
	return file_spacemesh_v2alpha1_malfeasance_proto_rawDescGZIP(), []int{3}
}

func (x *MalfeasanceStreamRequest) GetSmesherId() [][]byte {
	if x != nil {
		return x.SmesherId
	}
	return nil
}

func (x *MalfeasanceStreamRequest) GetWatch() bool {
	if x != nil {
		return x.Watch
	}
	return false
}

var File_spacemesh_v2alpha1_malfeasance_proto protoreflect.FileDescriptor

const file_spacemesh_v2alpha1_malfeasance_proto_rawDesc = "" +
	"\n" +
	"$spacemesh/v2alpha1/malfeasance.proto\x12\x12spacemesh.v2alpha1\x1a\x1bgoogle/api/visibility.proto\"\x8d\x03\n" +
	"\x10MalfeasanceProof\x12\x18\n" +
	"\asmesher\x18\x01 \x01(\fR\asmesher\x12N\n" +
	"\x06domain\x18\x02 \x01(\x0e26.spacemesh.v2alpha1.MalfeasanceProof.MalfeasanceDomainR\x06domain\x12\x12\n" +
	"\x04type\x18\x03 \x01(\rR\x04type\x12T\n" +
	"\n" +
	"properties\x18\x04 \x03(\v24.spacemesh.v2alpha1.MalfeasanceProof.PropertiesEntryR\n" +
	"properties\x1a=\n" +
	"\x0fPropertiesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"f\n" +
	"\x11MalfeasanceDomain\x12\x16\n" +
	"\x12DOMAIN_UNSPECIFIED\x10\x00\x12\x15\n" +
	"\x11DOMAIN_ACTIVATION\x10\x01\x12\x11\n" +
	"\rDOMAIN_BALLOT\x10\x02\x12\x0f\n" +
	"\vDOMAIN_HARE\x10\x03\"a\n" +
	"\x12MalfeasanceRequest\x12\x1d\n" +
	"\n" +
	"smesher_id\x18\x01 \x03(\fR\tsmesherId\x12\x16\n" +
	"\x06offset\x18\x02 \x01(\x04R\x06offset\x12\x14\n" +
	"\x05limit\x18\x03 \x01(\x04R\x05limit\"O\n" +
	"\x0fMalfeasanceList\x12<\n" +
	"\x06proofs\x18\x01 \x03(\v2$.spacemesh.v2alpha1.MalfeasanceProofR\x06proofs\"O\n" +
	"\x18MalfeasanceStreamRequest\x12\x1d\n" +
	"\n" +
	"smesher_id\x18\x01 \x03(\fR\tsmesherId\x12\x14\n" +
	"\x05watch\x18\x02 \x01(\bR\x05watch2u\n" +
	"\x12MalfeasanceService\x12S\n" +
	"\x04List\x12&.spacemesh.v2alpha1.MalfeasanceRequest\x1a#.spacemesh.v2alpha1.MalfeasanceList\x1a\n" +
	"\xfa\xd2\xe4\x93\x02\x04\x12\x02V22\x8c\x01\n" +
	"\x18MalfeasanceStreamService\x12^\n" +
	"\x06Stream\x12,.spacemesh.v2alpha1.MalfeasanceStreamRequest\x1a$.spacemesh.v2alpha1.MalfeasanceProof0\x01\x1a\x10\xfa\xd2\xe4\x93\x02\n" +
	"\x12\bINTERNALB\xdf\x01\n" +
	"\x16com.spacemesh.v2alpha1B\x10MalfeasanceProtoP\x01ZJgithub.com/spacemeshos/api/release/go/spacemesh/v2alpha1;spacemeshv2alpha1\xa2\x02\x03SXX\xaa\x02\x12Spacemesh.V2alpha1\xca\x02\x12Spacemesh\\V2alpha1\xe2\x02\x1eSpacemesh\\V2alpha1\\GPBMetadata\xea\x02\x13Spacemesh::V2alpha1b\x06proto3"

var (
	file_spacemesh_v2alpha1_malfeasance_proto_rawDescOnce sync.Once
	file_spacemesh_v2alpha1_malfeasance_proto_rawDescData []byte
)

func file_spacemesh_v2alpha1_malfeasance_proto_rawDescGZIP() []byte {
	file_spacemesh_v2alpha1_malfeasance_proto_rawDescOnce.Do(func() {
		file_spacemesh_v2alpha1_malfeasance_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_spacemesh_v2alpha1_malfeasance_proto_rawDesc), len(file_spacemesh_v2alpha1_malfeasance_proto_rawDesc)))
	})
	return file_spacemesh_v2alpha1_malfeasance_proto_rawDescData
}

var file_spacemesh_v2alpha1_malfeasance_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_spacemesh_v2alpha1_malfeasance_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_spacemesh_v2alpha1_malfeasance_proto_goTypes = []any{
	(MalfeasanceProof_MalfeasanceDomain)(0), // 0: spacemesh.v2alpha1.MalfeasanceProof.MalfeasanceDomain
	(*MalfeasanceProof)(nil),                // 1: spacemesh.v2alpha1.MalfeasanceProof
	(*MalfeasanceRequest)(nil),              // 2: spacemesh.v2alpha1.MalfeasanceRequest
	(*MalfeasanceList)(nil),                 // 3: spacemesh.v2alpha1.MalfeasanceList
	(*MalfeasanceStreamRequest)(nil),        // 4: spacemesh.v2alpha1.MalfeasanceStreamRequest
	nil,                                     // 5: spacemesh.v2alpha1.MalfeasanceProof.PropertiesEntry
}
var file_spacemesh_v2alpha1_malfeasance_proto_depIdxs = []int32{
	0, // 0: spacemesh.v2alpha1.MalfeasanceProof.domain:type_name -> spacemesh.v2alpha1.MalfeasanceProof.MalfeasanceDomain
	5, // 1: spacemesh.v2alpha1.MalfeasanceProof.properties:type_name -> spacemesh.v2alpha1.MalfeasanceProof.PropertiesEntry
	1, // 2: spacemesh.v2alpha1.MalfeasanceList.proofs:type_name -> spacemesh.v2alpha1.MalfeasanceProof
	2, // 3: spacemesh.v2alpha1.MalfeasanceService.List:input_type -> spacemesh.v2alpha1.MalfeasanceRequest
	4, // 4: spacemesh.v2alpha1.MalfeasanceStreamService.Stream:input_type -> spacemesh.v2alpha1.MalfeasanceStreamRequest
	3, // 5: spacemesh.v2alpha1.MalfeasanceService.List:output_type -> spacemesh.v2alpha1.MalfeasanceList
	1, // 6: spacemesh.v2alpha1.MalfeasanceStreamService.Stream:output_type -> spacemesh.v2alpha1.MalfeasanceProof
	5, // [5:7] is the sub-list for method output_type
	3, // [3:5] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_spacemesh_v2alpha1_malfeasance_proto_init() }
func file_spacemesh_v2alpha1_malfeasance_proto_init() {
	if File_spacemesh_v2alpha1_malfeasance_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_spacemesh_v2alpha1_malfeasance_proto_rawDesc), len(file_spacemesh_v2alpha1_malfeasance_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_spacemesh_v2alpha1_malfeasance_proto_goTypes,
		DependencyIndexes: file_spacemesh_v2alpha1_malfeasance_proto_depIdxs,
		EnumInfos:         file_spacemesh_v2alpha1_malfeasance_proto_enumTypes,
		MessageInfos:      file_spacemesh_v2alpha1_malfeasance_proto_msgTypes,
	}.Build()
	File_spacemesh_v2alpha1_malfeasance_proto = out.File
	file_spacemesh_v2alpha1_malfeasance_proto_goTypes = nil
	file_spacemesh_v2alpha1_malfeasance_proto_depIdxs = nil
}
