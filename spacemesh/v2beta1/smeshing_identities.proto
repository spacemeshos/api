syntax = "proto3";

package spacemesh.v2beta1;

import "google/api/annotations.proto";
import "google/api/visibility.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "spacemesh/smesher/v2/smeshing_identities.proto";

message IdentityStatesRequest {
  repeated spacemesh.smesher.v2.IdentityState states = 1; // list of identity states to filter by
  uint64 offset = 2; // adjusts the starting point for data
  uint64 limit = 3; // specifies max number of items to fetch
}

message IdentityStatesResponse {
  map<string, spacemesh.smesher.v2.Identity> identities = 1;
}

// PoetInfo rpc
message PoetInfoRequest {}

message PoetInfoResponse {
  repeated string poets = 1;
  spacemesh.smesher.v2.PoetConfig config = 2;
}

// Proposals and eligibilities
message EligibilitiesRequest {}

message EligibilitiesResponse {
  map<string, spacemesh.smesher.v2.EpochEligibilities> identities = 1;
}

message ProposalsRequest {}
message ProposalsResponse {
  map<string, spacemesh.smesher.v2.Proposals> proposals = 1;
}

service SmeshingIdentitiesService {
  option (google.api.api_visibility).restriction = "v2beta1";

  rpc States(IdentityStatesRequest) returns (IdentityStatesResponse) {
    option (google.api.http) = {
      get: "/spacemesh.v2beta1.SmeshingIdentitiesService/States"
    };
  }

  rpc PoetInfo(PoetInfoRequest) returns (PoetInfoResponse) {
    option (google.api.http) = {
      get: "/spacemesh.v2beta1.SmeshingIdentitiesService/PoetInfo"
    };
  }

  rpc Eligibilities(EligibilitiesRequest) returns (EligibilitiesResponse) {
    option (google.api.http) = {
      get: "/spacemesh.v2beta1.SmeshingIdentitiesService/Eligibilities"
    };
  }

  rpc Proposals(ProposalsRequest) returns (ProposalsResponse) {
    option (google.api.http) = {
      get: "/spacemesh.v2beta1.SmeshingIdentitiesService/Proposals"
    };
  }
}
