syntax = "proto3";
package spacemesh.v1;
option go_package = "github.com/spacemeshos/api/release/go/spacemesh/v1";
import "spacemesh/v1/types.proto";

// Spacemesh app primitive variable types
enum VariableType {
    VARIABLE_TYPE_UNSPECIFIED = 0;
    VARIABLE_TYPE_I8 = 1;
    VARIABLE_TYPE_U8 = 2;
    VARIABLE_TYPE_I16 = 3;
    VARIABLE_TYPE_U16 = 4;
    VARIABLE_TYPE_I32 = 5;
    VARIABLE_TYPE_U32 = 6;
    VARIABLE_TYPE_I64 = 7;
    VARIABLE_TYPE_U64 = 8;
    VARIABLE_TYPE_BOOL = 9;
    VARIABLE_TYPE_AMOUNT = 10;
    VARIABLE_TYPE_ADDRESS = 11;
}

// Variable metadata
message VariableMetadata {
    uint32 id = 1; // var index in app's state
    string name = 2; // var name
    VariableType type = 3; // type
    bool is_array = 4; // when true, variable is an array of 0 or more primitive value types, otherwise, a single primitive type value.
}

// The meta-data and value of an app's variable
message Variable {
    VariableMetadata meta_data = 1;
    repeated bytes data = 2; // One item - primitive var data. More than one item - an array of primitive data.
}

// The address of an app template in the templates global state store
message AppTemplateAddress {
    bytes address = 1;
}

// Information about an app template in the global state store
message AppTemplate {
    AppTemplateAddress address = 1; // template address
    string name = 2; // template name

    // note - the author can be obtained from the deploy transaction but it is nice to have it here
    AccountId author = 3; // template uploader

    // The layer can be obtained from the tx receipt but it is convenient to have it here
    LayerNumber deploy_layer = 4; // layer that the template was deployed - 0 for genesis templates

    TransactionId deploy_tx_id = 5; // the id of the deploy template transaction. Empty for genesis templates.

    bytes code = 6; // template wasm code

    repeated VariableMetadata vars = 7; // template variables order and metadata
}

// A Spacemesh app
// Note that both layer and spawner can be obtained from the transaction and transaction id for apps spawned by a transaction
// but is convenient to return them directly as part of apps' metadata.
message App {
    AccountId address = 1; // App's address in global space
    string name = 2; // short descriptive name
    AppTemplateAddress template_address = 3; // App's template address
    LayerNumber spawn_layer = 4; // Layer in which app was spawned
    TransactionId spawn_tx_id = 5; // Transaction which spawned the app. empty for genesis apps.
    AccountId spawner = 6; // App spawner account
    repeated Variable variables = 8; // ordered array of app vars and their values
}

// A request to return a template by address from the template global state store
message GetAppTemplateRequest {
    AppTemplateAddress address = 1; // template address
    bool include_code = 2; // when true, template result will include full wasm code
}

// A response with AppTemplate data
message GetAppTemplateResponse {
    AppTemplate template = 1;
}

// A request to return all templates from the templates global state store with pagination
message GetAllAppTemplatesRequest {
    uint32 max_results = 1; // max number of results to return
    uint32 offset = 2; // query offset
    bool include_code = 3; // when try templates results will include full wasm code
}

// A response includes total templates available in store and a list of zero ore more templates
message GetAllAppTemplatesResponse {
    uint32 total_results = 1; // total number of templates
    repeated AppTemplate templates = 2;
}

// A request to get an app's variable by var id
message GetAppVariableRequest {
    AccountId address = 1; // app's address
    LayerNumber layer_number = 2; // requested value as of a layer. Pass MAX_UI32 to get latest value
    uint32 id = 3; // app's var id - var's unique identifier
}

// A response with variable meta-data and value
message GetAppVariableResponse {
    Variable variable_value = 1;
}

// A request to get a deployed app metadata and optionally all variable values as of a specific layer or latest state.
message GetAppRequest {
    AccountId address = 1; // app address
    LayerNumber layer_number = 2; // layer for state. Ignored when include_var_values is set to false. pass MAX_UI32 to get latest state.
    bool include_var_values = 3; // when true, var values will be included in response, false otherwise.
}

message GetAppResponse {
    App app = 1;
}







