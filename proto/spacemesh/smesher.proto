syntax = "proto3";
package spacemesh;
import "google/protobuf/empty.proto";
import "spacemesh/types.proto";
import "spacemesh/smesher_types.proto";

// Readonly basic node data
service SmesherService {

    /////// Smeshing (mining) management

    // Returns true iff node is currently smeshing
    rpc IsSmeshing(google.protobuf.Empty) returns (TypedResult);

    // Start smeshing. Will return false if commitment is incomplete or missing
    rpc StartSmeshing(google.protobuf.Empty) returns (TypedResult);

    // Stop smeshing and optionally attempt to delete post init file(s)
    // Returns true if request is accepted by node, false if it fails
    rpc StopSmeshing(DeleteCommitment) returns (TypedResult);

    // Get the current smesher id generated by the node
    rpc SmesherId(google.protobuf.Empty) returns (AccountId);

    // Get the current coinbase
    rpc Coinbase(google.protobuf.Empty) returns (AccountId);

    // Set the coinbase.
    // Returns true if request succeeds, false if it fails.
    rpc SetCoinbase(AccountId) returns (TypedResult);

    // Get the current min gas for including txs in blocks by this smesher
    rpc MinGas(google.protobuf.Empty) returns (SimpleInt);

    // Set a min gas units for including txs in blocks by this smesher
    // Returns true if request succeeds, false if it fails.
    rpc SetMinGas(SimpleInt) returns (TypedResult);

    /////// PoSpace commitments management

    // Returns post commitment data from the node
    rpc CommitmentData(google.protobuf.Empty) returns (CommitmentData);

    // Returns a list of available commitment init processors
    // (including CPU as fallback)
    rpc CommitmentProcessors(google.protobuf.Empty) returns (CommitmentProcessors);

    // Starts (or continues) a commitment init phase. Supports appending to file
    // from a previous incomplete init phase
    // Returns true if request is accepted by node, false if it fails
    rpc CreateCommitment(CommitmentUserData) returns (TypedResult);

    // Stop an ongoing commitment init phase and optionally attempt to delete
    // commitment file(s)
    // Returns true if request is accepted by node, false if it fails
    rpc StopCommitmentCreation(DeleteCommitment) returns (TypedResult);

    // Retruns a stream of updates to a post commitment during the init phase
    rpc CommitmentProgressStream(google.protobuf.Empty) returns (stream CommitmentData);

}
