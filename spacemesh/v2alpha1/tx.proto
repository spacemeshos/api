syntax = "proto3";

import "google/rpc/status.proto";

package spacemesh.v2alpha1;

message Transaction {
  oneof versioned {
    TransactionV1 v1 = 1;
  }
}

message ContentsSend {
  string destination = 1; // recipient account
  uint64 amount = 2; // amount in smidge
}

message ContentsSingleSigSpawn {
  string pubkey = 1;
}

message ContentsMultiSigSpawn {
  uint32 required = 1; // number of required signatures
  repeated string pubkey = 2;
}

message TransactionContents {
  oneof contents {
    ContentsSend send = 1;
    ContentsSingleSigSpawn single_sig_spawn = 2;
    ContentsMultiSigSpawn multi_sig_spawn = 3;
  }
}

// An immutable Spacemesh transaction.
// do not include mutable data such as tx state or result.
message TransactionV1 {
  bytes id = 1;
  string principal = 2; // principal account address
  string template = 3; // template account address
  uint32 method = 4; // this is actually limited by uint8, but no type for that.
  Nonce nonce = 5;
  uint64 max_gas = 6; // max gas units consumed by tx
  uint64 gas_price = 7; // fee per unit gas, in smidge
  uint64 max_spend = 8;
  bytes raw = 9;
  enum TransactionType {
    TRANSACTION_TYPE_UNSPECIFIED = 0;
    TRANSACTION_TYPE_SINGLE_SIG_SEND = 1;
    TRANSACTION_TYPE_SINGLE_SIG_SPAWN = 2;
    TRANSACTION_TYPE_SINGLE_SIG_SELFSPAWN = 3;
    TRANSACTION_TYPE_MULTI_SIG_SEND = 4;
    TRANSACTION_TYPE_MULTI_SIG_SPAWN = 5;
    TRANSACTION_TYPE_MULTI_SIG_SELFSPAWN = 6;
  }
  TransactionType type = 10;
  TransactionContents contents = 11; // parsed transaction contents
}

message Nonce {
  uint64 counter = 1;
}

// TransactionState is the "journey" of a tx from mempool to block inclusion to
// mesh to STF processing. To know whether or not the tx actually succeeded,
// and its side effects, check TransactionResult.
message TransactionState {
  bytes id = 1;
  enum TransactionState {
    TRANSACTION_STATE_UNSPECIFIED = 0; // default state
    TRANSACTION_STATE_REJECTED = 1; // rejected from mempool due to, e.g., invalid syntax
    TRANSACTION_STATE_INSUFFICIENT_FUNDS = 2; // rejected from mempool by funds check
    TRANSACTION_STATE_CONFLICTING = 3; // rejected from mempool due to conflicting counter
    TRANSACTION_STATE_MEMPOOL = 4; // in mempool but not on the mesh yet
    TRANSACTION_STATE_MESH = 5; // submitted to the mesh
    TRANSACTION_STATE_PROCESSED = 6; // processed by STF; check Receipt for success or failure
  }
  TransactionState state = 2;
}

message TransactionResult {
  enum Status {
    TRANSACTION_STATUS_UNSPECIFIED = 0;
    TRANSACTION_STATUS_SUCCESS = 1;
    TRANSACTION_STATUS_FAILURE = 2;
    TRANSACTION_STATUS_INVALID = 3;
  }

  Transaction tx = 1;
  Status status = 2;
  string message = 3;
  uint64 gas_consumed = 4; // in units of gas
  uint64 fee = 5; // in smidge
  bytes block = 6;
  uint32 layer = 7;
  repeated string touched_addresses = 8;
}

message TransactionStreamRequest {
  uint32 start_layer = 1; // Required: starting layer for transaction streaming.
  optional uint32 end_layer = 2; // Ending layer for transaction streaming.
  repeated bytes txid = 3; // Filter: specific transaction IDs.
  string address = 4; // Filter: address involved in transaction.
  bool watch = 5; // Continue watching for new transactions.
}

service TransactionStreamService {
  rpc Stream(TransactionStreamRequest) returns (stream Transaction);
}

message TransactionRequest {
  optional uint32 start_layer = 1; // Starting layer for transactions.
  optional uint32 end_layer = 2; // Ending layer for transactions.
  repeated bytes txid = 3; // Filter: specific transaction IDs to filter.
  optional string address = 4; // Filter: address involved in transaction.
  uint64 offset = 5; // Adjusts the starting point for data retrieval.
  uint64 limit = 6; // Specifies maximum number of items to fetch.
  bool include_state = 7; // Whether to include transaction state in response.
  bool include_result = 8; // Whether to include result of transactions in response.
}

message TransactionResponse {
  Transaction tx = 1;
  TransactionState tx_state = 2;
  TransactionResult tx_result = 3;
}

message TransactionList {
  repeated TransactionResponse transactions = 1;
}

message ParseTransactionRequest {
  bytes transaction = 1;  // signed binary transaction
  bool verify = 2;        // if true signature verification will be executed
}

message ParseTransactionResponse {
  google.rpc.Status status = 1;
  Transaction tx = 2;
}

message SubmitTransactionRequest {
  bytes transaction = 1;  // signed binary transaction
}

message SubmitTransactionResponse {
  google.rpc.Status status = 1;
  bytes tx_id = 2;
}

message EstimateGasRequest {
  bytes transaction = 1;  // signed binary transaction
}

message EstimateGasResponse {
  google.rpc.Status status = 1;
  uint64 recommended_max_gas = 2;
}

service TransactionService {
  rpc List(TransactionRequest) returns (TransactionList);
  rpc ParseTransaction(ParseTransactionRequest) returns (ParseTransactionResponse);
  rpc SubmitTransaction(SubmitTransactionRequest) returns (SubmitTransactionResponse);
  rpc EstimateGas(EstimateGasRequest) returns (EstimateGasResponse);
}