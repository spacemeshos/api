syntax = "proto3";

package spacemesh.v2alpha1;

import "google/api/annotations.proto";
import "google/api/visibility.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

import "spacemesh/v2beta1/smeshing_identities.proto";

message IdentityStatesRequest {
  repeated spacemesh.v2beta1.IdentityState states = 1; // list of identity states to filter by
  uint64 offset = 2; // adjusts the starting point for data
  uint64 limit = 3; // specifies max number of items to fetch
}

message IdentityStatesResponse {
  map<string, spacemesh.v2beta1.Identity> identities = 1;
}

// PoetInfo rpc
message PoetInfoRequest {}

message PoetInfoResponse {
  repeated string poets = 1;
  spacemesh.v2beta1.PoetConfig config = 2;
}

message EligibilitiesRequest {}

message EligibilitiesResponse {
  map<string, spacemesh.v2beta1.EpochEligibilities> identities = 1;
}

message ProposalsRequest {}

message ProposalsResponse {
  map<string, spacemesh.v2beta1.Proposals> proposals = 1;
}

service SmeshingIdentitiesService {
  option (google.api.api_visibility).restriction = "INTERNAL";

  rpc States(IdentityStatesRequest) returns (IdentityStatesResponse);

  rpc PoetInfo(PoetInfoRequest) returns (PoetInfoResponse);

  rpc Eligibilities(EligibilitiesRequest) returns (EligibilitiesResponse);

  rpc Proposals(ProposalsRequest) returns (ProposalsResponse);
}
