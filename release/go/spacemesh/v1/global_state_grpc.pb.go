// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: spacemesh/v1/global_state.proto

package spacemeshv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GlobalStateService_GlobalStateHash_FullMethodName   = "/spacemesh.v1.GlobalStateService/GlobalStateHash"
	GlobalStateService_Account_FullMethodName           = "/spacemesh.v1.GlobalStateService/Account"
	GlobalStateService_AccountDataQuery_FullMethodName  = "/spacemesh.v1.GlobalStateService/AccountDataQuery"
	GlobalStateService_AccountDataStream_FullMethodName = "/spacemesh.v1.GlobalStateService/AccountDataStream"
	GlobalStateService_GlobalStateStream_FullMethodName = "/spacemesh.v1.GlobalStateService/GlobalStateStream"
)

// GlobalStateServiceClient is the client API for GlobalStateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GlobalStateServiceClient interface {
	// Latest computed global state - layer and its root hash
	GlobalStateHash(ctx context.Context, in *GlobalStateHashRequest, opts ...grpc.CallOption) (*GlobalStateHashResponse, error)
	// Account info in the current global state.
	Account(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountResponse, error)
	// Query for account related data such as rewards, tx receipts and account info
	//
	// Note: it might be too expensive to add a param for layer to get these results from
	// as it may require indexing all global state changes per account by layer.
	// If it is possible to index by layer then we should add param start_layer to
	// AccountDataParams. Currently it will return data from genesis.
	AccountDataQuery(ctx context.Context, in *AccountDataQueryRequest, opts ...grpc.CallOption) (*AccountDataQueryResponse, error)
	// Get a stream of account related changes such as account balance change,
	// tx receipts and rewards
	AccountDataStream(ctx context.Context, in *AccountDataStreamRequest, opts ...grpc.CallOption) (GlobalStateService_AccountDataStreamClient, error)
	// New global state computed for a layer by the STF
	GlobalStateStream(ctx context.Context, in *GlobalStateStreamRequest, opts ...grpc.CallOption) (GlobalStateService_GlobalStateStreamClient, error)
}

type globalStateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGlobalStateServiceClient(cc grpc.ClientConnInterface) GlobalStateServiceClient {
	return &globalStateServiceClient{cc}
}

func (c *globalStateServiceClient) GlobalStateHash(ctx context.Context, in *GlobalStateHashRequest, opts ...grpc.CallOption) (*GlobalStateHashResponse, error) {
	out := new(GlobalStateHashResponse)
	err := c.cc.Invoke(ctx, GlobalStateService_GlobalStateHash_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalStateServiceClient) Account(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountResponse, error) {
	out := new(AccountResponse)
	err := c.cc.Invoke(ctx, GlobalStateService_Account_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalStateServiceClient) AccountDataQuery(ctx context.Context, in *AccountDataQueryRequest, opts ...grpc.CallOption) (*AccountDataQueryResponse, error) {
	out := new(AccountDataQueryResponse)
	err := c.cc.Invoke(ctx, GlobalStateService_AccountDataQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalStateServiceClient) AccountDataStream(ctx context.Context, in *AccountDataStreamRequest, opts ...grpc.CallOption) (GlobalStateService_AccountDataStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &GlobalStateService_ServiceDesc.Streams[0], GlobalStateService_AccountDataStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &globalStateServiceAccountDataStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GlobalStateService_AccountDataStreamClient interface {
	Recv() (*AccountDataStreamResponse, error)
	grpc.ClientStream
}

type globalStateServiceAccountDataStreamClient struct {
	grpc.ClientStream
}

func (x *globalStateServiceAccountDataStreamClient) Recv() (*AccountDataStreamResponse, error) {
	m := new(AccountDataStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *globalStateServiceClient) GlobalStateStream(ctx context.Context, in *GlobalStateStreamRequest, opts ...grpc.CallOption) (GlobalStateService_GlobalStateStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &GlobalStateService_ServiceDesc.Streams[1], GlobalStateService_GlobalStateStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &globalStateServiceGlobalStateStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GlobalStateService_GlobalStateStreamClient interface {
	Recv() (*GlobalStateStreamResponse, error)
	grpc.ClientStream
}

type globalStateServiceGlobalStateStreamClient struct {
	grpc.ClientStream
}

func (x *globalStateServiceGlobalStateStreamClient) Recv() (*GlobalStateStreamResponse, error) {
	m := new(GlobalStateStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GlobalStateServiceServer is the server API for GlobalStateService service.
// All implementations should embed UnimplementedGlobalStateServiceServer
// for forward compatibility
type GlobalStateServiceServer interface {
	// Latest computed global state - layer and its root hash
	GlobalStateHash(context.Context, *GlobalStateHashRequest) (*GlobalStateHashResponse, error)
	// Account info in the current global state.
	Account(context.Context, *AccountRequest) (*AccountResponse, error)
	// Query for account related data such as rewards, tx receipts and account info
	//
	// Note: it might be too expensive to add a param for layer to get these results from
	// as it may require indexing all global state changes per account by layer.
	// If it is possible to index by layer then we should add param start_layer to
	// AccountDataParams. Currently it will return data from genesis.
	AccountDataQuery(context.Context, *AccountDataQueryRequest) (*AccountDataQueryResponse, error)
	// Get a stream of account related changes such as account balance change,
	// tx receipts and rewards
	AccountDataStream(*AccountDataStreamRequest, GlobalStateService_AccountDataStreamServer) error
	// New global state computed for a layer by the STF
	GlobalStateStream(*GlobalStateStreamRequest, GlobalStateService_GlobalStateStreamServer) error
}

// UnimplementedGlobalStateServiceServer should be embedded to have forward compatible implementations.
type UnimplementedGlobalStateServiceServer struct {
}

func (UnimplementedGlobalStateServiceServer) GlobalStateHash(context.Context, *GlobalStateHashRequest) (*GlobalStateHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GlobalStateHash not implemented")
}
func (UnimplementedGlobalStateServiceServer) Account(context.Context, *AccountRequest) (*AccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Account not implemented")
}
func (UnimplementedGlobalStateServiceServer) AccountDataQuery(context.Context, *AccountDataQueryRequest) (*AccountDataQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountDataQuery not implemented")
}
func (UnimplementedGlobalStateServiceServer) AccountDataStream(*AccountDataStreamRequest, GlobalStateService_AccountDataStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method AccountDataStream not implemented")
}
func (UnimplementedGlobalStateServiceServer) GlobalStateStream(*GlobalStateStreamRequest, GlobalStateService_GlobalStateStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GlobalStateStream not implemented")
}

// UnsafeGlobalStateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GlobalStateServiceServer will
// result in compilation errors.
type UnsafeGlobalStateServiceServer interface {
	mustEmbedUnimplementedGlobalStateServiceServer()
}

func RegisterGlobalStateServiceServer(s grpc.ServiceRegistrar, srv GlobalStateServiceServer) {
	s.RegisterService(&GlobalStateService_ServiceDesc, srv)
}

func _GlobalStateService_GlobalStateHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GlobalStateHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalStateServiceServer).GlobalStateHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GlobalStateService_GlobalStateHash_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalStateServiceServer).GlobalStateHash(ctx, req.(*GlobalStateHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalStateService_Account_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalStateServiceServer).Account(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GlobalStateService_Account_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalStateServiceServer).Account(ctx, req.(*AccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalStateService_AccountDataQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountDataQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalStateServiceServer).AccountDataQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GlobalStateService_AccountDataQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalStateServiceServer).AccountDataQuery(ctx, req.(*AccountDataQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalStateService_AccountDataStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AccountDataStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GlobalStateServiceServer).AccountDataStream(m, &globalStateServiceAccountDataStreamServer{stream})
}

type GlobalStateService_AccountDataStreamServer interface {
	Send(*AccountDataStreamResponse) error
	grpc.ServerStream
}

type globalStateServiceAccountDataStreamServer struct {
	grpc.ServerStream
}

func (x *globalStateServiceAccountDataStreamServer) Send(m *AccountDataStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GlobalStateService_GlobalStateStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GlobalStateStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GlobalStateServiceServer).GlobalStateStream(m, &globalStateServiceGlobalStateStreamServer{stream})
}

type GlobalStateService_GlobalStateStreamServer interface {
	Send(*GlobalStateStreamResponse) error
	grpc.ServerStream
}

type globalStateServiceGlobalStateStreamServer struct {
	grpc.ServerStream
}

func (x *globalStateServiceGlobalStateStreamServer) Send(m *GlobalStateStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// GlobalStateService_ServiceDesc is the grpc.ServiceDesc for GlobalStateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GlobalStateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spacemesh.v1.GlobalStateService",
	HandlerType: (*GlobalStateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GlobalStateHash",
			Handler:    _GlobalStateService_GlobalStateHash_Handler,
		},
		{
			MethodName: "Account",
			Handler:    _GlobalStateService_Account_Handler,
		},
		{
			MethodName: "AccountDataQuery",
			Handler:    _GlobalStateService_AccountDataQuery_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AccountDataStream",
			Handler:       _GlobalStateService_AccountDataStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GlobalStateStream",
			Handler:       _GlobalStateService_GlobalStateStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "spacemesh/v1/global_state.proto",
}
